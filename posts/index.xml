<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on NixOS Blog</title><link>https://saylesss88.github.io/posts/</link><description>Recent content in Posts on NixOS Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 14 May 2025 19:28:57 -0400</lastBuildDate><atom:link href="https://saylesss88.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Using_overlays_to_add_packages</title><link>https://saylesss88.github.io/posts/using_overlays_to_add_packages/</link><pubDate>Wed, 14 May 2025 19:28:57 -0400</pubDate><guid>https://saylesss88.github.io/posts/using_overlays_to_add_packages/</guid><description>&lt;h1 id="using-overlays-to-add-packages-that-arent-in-nixpkgs">Using Overlays to add Packages that aren&amp;rsquo;t in Nixpkgs&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#adding-the-overlays-output-to-your-flake">Adding the overlays output to your Flake&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-actual-overlay">The Actual Overlay&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-pokego-package-definition">The pokego Package definition&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-the-overlay-to-your-configuration">Adding the overlay to your configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="#installing-pokego">Installing Pokego&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#another-overlay-example">Another Overlay Example&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="images/pokego.png"
 alt="window_view" width="700">
&lt;/figure>

&lt;p>It is very common to use overlays in Nix to install packages that aren&amp;rsquo;t
available in the standard Nixpkgs repository.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Overlays are one of the primary and recommended ways to extend and customize
your Nix environment. It&amp;rsquo;s important to remember that Nix overlays are made to
allow you to modify or extend the package set provided by Nixpkgs (or other
Nix sources) without directly altering the original package definitions. This
is crucial for maintaining reproducibility and avoiding conflicts. Overlays
are essentially functions that take the previous package set and allow you to
add, modify, or remove packages.&lt;/p></description><content:encoded><![CDATA[<h1 id="using-overlays-to-add-packages-that-arent-in-nixpkgs">Using Overlays to add Packages that aren&rsquo;t in Nixpkgs</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#adding-the-overlays-output-to-your-flake">Adding the overlays output to your Flake</a></li>
<li><a href="#the-actual-overlay">The Actual Overlay</a></li>
<li><a href="#the-pokego-package-definition">The pokego Package definition</a></li>
<li><a href="#adding-the-overlay-to-your-configuration">Adding the overlay to your configuration</a></li>
<li><a href="#installing-pokego">Installing Pokego</a>
<ul>
<li><a href="#another-overlay-example">Another Overlay Example</a></li>
</ul>
</li>
</ul>
<figure><img src="images/pokego.png"
    alt="window_view" width="700">
</figure>

<p>It is very common to use overlays in Nix to install packages that aren&rsquo;t
available in the standard Nixpkgs repository.</p>
<ul>
<li>
<p>Overlays are one of the primary and recommended ways to extend and customize
your Nix environment. It&rsquo;s important to remember that Nix overlays are made to
allow you to modify or extend the package set provided by Nixpkgs (or other
Nix sources) without directly altering the original package definitions. This
is crucial for maintaining reproducibility and avoiding conflicts. Overlays
are essentially functions that take the previous package set and allow you to
add, modify, or remove packages.</p>
</li>
<li>
<p>It may be helpful to first read my
<a href="https://saylesss88.github.io/posts/nix_flakes_tips/">NixFlakesTips</a>
post first to understand the outputs in my flake.</p>
</li>
</ul>
<h2 id="adding-the-overlays-output-to-your-flake">Adding the overlays output to your Flake</h2>
<p>I&rsquo;ll show the process of adding the <code>pokego</code> package that is not in Nixpkgs:</p>
<ol>
<li>In my <code>flake.nix</code> I have a custom inputs variable within my let block of my flake like so just showing the necessary parts for berevity:</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> my-inputs <span style="color:#f92672">@</span> {
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    treefmt-nix<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>  }: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>    system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>    host <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;magic&#34;</span>;
</span></span><span style="display:flex;"><span>    userVars <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jr&#34;</span>;
</span></span><span style="display:flex;"><span>      gitUsername <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;saylesss88&#34;</span>;
</span></span><span style="display:flex;"><span>      editor <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hx&#34;</span>;
</span></span><span style="display:flex;"><span>      term <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ghostty&#34;</span>;
</span></span><span style="display:flex;"><span>      keys <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;us&#34;</span>;
</span></span><span style="display:flex;"><span>      browser <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;firefox&#34;</span>;
</span></span><span style="display:flex;"><span>      flake <span style="color:#f92672">=</span> builtins<span style="color:#f92672">.</span>getEnv <span style="color:#e6db74">&#34;HOME&#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/flake&#34;</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    inputs <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>      my-inputs
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">//</span> {
</span></span><span style="display:flex;"><span>        pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> inputs<span style="color:#f92672">.</span>nixpkgs {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>        lib <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>          overlays <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./lib/overlay.nix</span>;
</span></span><span style="display:flex;"><span>          nixOsModules <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./nixos</span>;
</span></span><span style="display:flex;"><span>          homeModules <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./home</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># ... snip ...</span></span></span></code></pre></div><h2 id="the-actual-overlay">The Actual Overlay</h2>
<ol start="2">
<li>In the <code>overlay.nix</code> I have this helper function and the defined package:</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># overlay.nix</span>
</span></span><span style="display:flex;"><span>_final: prev: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Helper function to import a package</span>
</span></span><span style="display:flex;"><span>  callPackage <span style="color:#f92672">=</span> prev<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>callPackageWith (prev <span style="color:#f92672">//</span> packages);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Define all packages</span>
</span></span><span style="display:flex;"><span>  packages <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Additional packages</span>
</span></span><span style="display:flex;"><span>    pokego <span style="color:#f92672">=</span> callPackage <span style="color:#e6db74">./pac_defs/pokego.nix</span> {};
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>  packages</span></span></code></pre></div><ol>
<li><code>_final: prev:</code>: This is the function definition of the overlay.</li>
</ol>
<ul>
<li>
<p><code>_final</code>: This argument represents the final, merged package set after all
overlays have been applied. It&rsquo;s often unused within a single overlay, hence
the <code>_</code> prefix (a Nix convention for unused variables).</p>
</li>
<li>
<p><code>prev</code>: This is the crucial argument. It represents the package set before
this overlay is applied. This allows you to refer to existing packages and
functions from Nixpkgs.</p>
</li>
</ul>
<ol start="2">
<li>
<p><code>let ... in packages</code>: This introduces a <code>let</code> expression, which defines
local variables within the scope of this overlay function. The <code>in packages</code>
part means that the overlay function will ultimately return the <code>packages</code>
attribute set defined within the <code>let</code> block.</p>
</li>
<li>
<p><code>callPackage = prev.lib.callPackageWith (prev // packages)</code>: This line
defines a helper function called <code>callPackage</code>.</p>
</li>
</ol>
<ul>
<li>
<p><code>prev.lib.callPackageWith</code> Is a function provided by Nixpkgs&rsquo; <code>lib</code>.
<code>callPackageWith</code> is like <code>prev.lib.callPackage</code>, but allows the passing
of additional arguments that will then be passed to the package definition.</p>
</li>
<li>
<p><code>(prev // packages)</code>: This is an attribute set merge operation. It takes the
<code>prev</code> package set (Nixpkgs before this overlay) and merges it with the
<code>packages</code> attribute set defined later in this overlay.</p>
</li>
<li>
<p>By using <code>callPackageWith</code> with this merged attribute set, the <code>callPackage</code>
function defined here is set up to correctly import package definitions,
ensuring they have access to both the original Nixpkgs and any other packages
defined within this overlay.</p>
</li>
</ul>
<ol start="4">
<li>
<p><code>packages = { ... };</code>: This defines an attribute set named <code>packages</code>. This
set will contain all the new or modified packages introduced by this overlay.</p>
</li>
<li>
<p><code>pokego = callPackages ./pac_defs/pokego.nix { };</code>: This is the core of how
the <code>pokego</code> package is added.</p>
</li>
</ol>
<ul>
<li>
<p><code>pokego =</code>: This defines a new attribute named <code>pokego</code> within the packages
attribute set. This name will be used to refer to the pokego package later.</p>
</li>
<li>
<p><code>callPackage ./pac_defs/pokego.nix {}</code>: This calls the callPackage helper
function defined earlier.</p>
</li>
<li>
<p><code>./pac_defs/pokego.nix</code>: This is the path to another Nix file(<code>pokego.nix</code>)
that contains the actual package definition for pokego. This file would
define how to fetch, build, and install the pokego software</p>
</li>
<li>
<p><code>{}</code>: This is an empty attribute set passed as additional arguments to the
<code>pokego.nix</code> package definition. If <code>pokego.nix</code> expected any specific
parameters (like versions or dependencies), you would provide them here.
Since it&rsquo;s empty, it implies pokego.nix either has no required arguments or
uses default values.</p>
</li>
</ul>
<ol start="6">
<li><code>in packages</code>: As mentioned earlier, the overlay function returns the
packages attribute set. When this overlay is applied, the packages defined
within this packages set (including pokego) will be added to the overall Nix
package set.</li>
</ol>
<h2 id="the-pokego-package-definition">The pokego Package definition</h2>
<p>The following is the <code>./pac_defs/pokego.nix</code>, it may be helpful to first read my
<a href="https://saylesss88.github.io/posts/understanding_package_definitions/">PackageDefinition</a>
post to better understand the following:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># pokego.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  buildGoModule<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  fetchFromGitHub<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>}:
</span></span><span style="display:flex;"><span>buildGoModule <span style="color:#66d9ef">rec</span> {
</span></span><span style="display:flex;"><span>  pname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pokego&#34;</span>;
</span></span><span style="display:flex;"><span>  version <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0.3.0&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  src <span style="color:#f92672">=</span> fetchFromGitHub {
</span></span><span style="display:flex;"><span>    owner <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rubiin&#34;</span>;
</span></span><span style="display:flex;"><span>    repo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pokego&#34;</span>;
</span></span><span style="display:flex;"><span>    rev <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;v</span><span style="color:#e6db74">${</span>version<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>    hash <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sha256-cFpEi8wBdCzAl9dputoCwy8LeGyK3UF2vyylft7/1wY=&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  vendorHash <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sha256-7SoKHH+tDJKhUQDoVwAzVZXoPuKNJEHDEyQ77BPEDQ0=&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Install shell completions</span>
</span></span><span style="display:flex;"><span>  postInstall <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    install -Dm644 completions/pokego.bash &#34;$out/share/bash-completion/completions/pokego&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    install -Dm644 completions/pokego.fish &#34;$out/share/fish/vendor_completions.d/pokego.fish&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    install -Dm644 completions/pokego.zsh &#34;$out/share/zsh/site-functions/_pokego&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  meta <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> lib; {
</span></span><span style="display:flex;"><span>    description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Command-line tool that lets you display Pokémon sprites in color directly in your terminal&#34;</span>;
</span></span><span style="display:flex;"><span>    homepage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://github.com/rubiin/pokego&#34;</span>;
</span></span><span style="display:flex;"><span>    license <span style="color:#f92672">=</span> licenses<span style="color:#f92672">.</span>gpl3Only;
</span></span><span style="display:flex;"><span>    maintainers <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> maintainers; [
</span></span><span style="display:flex;"><span>      rubiin
</span></span><span style="display:flex;"><span>      jameskim0987
</span></span><span style="display:flex;"><span>      vinibispo
</span></span><span style="display:flex;"><span>    ];
</span></span><span style="display:flex;"><span>    mainProgram <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pokego&#34;</span>;
</span></span><span style="display:flex;"><span>    platforms <span style="color:#f92672">=</span> platforms<span style="color:#f92672">.</span>all;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h2 id="adding-the-overlay-to-your-configuration">Adding the overlay to your configuration</h2>
<p>There are a few places you could choose to put the following, I choose to use
my <code>configuration.nix</code> because of my setup:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># configuration.nix</span>
</span></span><span style="display:flex;"><span>nixpkgs<span style="color:#f92672">.</span>overlays <span style="color:#f92672">=</span> [inputs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>overlays]</span></span></code></pre></div><h2 id="installing-pokego">Installing Pokego</h2>
<ul>
<li>If you are managing your entire system configuration with NixOS, you would
typically add <code>pokego</code> to your <code>environment.systemPackages</code>.</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># configuration.nix</span>
</span></span><span style="display:flex;"><span>environment<span style="color:#f92672">.</span>systemPackages <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> pkgs; [
</span></span><span style="display:flex;"><span>  pokego
</span></span><span style="display:flex;"><span>]</span></span></code></pre></div><ul>
<li>If you prefer home-manager you can install <code>pokego</code> with home-manager also:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># home.nix</span>
</span></span><span style="display:flex;"><span>home<span style="color:#f92672">.</span>packages <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">.</span>pokego
</span></span><span style="display:flex;"><span>]</span></span></code></pre></div><h3 id="another-overlay-example">Another Overlay Example</h3>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://flakehub.com/NixOS/nixpkgs/*.tar.gz&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    nix<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://flakehub.com/f/NixOS/nix/2.17.0.tar.gz&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> { self<span style="color:#f92672">,</span> nixpkgs<span style="color:#f92672">,</span> nix }:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>      system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;aarch64-darwin&#34;</span>;
</span></span><span style="display:flex;"><span>      pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> nixpkgs {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>        overlays <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>          nix<span style="color:#f92672">.</span>overlays<span style="color:#f92672">.</span>default
</span></span><span style="display:flex;"><span>        ];
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>     <span style="color:#75715e"># `pkgs` is nixpkgs for the system, with nix&#39;s overlay applied</span>
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>Normally, <code>pkgs = import nixpkgs { }`` imports Nixpkgs with default settings. However, the example above customizes this import by passing arguments: </code>pkgs = import nixpkgs { inherit system; overlays = [ nix.overlays.default];}<code>. This makes the pkgs variable represent nixpkgs specifically for the </code>aarch64-darwin` system, with the overlay from the nix flake applied.</p>
</li>
<li>
<p>Consequently, any packages built using this customized <code>pkgs</code> will now depend
on or use the specific nix version (2.17.0) provided by the nix flake, instead
of the version that comes with the fetched nixpkgs. This technique can be
useful for ensuring a consistent environment or testing specific package
versions.</p>
</li>
</ul>
]]></content:encoded></item><item><title>Nix_lang_basics</title><link>https://saylesss88.github.io/posts/nix_lang_basics/</link><pubDate>Wed, 14 May 2025 19:28:12 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_lang_basics/</guid><description>&lt;h1 id="the-nix-language">The Nix Language&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#the-nix-language">The Nix Language&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#how-does-nix-work">How does Nix work&lt;/a>&lt;/li>
&lt;li>&lt;a href="#syntax-basics">Syntax Basics&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#derivations">Derivations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#evaluating-nix-files">Evaluating Nix Files&lt;/a>&lt;/li>
&lt;li>&lt;a href="#resources">Resources&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv18.png"
 alt="window_view" width="700">
&lt;/figure>

&lt;p>Nix as a programming language can be thought of as a kind of &amp;ldquo;JSON, but with
functions&amp;rdquo;.&lt;/p>
&lt;p>All statements are declarative, meaning that there&amp;rsquo;s no sequential flow of
instructions that makes up a Nix package. Instead, functions are called that
assign values to fields in attribute sets, which in turn may get assigned to
other values.&lt;/p></description><content:encoded><![CDATA[<h1 id="the-nix-language">The Nix Language</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#the-nix-language">The Nix Language</a>
<ul>
<li><a href="#how-does-nix-work">How does Nix work</a></li>
<li><a href="#syntax-basics">Syntax Basics</a>
<ul>
<li><a href="#derivations">Derivations</a></li>
<li><a href="#evaluating-nix-files">Evaluating Nix Files</a></li>
<li><a href="#resources">Resources</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv18.png"
    alt="window_view" width="700">
</figure>

<p>Nix as a programming language can be thought of as a kind of &ldquo;JSON, but with
functions&rdquo;.</p>
<p>All statements are declarative, meaning that there&rsquo;s no sequential flow of
instructions that makes up a Nix package. Instead, functions are called that
assign values to fields in attribute sets, which in turn may get assigned to
other values.</p>
<h2 id="how-does-nix-work">How does Nix work</h2>
<p>Nix is a pure, functional, lazy, declarative, and reproducible programming
language.</p>
<table>
  <thead>
      <tr>
          <th>Concept</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Pure</td>
          <td>Functions don&rsquo;t cause side effects.</td>
      </tr>
      <tr>
          <td>Functional</td>
          <td>Functions can be passed as arguments and returned as results.</td>
      </tr>
      <tr>
          <td>Lazy</td>
          <td>Not evaluated until needed to complete a computation.</td>
      </tr>
      <tr>
          <td>Declarative</td>
          <td>Describing a system outcome.</td>
      </tr>
      <tr>
          <td>Reproducible</td>
          <td>Operations that are performed twice return same results</td>
      </tr>
  </tbody>
</table>
<ul>
<li>
<p>In Nix, the process of managing software starts with package definitions. These are files written in the Nix language that describe how a particular piece of software should be built. These package definitions, when processed by Nix, are translated into derivations.</p>
</li>
<li>
<p>At its core, a derivation in Nix is a blueprint or a recipe that describes how to build a specific software package or any other kind of file or directory. It&rsquo;s a declarative specification of:</p>
</li>
<li>
<p>Inputs: What existing files or other derivations are needed as dependencies.</p>
</li>
<li>
<p>Build Steps: The commands that need to be executed to produce the desired output.</p>
</li>
<li>
<p>Environment: The specific environment (e.g., build tools, environment variables) required for the build process.</p>
</li>
<li>
<p>Outputs: The resulting files or directories that the derivation produces.</p>
</li>
</ul>
<p>Think of a package definition as the initial instructions, and the derivation as the detailed, low-level plan that Nix uses to actually perform the build.&quot;</p>
<h2 id="syntax-basics">Syntax Basics</h2>
<ul>
<li>Dashes are allowed as identifiers:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> a-b
</span></span><span style="display:flex;"><span>error: undefined variable <span style="color:#960050;background-color:#1e0010">`</span>a-b&#39; at (string):<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> a<span style="color:#f92672"> - </span>b
</span></span><span style="display:flex;"><span>error: undefined variable <span style="color:#960050;background-color:#1e0010">`</span>a&#39; at (string):<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">1</span></span></span></code></pre></div><ul>
<li>
<p><code>a-b</code> is parsed as an identifier, not as subtraction.</p>
</li>
<li>
<p><strong>Strings</strong>: Strings are enclosed in double quotes (<code>&quot;</code>) or two single quotes (<code>''</code>).</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#34;stringDaddy&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;stringDaddy&#34;</span>
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;&#39;stringMoma&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;stringMoma&#34;</span></span></span></code></pre></div><p><strong>String Interpolation</strong>: Is a language feature where a string, path, or attribute name can contain expressions enclosed in <code>${ }</code>. This construct is called <em>interpolated string</em>, and the expression inside is an <em>interpolated expression</em>.<a href="https://nix.dev/manual/nix/2.24/language/string-interpolation">string interpolation</a>.</p>
<p>Rather than writing:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#e6db74">&#34;--with-freetype2-library=&#34;</span> <span style="color:#f92672">+</span> freetype <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/lib&#34;</span></span></span></code></pre></div><p>where <code>freetype</code> is a derivation, you could instead write:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#e6db74">&#34;--with-freetype2-library=</span><span style="color:#e6db74">${</span>freetype<span style="color:#e6db74">}</span><span style="color:#e6db74">/lib&#34;</span></span></span></code></pre></div><p>And the above expression will be translated to the former.</p>
<p><strong>Interpolated Expression</strong>: An expression that is interpolated must evaluate to one of the following:</p>
<ul>
<li>
<p>a string</p>
</li>
<li>
<p>a path</p>
</li>
<li>
<p>an attribute set that has a <code>__toString</code> attribute or an <code>outPath</code> attribute.</p>
<ul>
<li>
<p><code>__toString</code> must be a function that takes an attribute set itself and returns a string.</p>
</li>
<li>
<p><code>outPath</code> must be a string</p>
</li>
<li>
<p>This includes derivations or flake inputs.</p>
</li>
</ul>
</li>
</ul>
<p>A path in an interpolated expression is first copied into the Nix store, and the resulting string is the store path of the newly created store object.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir foo</span></span></code></pre></div><p>reference the empty directory in an interpolated expression:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span><span style="color:#e6db74">./foo</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span></span></span></code></pre></div><p>Output: <code>&quot;/nix/store/2hhl2nz5v0khbn06ys82nrk99aa1xxdw-foo&quot;</code></p>
<ul>
<li><strong>Attribute sets</strong> are all over Nix code, they are name-value pairs wrapped in curly braces, where the names must be unique:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello&#34;</span>;
</span></span><span style="display:flex;"><span>  int <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>Attribute names usually don&rsquo;t need quotes.</p>
</li>
<li>
<p>List elements are separated by white space.</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>programs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  bat<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>The <code>bat.enable</code> is called dot notation. The above command can be written a few ways:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>programs<span style="color:#f92672">.</span>bat<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>; <span style="color:#75715e"># using dot notation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>programs <span style="color:#f92672">=</span> {  <span style="color:#75715e"># using nested attribut sets.</span>
</span></span><span style="display:flex;"><span>  bat <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>You will sometimes see attribute sets with <code>rec</code> prepended. This allows access to attributes within the set:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">rec</span> {
</span></span><span style="display:flex;"><span>  one <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  two <span style="color:#f92672">=</span> one <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  three <span style="color:#f92672">=</span> two <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>Without <code>rec</code>, this command would fail because we are trying to use an attribute that is defined within this attribute set. You would get an undefined variable &lsquo;one&rsquo; error.</li>
</ul>
<p><strong>Inheriting Attributes</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>; <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">inherit</span> x;
</span></span><span style="display:flex;"><span>  y <span style="color:#f92672">=</span> <span style="color:#ae81ff">456</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>is equivalent to</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>; <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  x <span style="color:#f92672">=</span> x;
</span></span><span style="display:flex;"><span>  y <span style="color:#f92672">=</span> <span style="color:#ae81ff">456</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>Both evaluate to:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ x <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>; y <span style="color:#f92672">=</span> <span style="color:#ae81ff">456</span>; }</span></span></code></pre></div><blockquote>
<p>❗: This works because <code>x</code> is added to the lexical scope by the <code>let</code> construct.</p></blockquote>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">inherit</span> x y z;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inherit</span> (src-set) a b c;</span></span></code></pre></div><p>is equivalent to:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> x; y <span style="color:#f92672">=</span> y; z <span style="color:#f92672">=</span> z;
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> src-set<span style="color:#f92672">.</span>a; b <span style="color:#f92672">=</span> src-set<span style="color:#f92672">.</span>b; c <span style="color:#f92672">=</span> src-set<span style="color:#f92672">.</span>c</span></span></code></pre></div><p>In a <code>let</code> expression, <code>inherit</code> can be used to selectively bring specific attributes of a set into scope:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  x <span style="color:#f92672">=</span> { a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>; };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">inherit</span> (builtins) attrNames;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  names <span style="color:#f92672">=</span> attrNames x;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>is equivalent to:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  x <span style="color:#f92672">=</span> { a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>; };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  names <span style="color:#f92672">=</span> builtins<span style="color:#f92672">.</span>attrNames x;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>Both evaluate to:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ names [ <span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#e6db74">&#34;b&#34;</span> ]; }</span></span></code></pre></div><p><strong>Functions</strong>:</p>
<p>The code below calls a function called <code>my_function</code> with the parameters <code>2</code> and
<code>3</code>, and assigns its output to the <code>my_value</code> field:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  my_value <span style="color:#f92672">=</span> my_function <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>Functions are defined using this syntax, where <code>x</code> and <code>y</code> are attributes passed
into the function:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  my_function <span style="color:#f92672">=</span> x: y: x <span style="color:#f92672">+</span> y;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>The body of the function automatically returns the result of the function.
Functions are called by spaces between it and its parameters. No commas are
needed to separate parameters.</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> negate <span style="color:#f92672">=</span> x: <span style="color:#f92672">!</span>x;
</span></span><span style="display:flex;"><span>    concat <span style="color:#f92672">=</span> x: y: x <span style="color:#f92672">+</span> y;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> <span style="color:#66d9ef">if</span> negate <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">then</span> concat <span style="color:#e6db74">&#34;foo&#34;</span> <span style="color:#e6db74">&#34;bar&#34;</span> <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>negate <span style="color:#f92672">=</span> x: <span style="color:#f92672">!</span>x;</span></span></code></pre></div><p>This defines a function named <code>negate</code> that takes one argument <code>x</code> and returns its logical negation (using <code>!</code>)</p>
<ul>
<li>
<p><code>concat = x: y: x + y</code> defines a function that takes two arguments, <code>x</code> and <code>y</code>, and returns their string concatenation. Notice how Nix handles multi-argument functions through currying &ndash; it&rsquo;s a function that returns another function. This was a little confusing to me, I&rsquo;m thinking how does it return a function if <code>concat 1 2</code> returns <code>3</code>&hellip;</p>
<ul>
<li>
<p><code>x: ...</code>: This part says that <code>concat</code> takes one argument, which we&rsquo;ve named <code>x</code>.</p>
</li>
<li>
<p><code>y: x + y</code>: The result of the first part isn&rsquo;t the final value. Instead, it&rsquo;s another function. This inner function takes one argument, which we&rsquo;ve named <code>y</code>, and then it adds <code>x</code> and <code>y</code>.</p>
</li>
<li>
<p>When you do <code>concat 1</code> you&rsquo;re applying the <code>concat</code> function to the argument <code>1</code>. This returns the inner function, where <code>x</code> is now fixed as <code>1</code>. The inner function is essentially waiting for its <code>y</code> argument to be provided.</p>
</li>
<li>
<p>It&rsquo;s when you apply the second argument, <code>2</code>, to this resulting function
<code>(concat 1) 2</code> that the addition <code>1 + 2</code> finally happens, giving us <code>3</code>.</p>
</li>
</ul>
</li>
</ul>
<p>It&rsquo;s like a chain of function applications:</p>
<ul>
<li>
<p><code>concat</code> takes <code>x</code> and returns a new function.</p>
</li>
<li>
<p>This new function takes <code>y</code> and returns the result of <code>x + y</code>.</p>
</li>
</ul>
<h3 id="derivations">Derivations</h3>
<p>Again, a derivation is like a blueprint that describes how to build a specific software package or any other kind of file or directory.</p>
<p>Key Characteristics of Derivations:</p>
<ul>
<li>
<p>Declarative: You describe the desired outcome and the inputs, not the exact sequence of imperative steps. Nix figures out the necessary steps based on the builder and args.</p>
</li>
<li>
<p>Reproducible: Given the same inputs and build instructions, a derivation will always produce the same output. This is a cornerstone of Nix&rsquo;s reproducibility.</p>
</li>
<li>
<p>Tracked by Nix: Nix keeps track of all derivations and their outputs in the Nix store. This allows for efficient management of dependencies and ensures that different packages don&rsquo;t interfere with each other.</p>
</li>
<li>
<p>Content-Addressed: The output of a derivation is stored in the Nix store under a unique path that is derived from the hash of all its inputs and build instructions. This means that if anything changes in the derivation, the output will have a different path.</p>
</li>
</ul>
<p>Hello World Derivation Example:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ pkgs <span style="color:#f92672">?</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">&lt;nixpkgs&gt;</span> {} }:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pkgs<span style="color:#f92672">.</span>stdenv<span style="color:#f92672">.</span>mkDerivation {
</span></span><span style="display:flex;"><span>  name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello-world&#34;</span>;
</span></span><span style="display:flex;"><span>  src <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>; <span style="color:#75715e"># No source code needed</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  buildPhase <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    echo &#34;Hello, World!&#34; &gt; $out
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  installPhase <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    mkdir -p $out/bin
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    cp $out $out/bin/hello
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    chmod +x $out/bin/hello
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  meta <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;A simple Hello World program built with Nix&#34;</span>;
</span></span><span style="display:flex;"><span>    homepage <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>    license <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>licenses<span style="color:#f92672">.</span>unfree; <span style="color:#75715e"># For simplicity</span>
</span></span><span style="display:flex;"><span>    maintainers <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p><code>{ pkgs ? import &lt;nixpkgs&gt; {} }</code>: This is a function that takes an optional argument <code>pkgs</code>. We need Nixpkgs to access standard build environments like <code>stdenv</code>.</p>
</li>
<li>
<p><code>pkgs.stdenv.mkDerivation { ... }:</code> This calls the mkDerivation function from the standard environment (stdenv). mkDerivation is the most common way to define software packages in Nix.</p>
</li>
<li>
<p><code>name = &quot;hello-world&quot;;</code>: Human-readable name of the derivation</p>
</li>
<li>
<p><code>src = null</code>: No external source code for this simple example</p>
</li>
<li>
<p>The rest are the build phases and package metadata.</p>
</li>
</ul>
<p>To use the above derivation, save it as a <code>.nix</code> file (e.g. <code>hello.nix</code>). Then build the derivation using:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix build ./hello.nix</span></span></code></pre></div><ul>
<li>
<p>Nix will execute the <code>buildPhase</code> and <code>installPhase</code></p>
</li>
<li>
<p>After a successful build, the output will be in the Nix store. You can find the exact path by looking at the output of the nix build command (it will be something like /nix/store/your-hash-hello-world).</p>
</li>
</ul>
<p>Run the &ldquo;installed&rdquo; program:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./result/bin/hello</span></span></code></pre></div><ul>
<li>This will execute the <code>hello</code> file from the Nix store and print &ldquo;Hello, World!&rdquo;.</li>
</ul>
<p>Here&rsquo;s a simple Nix derivation that creates a file named hello in the Nix store containing the text &ldquo;Hello, World!&rdquo;:</p>
<h3 id="evaluating-nix-files">Evaluating Nix Files</h3>
<p>Use <code>nix-instantiate --eval</code> to evaluate the expression in a Nix file:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#ae81ff">1</span> + <span style="color:#ae81ff">2</span> &gt; file.nix
</span></span><span style="display:flex;"><span>nix-instantiate --eval file.nix
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span></span></span></code></pre></div><blockquote>
<p><strong>Note:</strong> <code>--eval</code> is required to evaluate the file and do nothing else. If <code>--eval</code> is omitted, <code>nix-instantiate</code> expects the expression in the given file to evaluate to a derivation.</p></blockquote>
<p>If you don&rsquo;t specify an argument, <code>nix-instantiate --eval</code> will try to read from <code>default.nix</code> in the current directory.</p>
<h3 id="resources">Resources</h3>
<ul>
<li>
<p><a href="https://nix.dev/tutorials/nix-language.html">nix.dev nixlang-basics</a></p>
</li>
<li>
<p><a href="https://learnxinyminutes.com/nix/">learn nix in y minutes</a></p>
</li>
<li>
<p><a href="https://github.com/tazjin/nix-1p">nix onepager</a></p>
</li>
<li>
<p><a href="https://github.com/nix-community/awesome-nix">awesome-nix</a></p>
</li>
<li>
<p><a href="https://zero-to-nix.com/concepts/nix-language/">zero-to-nix nix lang</a></p>
</li>
<li>
<p><a href="https://nixos.org/guides/nix-pills/04-basics-of-language.html">nix-pills basics of nixlang</a></p>
</li>
</ul>
]]></content:encoded></item><item><title>Comparing_flakes_to_traditional_nix</title><link>https://saylesss88.github.io/posts/comparing_flakes_to_traditional_nix/</link><pubDate>Wed, 14 May 2025 19:27:18 -0400</pubDate><guid>https://saylesss88.github.io/posts/comparing_flakes_to_traditional_nix/</guid><description>&lt;h1 id="introduction-flakes-and-traditional-nix">Introduction: Flakes and Traditional Nix&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="#introduction-flakes-and-traditional-nix">Introduction: Flakes and Traditional Nix&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#what-is-purity-in-nix">What is Purity in Nix?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#building-a-simple-hello-package-flakes-vs-traditional-nix">Building a Simple &amp;ldquo;hello&amp;rdquo; Package: Flakes vs. Traditional Nix&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-nix-flakes">Using Nix Flakes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-traditional-nix">Using Traditional Nix&lt;/a> - &lt;a href="#updating-nixpkgs">Updating Nixpkgs&lt;/a> - &lt;a href="#updating-traditional-nix-using-niv">Updating Traditional Nix (using &lt;code>niv&lt;/code>)&lt;/a> - &lt;a href="#adding-home-manager-with-flakes">Adding Home-Manager with Flakes&lt;/a> - &lt;a href="#adding-home-manager-with-traditional-nix">Adding Home-Manager with Traditional Nix&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/nixWinter.png"
 alt="nix winter" width="700">
&lt;/figure>

&lt;ul>
&lt;li>This post is based on notes from Nix-Hour #4, comparing Traditional Nix and Flakes, focusing on achieving pure build results. See the &lt;a href="https://www.youtube.com/watch?v=atmoYyBAhF4">YouTube video&lt;/a> for the original content. This guide adapts the information for clarity and ease of understanding.&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-purity-in-nix">What is Purity in Nix?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>A key benefit of Nix Flakes is their &lt;em>default&lt;/em> enforcement of &lt;strong>pure evaluation&lt;/strong>.&lt;/p></description><content:encoded><![CDATA[<h1 id="introduction-flakes-and-traditional-nix">Introduction: Flakes and Traditional Nix</h1>
<p><strong>TOC</strong></p>
<ul>
<li>
<p><a href="#introduction-flakes-and-traditional-nix">Introduction: Flakes and Traditional Nix</a></p>
<ul>
<li><a href="#what-is-purity-in-nix">What is Purity in Nix?</a></li>
<li><a href="#building-a-simple-hello-package-flakes-vs-traditional-nix">Building a Simple &ldquo;hello&rdquo; Package: Flakes vs. Traditional Nix</a></li>
<li><a href="#using-nix-flakes">Using Nix Flakes</a></li>
<li><a href="#using-traditional-nix">Using Traditional Nix</a> - <a href="#updating-nixpkgs">Updating Nixpkgs</a> - <a href="#updating-traditional-nix-using-niv">Updating Traditional Nix (using <code>niv</code>)</a> - <a href="#adding-home-manager-with-flakes">Adding Home-Manager with Flakes</a> - <a href="#adding-home-manager-with-traditional-nix">Adding Home-Manager with Traditional Nix</a></li>
</ul>
</li>
</ul>
<figure><img src="/images/nixWinter.png"
    alt="nix winter" width="700">
</figure>

<ul>
<li>This post is based on notes from Nix-Hour #4, comparing Traditional Nix and Flakes, focusing on achieving pure build results. See the <a href="https://www.youtube.com/watch?v=atmoYyBAhF4">YouTube video</a> for the original content. This guide adapts the information for clarity and ease of understanding.</li>
</ul>
<h2 id="what-is-purity-in-nix">What is Purity in Nix?</h2>
<ul>
<li>
<p>A key benefit of Nix Flakes is their <em>default</em> enforcement of <strong>pure evaluation</strong>.</p>
</li>
<li>
<p>In Nix, an <strong>impure operation</strong> depends on something <em>outside</em> its explicit inputs. Examples include:</p>
<ul>
<li>User&rsquo;s system configuration</li>
<li>Environment variables</li>
<li>Current time</li>
</ul>
</li>
<li>
<p>Impurity leads to unpredictable builds that may differ across systems or time.</p>
</li>
</ul>
<h2 id="building-a-simple-hello-package-flakes-vs-traditional-nix">Building a Simple &ldquo;hello&rdquo; Package: Flakes vs. Traditional Nix</h2>
<ul>
<li>We&rsquo;ll demonstrate building a basic &ldquo;hello&rdquo; package using both Flakes and Traditional Nix to highlight the differences in handling purity.</li>
</ul>
<h2 id="using-nix-flakes">Using Nix Flakes</h2>
<ol>
<li>
<p><strong>Setup:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir hello <span style="color:#f92672">&amp;&amp;</span> cd hello/</span></span></code></pre></div></li>
<li>
<p><strong>Create <code>flake.nix</code> (Initial Impure Example):</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> { self<span style="color:#f92672">,</span> nixpkgs }: {
</span></span><span style="display:flex;"><span>    myHello <span style="color:#f92672">=</span> (<span style="color:#f92672">import</span> nixpkgs {})<span style="color:#f92672">.</span>hello;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>Note: Flakes don&rsquo;t have access to <code>builtins.currentSystem</code> directly.</li>
</ul>
</li>
<li>
<p><strong>Impure Build (Fails):</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix build .#myHello</span></span></code></pre></div><ul>
<li>This fails because Flakes enforce purity by default.</li>
</ul>
</li>
<li>
<p><strong>Force Impure Build:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix build .#myHello --impure</span></span></code></pre></div></li>
<li>
<p><strong>Making the Flake Pure:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:NixOS/nixpkgs&#34;</span>;
</span></span><span style="display:flex;"><span>    flake-utils<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:numtide/flake-utils&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> { self<span style="color:#f92672">,</span> nixpkgs<span style="color:#f92672">,</span> flake-utils }:
</span></span><span style="display:flex;"><span>    flake-utils<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>eachDefaultSystem (system:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>        pkgs <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>legacyPackages<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>        packages<span style="color:#f92672">.</span>myHello <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>hello;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li><code>flake-utils</code> simplifies making flakes system-agnostic and provides the <code>system</code> attribute.</li>
</ul>
</li>
<li>
<p><strong>Pure Build (Success):</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix build .#myHello</span></span></code></pre></div></li>
</ol>
<h2 id="using-traditional-nix">Using Traditional Nix</h2>
<ol>
<li>
<p><strong>Setup:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir hello2 <span style="color:#f92672">&amp;&amp;</span> cd hello2/</span></span></code></pre></div></li>
<li>
<p><strong>Create <code>default.nix</code> (Initial Impure Example):</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span>{ myHello <span style="color:#f92672">=</span> (<span style="color:#f92672">import</span> <span style="color:#e6db74">&lt;nixpkgs&gt;</span> { })<span style="color:#f92672">.</span>hello; }</span></span></code></pre></div></li>
<li>
<p><strong>Build (Impure):</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-build -A myHello</span></span></code></pre></div></li>
<li>
<p><strong>Impurity Explained:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix repl
</span></span><span style="display:flex;"><span>nix-repl&gt; &lt;nixpkgs&gt;
</span></span><span style="display:flex;"><span>/nix/var/nix/profiles/per-user/root/channels/nixos</span></span></code></pre></div><ul>
<li><code>&lt;nixpkgs&gt;</code> depends on the user&rsquo;s environment (Nixpkgs channel), making it impure. Even with channels disabled, it relies on a specific Nixpkgs version in the store.</li>
</ul>
</li>
<li>
<p><strong>Achieving Purity: Using <code>fetchTarball</code></strong></p>
<ul>
<li>
<p>GitHub allows downloading repository snapshots at specific commits, crucial for reproducibility.</p>
</li>
<li>
<p><strong>Get Nixpkgs Revision from <code>flake.lock</code> (from the Flake example):</strong></p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.lock</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;nixpkgs&#34;</span>: {
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;locked&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;lastModified&#34;</span>: <span style="color:#ae81ff">1746372124</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;narHash&#34;</span>: <span style="color:#e6db74">&#34;sha256-n7W8Y6bL7mgHYW1vkXKi9zi/sV4UZqcBovICQu0rdNU=&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;owner&#34;</span>: <span style="color:#e6db74">&#34;NixOS&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;repo&#34;</span>: <span style="color:#e6db74">&#34;nixpkgs&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;rev&#34;</span>: <span style="color:#e6db74">&#34;f5cbfa4dbbe026c155cf5a9204f3e9121d3a5fe0&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;github&#34;</span>
</span></span><span style="display:flex;"><span>  }<span style="color:#f92672">,</span></span></span></code></pre></div></li>
<li>
<p><strong>Modify <code>default.nix</code> for Purity:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  nixpkgs <span style="color:#f92672">=</span> fetchTarball {
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;[https://github.com/NixOS/nixpkgs/archive/f5cbfa4dbbe026c155cf5a9204f3e9121d3a5fe0.tar.gz](https://github.com/NixOS/nixpkgs/archive/f5cbfa4dbbe026c155cf5a9204f3e9121d3a5fe0.tar.gz)&#34;</span>;
</span></span><span style="display:flex;"><span>    sha256 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0000000000000000000000000000000000000000000000000000&#34;</span>; <span style="color:#75715e"># Placeholder</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>  myHello <span style="color:#f92672">=</span> (<span style="color:#f92672">import</span> nixpkgs {})<span style="color:#f92672">.</span>hello;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>Replace <code>&lt;nixpkgs&gt;</code> with <code>fetchTarball</code> and a specific revision. A placeholder <code>sha256</code> is used initially.</li>
</ul>
</li>
<li>
<p><strong>Build (Nix provides the correct <code>sha256</code>):</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-build -A myHello</span></span></code></pre></div></li>
<li>
<p><strong>Verification:</strong> Both Flake and Traditional Nix builds now produce the same output path.</p>
</li>
<li>
<p><strong>Remaining Impurities in Traditional Nix:</strong></p>
<ul>
<li>Default arguments to <code>import &lt;nixpkgs&gt; {}</code> can introduce impurity:
<ul>
<li><code>overlays</code>: <code>~/.config/nixpkgs/overlays</code> (user-specific)</li>
<li><code>config</code>: <code>~/.config/nixpkgs/config.nix</code> (user-specific)</li>
<li><code>system</code>: <code>builtins.currentSystem</code> (machine-specific)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Making Traditional Nix Fully Pure:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span>{system <span style="color:#f92672">?</span> builtins<span style="color:#f92672">.</span>currentSystem}:
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  nixpkgs <span style="color:#f92672">=</span> fetchTarball {
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;[https://github.com/NixOS/nixpkgs/archive/0243fb86a6f43e506b24b4c0533bd0b0de211c19.tar.gz](https://github.com/NixOS/nixpkgs/archive/0243fb86a6f43e506b24b4c0533bd0b0de211c19.tar.gz)&#34;</span>;
</span></span><span style="display:flex;"><span>    sha256 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1qvdbvdza7hsqhra0yg7xs252pr1q70nyrsdj6570qv66vq0fjnh&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>  myHello <span style="color:#f92672">=</span> (<span style="color:#f92672">import</span> nixpkgs {
</span></span><span style="display:flex;"><span>    overlays <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>    config <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>  })<span style="color:#f92672">.</span>hello;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>Override impure defaults for <code>overlays</code>, <code>config</code>, and make <code>system</code> an argument.</li>
</ul>
</li>
<li>
<p><strong>Building with a Specific System:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-build -A myHello --argstr system x86_64-linux</span></span></code></pre></div></li>
<li>
<p><strong>Pure Evaluation Mode in Traditional Nix:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-instantiate --eval --pure-eval --expr <span style="color:#e6db74">&#39;fetchGit { url = ./.; rev = &#34;b4fe677e255c6f89c9a6fdd3ddd9319b0982b1ad&#34;; }&#39;</span></span></span></code></pre></div><ul>
<li>Example of using <code>--pure-eval</code>.</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-build --pure-eval --expr <span style="color:#e6db74">&#39;(import (fetchGit { url = ./.; rev = &#34;b4fe677e255c6f89c9a6fdd3ddd9319b0982b1ad&#34;; }) { system = &#34;x86_64-linux&#34;; }).myHello&#39;</span></span></span></code></pre></div><ul>
<li>Building with a specific revision and system.</li>
</ul>
</li>
</ol>
<h3 id="updating-nixpkgs">Updating Nixpkgs</h3>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix flake update</span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix build <span style="color:#f92672">.</span><span style="color:#75715e">#myHello --override-input nixpkgs github:NixOS/nixpkgs/nixos-24.11</span></span></span></code></pre></div><h3 id="updating-traditional-nix-using-niv">Updating Traditional Nix (using <code>niv</code>)</h3>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix-shell <span style="color:#960050;background-color:#1e0010">-</span>p niv
</span></span><span style="display:flex;"><span>niv init</span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span>{ system <span style="color:#f92672">?</span> builtins<span style="color:#f92672">.</span>currentSystem<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  sources <span style="color:#f92672">?</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">nix/sources.nix</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  nixpkgs <span style="color:#f92672">?</span> sources<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  pkgs <span style="color:#f92672">?</span> <span style="color:#f92672">import</span> nixpkgs {
</span></span><span style="display:flex;"><span>    overlays <span style="color:#f92672">=</span> [ ];
</span></span><span style="display:flex;"><span>    config <span style="color:#f92672">=</span> { };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>  }<span style="color:#f92672">,</span> }: {
</span></span><span style="display:flex;"><span>  myHello <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>hello;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>And build it with:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-build -A myHello</span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>niv update nixpkgs --branch<span style="color:#f92672">=</span>nixos-unstable
</span></span><span style="display:flex;"><span>nix-build -A myHello</span></span></code></pre></div><h4 id="adding-home-manager-with-flakes">Adding Home-Manager with Flakes</h4>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:NixOS/nixpkgs&#34;</span>;
</span></span><span style="display:flex;"><span>    flake-utils<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:numtide/flake-utils&#34;</span>;
</span></span><span style="display:flex;"><span>    home-manager<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:nix-community/home-manager&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> { self<span style="color:#f92672">,</span> nixpkgs<span style="color:#f92672">,</span> flake-utils<span style="color:#f92672">,</span> home-manager<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }:
</span></span><span style="display:flex;"><span>    flake-utils<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>eachDefaultSystem (system:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">let</span> pkgs <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>legacyPackages<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>        packages<span style="color:#f92672">.</span>myHello <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>hello;
</span></span><span style="display:flex;"><span>        packages<span style="color:#f92672">.</span>x86_64-linux<span style="color:#f92672">.</span>homeManagerDocs <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>          home-manager<span style="color:#f92672">.</span>packages<span style="color:#f92672">.</span>x86_64-linux<span style="color:#f92672">.</span>docs-html;
</span></span><span style="display:flex;"><span>      });
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix flake update
</span></span><span style="display:flex;"><span>nix flake show github:nix-community/home-manager</span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>home-manager<span style="color:#f92672">.</span>inputs<span style="color:#f92672">.</span>follows <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nixpkgs&#34;</span>;</span></span></code></pre></div><h4 id="adding-home-manager-with-traditional-nix">Adding Home-Manager with Traditional Nix</h4>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>niv add <span style="color:#e6db74">nix-community/home-manager</span></span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix repl
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./nix/sources.nix</span>
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> s<span style="color:#f92672">.</span>home-manager</span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ system <span style="color:#f92672">?</span> builtins<span style="color:#f92672">.</span>currentSystem<span style="color:#f92672">,</span> sources <span style="color:#f92672">?</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">nix/sources.nix</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">,</span> nixpkgs <span style="color:#f92672">?</span> sources<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">,</span> pkgs <span style="color:#f92672">?</span> <span style="color:#f92672">import</span> nixpkgs {
</span></span><span style="display:flex;"><span>    overlays <span style="color:#f92672">=</span> [ ];
</span></span><span style="display:flex;"><span>    config <span style="color:#f92672">=</span> { };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>  }<span style="color:#f92672">,</span> }: {
</span></span><span style="display:flex;"><span>  homeManagerDocs <span style="color:#f92672">=</span> (<span style="color:#f92672">import</span> sources<span style="color:#f92672">.</span>home-manager { pkgs <span style="color:#f92672">=</span> pkgs; })<span style="color:#f92672">.</span>docs;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  myHello <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>hello;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-build -A homeManagerDocs</span></span></code></pre></div>]]></content:encoded></item><item><title>Declarative_depinject</title><link>https://saylesss88.github.io/posts/declarative_depinject/</link><pubDate>Wed, 14 May 2025 19:26:36 -0400</pubDate><guid>https://saylesss88.github.io/posts/declarative_depinject/</guid><description>&lt;h1 id="declarative-dependency-injection-in-nix-flakes">Declarative Dependency Injection in Nix Flakes&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#declarative-dependency-injection-in-nix-flakes">Declarative Dependency Injection in Nix Flakes&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-problem-with-specialargs">The Problem with specialArgs&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#a-declarative-solution-injecting-via-a-custom-option">A Declarative Solution: Injecting via a Custom Option&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#benefits-of-this-approach">Benefits of this Approach&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-usage">Example Usage&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#applying-dep-inject-to-home-manager-modules">Applying dep-inject to Home Manager Modules&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv6.png"
 alt="cyber" width="700">
&lt;/figure>

&lt;p>This post explores a method for injecting dependencies into NixOS modules from
a flake in a more declarative way, offering an alternative to &lt;code>specialArgs&lt;/code>.&lt;/p>
&lt;h2 id="the-problem-with-specialargs">The Problem with specialArgs&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>As mentioned in &lt;a href="https://saylesss88.github.io/posts/nix_flakes_tips/">post&lt;/a>,
&lt;code>specialArgs&lt;/code> and &lt;code>extraSpecialArgs&lt;/code> can be used to pass dependencies and
variables from flakes to modules.&lt;/p></description><content:encoded><![CDATA[<h1 id="declarative-dependency-injection-in-nix-flakes">Declarative Dependency Injection in Nix Flakes</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#declarative-dependency-injection-in-nix-flakes">Declarative Dependency Injection in Nix Flakes</a>
<ul>
<li><a href="#the-problem-with-specialargs">The Problem with specialArgs</a>
<ul>
<li><a href="#a-declarative-solution-injecting-via-a-custom-option">A Declarative Solution: Injecting via a Custom Option</a>
<ul>
<li><a href="#benefits-of-this-approach">Benefits of this Approach</a></li>
<li><a href="#example-usage">Example Usage</a></li>
</ul>
</li>
<li><a href="#applying-dep-inject-to-home-manager-modules">Applying dep-inject to Home Manager Modules</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv6.png"
    alt="cyber" width="700">
</figure>

<p>This post explores a method for injecting dependencies into NixOS modules from
a flake in a more declarative way, offering an alternative to <code>specialArgs</code>.</p>
<h2 id="the-problem-with-specialargs">The Problem with specialArgs</h2>
<ul>
<li>
<p>As mentioned in <a href="https://saylesss88.github.io/posts/nix_flakes_tips/">post</a>,
<code>specialArgs</code> and <code>extraSpecialArgs</code> can be used to pass dependencies and
variables from flakes to modules.</p>
</li>
<li>
<p>However, <code>specialArgs</code> injects values directly into every module&rsquo;s argument
list.</p>
</li>
<li>
<p>This approach deviates from NixOS&rsquo;s typical declarative data flow model.
Instead of explicit dependency passing, modules receive extra, unstructured
variables that aren&rsquo;t part of the standard module options.</p>
</li>
</ul>
<h3 id="a-declarative-solution-injecting-via-a-custom-option">A Declarative Solution: Injecting via a Custom Option</h3>
<p>This post introduces a more declarative and centralized technique to share
dependencies across modules by defining a custom option within your <code>flake.nix</code>
. This method makes dependencies accessible to all importing modules without
relying on explicit <code>specialArgs</code> in your flake&rsquo;s <code>outputs</code>.</p>
<h4 id="defining-the-dep-inject-module-in-flakenix">Defining the dep-inject Module in flake.nix</h4>
<p>Within the <code>outputs</code> function&rsquo;s <code>let</code> block in your <code>flake.nix</code>, define the
following module:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Module to inject dependencies</span>
</span></span><span style="display:flex;"><span>  depInject <span style="color:#f92672">=</span> { pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>    options<span style="color:#f92672">.</span>dep-inject <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkOption {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># dep-inject is an attribute set of unspecified values</span>
</span></span><span style="display:flex;"><span>      type <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> lib<span style="color:#f92672">.</span>types; attrsOf unspecified;
</span></span><span style="display:flex;"><span>      default <span style="color:#f92672">=</span> { };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>dep-inject <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># &#39;inputs&#39; comes from the outer environment of flake.nix</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># usually contains flake inputs, user-defined vars, system metadata</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;flake-inputs&#34;</span> <span style="color:#f92672">=</span> inputs;
</span></span><span style="display:flex;"><span>      userVars <span style="color:#f92672">=</span> userVars;
</span></span><span style="display:flex;"><span>      system <span style="color:#f92672">=</span> system;
</span></span><span style="display:flex;"><span>      host <span style="color:#f92672">=</span> host;
</span></span><span style="display:flex;"><span>      username <span style="color:#f92672">=</span> username;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>  nixosModules<span style="color:#f92672">.</span>default <span style="color:#f92672">=</span> { pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>    imports <span style="color:#f92672">=</span> [ depInject ];
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>This code defines a reusable NixOS module (<code>nixosModules.default</code>).</p>
</li>
<li>
<p>This module creates a <code>dep-inject</code> option, which is an attribute set
containing your flake&rsquo;s inputs and other relevant variables.</p>
</li>
<li>
<p>By importing depInject, configurations automatically gain access to these
dependencies.</p>
</li>
</ul>
<h4 id="benefits-of-this-approach">Benefits of this Approach</h4>
<ul>
<li>
<p><strong>Declarative Dependency Flow</strong>: Encourages a more declarative style by
accessing dependencies through a well-defined option (<code>config.dep-inject</code>)
rather than implicit arguments.</p>
</li>
<li>
<p><strong>Centralized Dependency Management</strong>: Defines dependencies in one place
(<code>flake.nix</code>), making it easier to manage and update them.</p>
</li>
<li>
<p><strong>Automatic Availability</strong>: Modules importing the configuration automatically
have access to the injected dependencies.</p>
</li>
<li>
<p><strong>Reduced Boilerplate</strong>: Avoids the need to explicitly include dependency
arguments (<code>{ inputs, userVars, ... }</code>) in every module.</p>
</li>
</ul>
<h4 id="example-usage">Example Usage</h4>
<p>Here&rsquo;s a practical example of how this <code>dep-inject</code> module is defined and used
within a <code>flake.nix</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:NixOS/nixpkgs/nixos-unstable&#34;</span>;
</span></span><span style="display:flex;"><span>    home-manager<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:nix-community/home-manager/master&#34;</span>;
</span></span><span style="display:flex;"><span>    home-manager<span style="color:#f92672">.</span>inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>follows <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nixpkgs&#34;</span>;
</span></span><span style="display:flex;"><span>    stylix<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:danth/stylix&#34;</span>;
</span></span><span style="display:flex;"><span>    treefmt-nix<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:numtide/treefmt-nix&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> { self<span style="color:#f92672">,</span> nixpkgs<span style="color:#f92672">,</span> home-manager<span style="color:#f92672">,</span> stylix<span style="color:#f92672">,</span> treefmt-nix<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> } <span style="color:#f92672">@</span> inputs: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>    system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>    host <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;magic&#34;</span>;
</span></span><span style="display:flex;"><span>    username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jr&#34;</span>;
</span></span><span style="display:flex;"><span>    userVars <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      timezone <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;America/New_York&#34;</span>;
</span></span><span style="display:flex;"><span>      gitUsername <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TSawyer87&#34;</span>;
</span></span><span style="display:flex;"><span>      locale <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>;
</span></span><span style="display:flex;"><span>      dotfilesDir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;~/.dotfiles&#34;</span>;
</span></span><span style="display:flex;"><span>      wm <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hyprland&#34;</span>;
</span></span><span style="display:flex;"><span>      browser <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;firefox&#34;</span>;
</span></span><span style="display:flex;"><span>      term <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ghostty&#34;</span>;
</span></span><span style="display:flex;"><span>      editor <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hx&#34;</span>;
</span></span><span style="display:flex;"><span>      keyboardLayout <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;us&#34;</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> nixpkgs {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>      config<span style="color:#f92672">.</span>allowUnfree <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    treefmtEval <span style="color:#f92672">=</span> treefmt-nix<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>evalModule pkgs <span style="color:#e6db74">./treefmt.nix</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Define dep-inject module</span>
</span></span><span style="display:flex;"><span>    depInject <span style="color:#f92672">=</span> { pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>      options<span style="color:#f92672">.</span>dep-inject <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkOption {
</span></span><span style="display:flex;"><span>        type <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> lib<span style="color:#f92672">.</span>types; attrsOf unspecified;
</span></span><span style="display:flex;"><span>        default <span style="color:#f92672">=</span> { };
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>      config<span style="color:#f92672">.</span>dep-inject <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        flake-inputs <span style="color:#f92672">=</span> inputs;
</span></span><span style="display:flex;"><span>        userVars <span style="color:#f92672">=</span> userVars; <span style="color:#75715e"># Add userVars for convenience</span>
</span></span><span style="display:flex;"><span>        system <span style="color:#f92672">=</span> system;
</span></span><span style="display:flex;"><span>        username <span style="color:#f92672">=</span> username;
</span></span><span style="display:flex;"><span>        host <span style="color:#f92672">=</span> host;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Export dep-inject module</span>
</span></span><span style="display:flex;"><span>    nixosModules<span style="color:#f92672">.</span>default <span style="color:#f92672">=</span> { pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>          imports <span style="color:#f92672">=</span> [ depInject ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># here we don&#39;t need imports = [ depInject { inherit inputs;}]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># because the vars are captured from the surrounding let block</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># NixOS configuration</span>
</span></span><span style="display:flex;"><span>    nixosConfigurations <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>        modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># enable dep-inject</span>
</span></span><span style="display:flex;"><span>          self<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>default
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">./hosts</span><span style="color:#960050;background-color:#1e0010">/$</span>{host}<span style="color:#e6db74">/configuration.nix</span>
</span></span><span style="display:flex;"><span>          home-manager<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>home-manager
</span></span><span style="display:flex;"><span>          stylix<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>stylix
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            home-manager<span style="color:#f92672">.</span>useGlobalPkgs <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>            home-manager<span style="color:#f92672">.</span>useUserPackages <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>            home-manager<span style="color:#f92672">.</span>users<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>username<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./hosts</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74">/home.nix</span>;
</span></span><span style="display:flex;"><span>            home-manager<span style="color:#f92672">.</span>backupFileExtension <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;backup&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Still need extraSpecialArgs for Home Manager (see below)</span>
</span></span><span style="display:flex;"><span>            home-manager<span style="color:#f92672">.</span>extraSpecialArgs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">inherit</span> username system host userVars;
</span></span><span style="display:flex;"><span>            };
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        ];
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Other outputs</span>
</span></span><span style="display:flex;"><span>    checks<span style="color:#f92672">.</span>x86_64-linux<span style="color:#f92672">.</span>style <span style="color:#f92672">=</span> treefmtEval<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>check self;
</span></span><span style="display:flex;"><span>    formatter<span style="color:#f92672">.</span>x86_64-linux <span style="color:#f92672">=</span> treefmtEval<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>wrapper;
</span></span><span style="display:flex;"><span>    devShells<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span><span style="color:#f92672">.</span>default <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./lib/dev-shell.nix</span> { <span style="color:#66d9ef">inherit</span> inputs; };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><strong>Using <code>dep-inject</code> in Modules</strong></p>
<p>Once the <code>dep-inject</code> module is imported, you can access the injected
dependencies within any module via <code>config.dep-inject</code>.</p>
<p><strong>Example: System Configuration Module (<code>configuration.nix</code>)</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># configuration.nix</span>
</span></span><span style="display:flex;"><span>{ config<span style="color:#f92672">,</span> pkgs<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>  environment<span style="color:#f92672">.</span>systemPackages <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> config<span style="color:#f92672">.</span>dep-inject<span style="color:#f92672">.</span>flake-inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>legacyPackages<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>pkgs<span style="color:#f92672">.</span>system<span style="color:#e6db74">}</span>; [
</span></span><span style="display:flex;"><span>    firefox
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>dep-inject<span style="color:#f92672">.</span>userVars<span style="color:#f92672">.</span>editor <span style="color:#75715e"># e.g., helix</span>
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>  time<span style="color:#f92672">.</span>timeZone <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>dep-inject<span style="color:#f92672">.</span>userVars<span style="color:#f92672">.</span>timezone;
</span></span><span style="display:flex;"><span>  system<span style="color:#f92672">.</span>stateVersion <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;24.05&#34;</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p><code>config.dep-inject.flake-inputs.nixpkgs</code>: Accesses the <code>nixpkgs</code> input.</p>
</li>
<li>
<p><code>config.dep-inject.userVars</code>: Accesses your <code>userVars</code>.</p>
</li>
<li>
<p>You no longer need to explicitly declare <code>{ inputs, userVars, ... }</code> in the
module&rsquo;s arguments.</p>
</li>
</ul>
<h3 id="applying-dep-inject-to-home-manager-modules">Applying dep-inject to Home Manager Modules</h3>
<p>By default, the <code>dep-inject</code> module is available to NixOS modules but not
automatically to Home Manager modules. There are two main ways to make it
accessible:</p>
<ol>
<li>Using <code>extraSpecialArgs</code> (Less Ideal)</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>home-manager<span style="color:#f92672">.</span>extraSpecialArgs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">inherit</span> username system host userVars;
</span></span><span style="display:flex;"><span>  depInject <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>dep-inject; <span style="color:#75715e"># Pass dep-inject</span>
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><p>Then, in your Home Manager configuration (<code>./hosts/${host}/home.nix</code>):</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># home.nix</span>
</span></span><span style="display:flex;"><span>{ depInject<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>  programs<span style="color:#f92672">.</span>git <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    userName <span style="color:#f92672">=</span> depInject<span style="color:#f92672">.</span>userVars<span style="color:#f92672">.</span>gitUsername;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  home<span style="color:#f92672">.</span>packages <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> depInject<span style="color:#f92672">.</span>flake-inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>legacyPackages<span style="color:#f92672">.</span>x86_64-linux; [ firefox ];
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ol start="2">
<li>Importing <code>depInject</code> into Home Manager Configuration (More Idiomatic)</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>nixosConfigurations <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>    modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>default <span style="color:#75715e"># dep-inject for NixOS</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">./hosts</span><span style="color:#960050;background-color:#1e0010">/$</span>{host}<span style="color:#e6db74">/configuration.nix</span>
</span></span><span style="display:flex;"><span>      home-manager<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>home-manager
</span></span><span style="display:flex;"><span>      stylix<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>stylix
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        home-manager<span style="color:#f92672">.</span>useGlobalPkgs <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        home-manager<span style="color:#f92672">.</span>useUserPackages <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        home-manager<span style="color:#f92672">.</span>backupFileExtension <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;backup&#34;</span>;
</span></span><span style="display:flex;"><span>        home-manager<span style="color:#f92672">.</span>users<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>username<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>          imports <span style="color:#f92672">=</span> [ self<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>default ]; <span style="color:#75715e"># dep-inject for Home Manager</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># Your Home Manager config</span>
</span></span><span style="display:flex;"><span>          programs<span style="color:#f92672">.</span>git <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>            userName <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>dep-inject<span style="color:#f92672">.</span>userVars<span style="color:#f92672">.</span>gitUsername;
</span></span><span style="display:flex;"><span>          };
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># note: depending on your setup you may need to tweak this</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># `legacyPackages.${pkgs.system}` might be needed</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># due to how home-manager handles `pkgs`</span>
</span></span><span style="display:flex;"><span>          home<span style="color:#f92672">.</span>packages <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> config<span style="color:#f92672">.</span>dep-inject<span style="color:#f92672">.</span>flake-inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>legacyPackages<span style="color:#f92672">.</span>x86_64-linux; [ firefox ];
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    ];
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><ul>
<li>
<p>By adding <code>imports = [ self.nixosModules.default ];</code> within the Home Manager
user configuration, the <code>dep-inject</code> option becomes available under <code>config</code>.</p>
</li>
<li>
<p>This approach is generally considered more idiomatic and avoids the issues
associated with <code>specialArgs</code>, as highlighted in resources like
&ldquo;flakes-arent-real&rdquo;</p>
</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>While <code>specialArgs</code> offers a seemingly straightforward way to inject
dependencies, this declarative approach using a custom <code>dep-inject</code> option
promotes a cleaner, more structured, and potentially more robust method for
managing dependencies across your NixOS modules. It aligns better with NixOS&rsquo;s
declarative principles and can enhance the maintainability and
understandability of your configuration.</p>
<p><strong>Disclaimer</strong></p>
<ul>
<li>I don&rsquo;t currently personally use this technique in my configuration, it adds
complexity that <code>specialArgs</code> aimed to solve. However, presenting this
alternative enhances understanding of different dependency injection methods
in Nix Flakes. This example is inspired by and builds upon concepts discussed in
<a href="https://jade.fyi/blog/flakes-arent-real/">flakes-arent-real</a></li>
</ul>
]]></content:encoded></item><item><title>Derivations_explained</title><link>https://saylesss88.github.io/posts/derivations_explained/</link><pubDate>Wed, 14 May 2025 19:25:48 -0400</pubDate><guid>https://saylesss88.github.io/posts/derivations_explained/</guid><description>&lt;h1 id="introduction-to-nix-derivations">Introduction to Nix Derivations&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#introduction-to-nix-derivations">Introduction to Nix Derivations&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#creating-derivations-in-nix">Creating Derivations in Nix&lt;/a>&lt;/li>
&lt;li>&lt;a href="#our-first-simple-derivation-understanding-the-builder">Our First Simple Derivation: Understanding the Builder&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#why-a-builder-script">Why a Builder Script?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-challenge-with-shebangs-in-nix">The Challenge with Shebangs in Nix&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-importance-of-statelessness-in-nix">The Importance of Statelessness in Nix&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#our-builder-script">Our builder Script&lt;/a>&lt;/li>
&lt;li>&lt;a href="#our-second-derivation">Our Second Derivation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#links-to-articles-about-derivations">Links To Articles about Derivations&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv10.png"
 alt="gruv10" width="700">
&lt;/figure>

&lt;ul>
&lt;li>
&lt;p>A derivation in Nix is a fundamental concept that describes how to build a piece of software or a resource (e.g., a package, library, or configuration file). Think of it as a recipe for creating something within the Nix ecosystem.&lt;/p></description><content:encoded><![CDATA[<h1 id="introduction-to-nix-derivations">Introduction to Nix Derivations</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#introduction-to-nix-derivations">Introduction to Nix Derivations</a>
<ul>
<li><a href="#creating-derivations-in-nix">Creating Derivations in Nix</a></li>
<li><a href="#our-first-simple-derivation-understanding-the-builder">Our First Simple Derivation: Understanding the Builder</a>
<ul>
<li><a href="#why-a-builder-script">Why a Builder Script?</a></li>
<li><a href="#the-challenge-with-shebangs-in-nix">The Challenge with Shebangs in Nix</a></li>
<li><a href="#the-importance-of-statelessness-in-nix">The Importance of Statelessness in Nix</a>
<ul>
<li><a href="#our-builder-script">Our builder Script</a></li>
<li><a href="#our-second-derivation">Our Second Derivation</a></li>
<li><a href="#links-to-articles-about-derivations">Links To Articles about Derivations</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv10.png"
    alt="gruv10" width="700">
</figure>

<ul>
<li>
<p>A derivation in Nix is a fundamental concept that describes how to build a piece of software or a resource (e.g., a package, library, or configuration file). Think of it as a recipe for creating something within the Nix ecosystem.</p>
</li>
<li>
<p>For beginners, the analogy of a cooking recipe is helpful:</p>
<ul>
<li><strong>Ingredients (Dependencies):</strong> What other software or libraries are needed.</li>
<li><strong>Steps (Build Instructions):</strong> The commands to compile, configure, and install.</li>
<li><strong>Final Dish (Output):</strong> The resulting package or resource.</li>
</ul>
</li>
<li>
<p>A Nix derivation encapsulates all this information, telling Nix what inputs
to use, how to build it, and what the final output should be.</p>
</li>
</ul>
<h2 id="creating-derivations-in-nix">Creating Derivations in Nix</h2>
<ul>
<li>
<p>The primary way to define packages in Nix is through the <code>mkDerivation</code> function, which is part of the standard environment (<code>stdenv</code>). While a
lower-level <code>derivation</code> function exists for advanced use cases,
<code>mkDerivation</code> simplifies the process by automatically managing dependencies
and the build environment.</p>
</li>
<li>
<p><code>mkDerivation</code> (and <code>derivation</code>) takes a set of attributes as its argument.
At a minimum, you&rsquo;ll often encounter these essential attributes:</p>
<ol>
<li><strong>name:</strong> A human-readable identifier for the derivation
(e.g., &ldquo;foo&rdquo;, &ldquo;hello.txt&rdquo;). This helps you and Nix refer to the package.</li>
<li><strong>system:</strong> Specifies the target architecture for the build
(e.g., <code>builtins.currentSystem</code> for your current machine).</li>
<li><strong>builder:</strong> Defines the program that will execute the build instructions
(e.g., <code>bash</code>).</li>
</ol>
</li>
</ul>
<h2 id="our-first-simple-derivation-understanding-the-builder">Our First Simple Derivation: Understanding the Builder</h2>
<ul>
<li>To understand how derivations work, let&rsquo;s create a very basic example using a
bash script as our <code>builder</code>.</li>
</ul>
<h3 id="why-a-builder-script">Why a Builder Script?</h3>
<ul>
<li>The <code>builder</code> attribute in a derivation tells Nix <em>how</em> to perform the build
steps. A simple and common way to define these steps is with a bash script.</li>
</ul>
<h3 id="the-challenge-with-shebangs-in-nix">The Challenge with Shebangs in Nix</h3>
<ul>
<li>
<p>In typical Unix-like systems, you might start a bash script with a shebang
(<code>#!/bin/bash</code> or <code>#!/usr/bin/env bash</code>) to tell the system how to execute it.
However, in Nix derivations, we generally avoid this.</p>
</li>
<li>
<p><strong>Reason:</strong> Nix builds happen in an isolated environment where the exact path
to common tools like <code>bash</code> isn&rsquo;t known beforehand (it resides within the Nix
store). Hardcoding a path or relying on the system&rsquo;s <code>PATH</code> would break Nix&rsquo;s
stateless property.</p>
</li>
</ul>
<h3 id="the-importance-of-statelessness-in-nix">The Importance of Statelessness in Nix</h3>
<ul>
<li>
<p><strong>Stateful Systems (Traditional):</strong> When you install software traditionally,
it often modifies the core system environment directly. This can lead to
dependency conflicts and makes rollbacks difficult.</p>
</li>
<li>
<p><strong>Stateless Systems (Nix):</strong> Nix takes a different approach. When installing
a package, it creates a unique, immutable directory in the Nix store. This
means:</p>
<ul>
<li><strong>No Conflicts:</strong> Different versions of the same package can coexist
without interfering with each other.</li>
<li><strong>Reliable Rollback:</strong> You can easily switch back to previous versions
without affecting system-wide files.</li>
<li><strong>Reproducibility:</strong> Builds are more likely to produce the same result
across different machines if they are &ldquo;pure&rdquo; (don&rsquo;t rely on external
system state).</li>
</ul>
</li>
</ul>
<h4 id="our-builder-script">Our builder Script</h4>
<ul>
<li>For our first derivation, we&rsquo;ll create a simple <code>builder.sh</code> file in the current directory:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># builder.sh</span>
</span></span><span style="display:flex;"><span>declare -xp
</span></span><span style="display:flex;"><span>echo foo &gt; $out</span></span></code></pre></div><ul>
<li>
<p>The command <code>declare -xp</code> lists exported variables (it&rsquo;s a bash builtin
function).</p>
</li>
<li>
<p>Nix needs to know where the final built product (the &ldquo;cake&rdquo; in our earlier
analogy) should be placed. So, during the derivation process, Nix calculates
a unique output path within the Nix store. This path is then made available
to our builder script as an environment variable named <code>$out</code>. The <code>.drv</code>
file, which is the recipe, contains instructions for the builder, including
setting up this <code>$out</code> variable. Our builder script will then put the result
of its work (in this case, the &ldquo;foo&rdquo; file) into this specific <code>$out</code> directory.</p>
</li>
<li>
<p>As mentioned earlier we need to find the nix store path to the bash
executable, common way to do this is to load Nixpkgs into the repl
and check:</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-repl&gt; :l &lt;nixpkgs&gt;
</span></span><span style="display:flex;"><span>Added <span style="color:#ae81ff">3950</span> variables.
</span></span><span style="display:flex;"><span>nix-repl&gt; <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>bash<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;/nix/store/ihmkc7z2wqk3bbipfnlh0yjrlfkkgnv6-bash-4.2-p45&#34;</span></span></span></code></pre></div><p>So, with this little trick we are able to refer to <code>bin/bash</code> and create
our derivation:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-repl&gt; d <span style="color:#f92672">=</span> derivation <span style="color:#f92672">{</span> name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foo&#34;</span>; builder <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>bash<span style="color:#e6db74">}</span><span style="color:#e6db74">/bin/bash&#34;</span>;
</span></span><span style="display:flex;"><span> args <span style="color:#f92672">=</span> <span style="color:#f92672">[</span> ./builder.sh <span style="color:#f92672">]</span>; system <span style="color:#f92672">=</span> builtins.currentSystem; <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>nix-repl&gt; :b d
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#ae81ff">1</span> built, 0.0 MiB DL<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>this derivation produced the following outputs:
</span></span><span style="display:flex;"><span>  out -&gt; /nix/store/gczb4qrag22harvv693wwnflqy7lx5pb-foo</span></span></code></pre></div><ul>
<li>
<p>Boom! The contents of <code>/nix/store/w024zci0x1hh1wj6gjq0jagkc1sgrf5r-foo</code>
is really foo! We&rsquo;ve built our first derivation.</p>
</li>
<li>
<p>Derivations are the primitive that Nix uses to define packages. “Package”
is a loosely defined term, but a derivation is simply the result of calling
<code>builtins.derivation</code>.</p>
</li>
</ul>
<h4 id="our-second-derivation">Our Second Derivation</h4>
<p>The following is a simple <code>hello-drv</code> derivation:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> hello-drv <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>stdenv<span style="color:#f92672">.</span>mkDerivation {
</span></span><span style="display:flex;"><span>            name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello.txt&#34;</span>;
</span></span><span style="display:flex;"><span>            unpackPhase <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;true&#34;</span>;
</span></span><span style="display:flex;"><span>            installPhase <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              echo -n &#34;Hello World!&#34; &gt; $out
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> hello-drv
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">«</span>derivation <span style="color:#e6db74">/nix/store/ad6c51ia15p9arjmvvqkn9fys9sf1kdw-hello.txt.drv</span><span style="color:#960050;background-color:#1e0010">»</span></span></span></code></pre></div><ul>
<li>Derivations have a <code>.drv</code> suffix, as you can see the result of calling
<code>hello-drv</code> is the nix store path to a derivation.</li>
</ul>
<h4 id="links-to-articles-about-derivations">Links To Articles about Derivations</h4>
<ul>
<li>
<p><a href="https://nixos.org/guides/nix-pills/06-our-first-derivation">NixPillsOurFirstDerivation</a></p>
</li>
<li>
<p><a href="https://nixos.org/guides/nix-pills/07-working-derivation">NixPills-WorkingDerivation</a></p>
</li>
<li>
<p><a href="https://nix.dev/manual/nix/2.24/language/derivations">nix.dev-Derivations</a></p>
</li>
<li>
<p><a href="https://nix.dev/tutorials/packaging-existing-software">nix.dev-packagingExistingSoftware</a></p>
</li>
<li>
<p><a href="https://ianthehenry.com/posts/how-to-learn-nix/my-first-derivation/">howToLearnNix-MyFirstDerivation</a></p>
</li>
<li>
<p><a href="https://ianthehenry.com/posts/how-to-learn-nix/derivations-in-detail/">howToLearnNix-DerivationsInDetail</a></p>
</li>
<li>
<p><a href="https://www.sam.today/blog/creating-a-super-simple-derivation-learning-nix-pt-3">Sparky/blog-creatingASuperSimpleDerivation</a> # How to learn Nix</p>
</li>
<li>
<p><a href="https://www.sam.today/blog/derivations-102-learning-nix-pt-4">Sparky/blog-Derivations102</a></p>
</li>
<li>
<p><a href="https://scrive.github.io/nix-workshop/04-derivations/01-derivation-basics.html">ScriveNixWorkshop-nixDerivationBasics</a></p>
</li>
<li>
<p><a href="https://zero-to-nix.com/concepts/derivations/">zeroToNix-Derivations</a></p>
</li>
<li>
<p><a href="https://www.tweag.io/blog/2021-02-17-derivation-outputs-and-output-paths/">Tweag-derivationOutputs</a></p>
</li>
<li>
<p><a href="https://ayats.org/blog/nix-tuto-2">theNixLectures-Derivations</a></p>
</li>
<li>
<p><a href="https://bmcgee.ie/posts/2023/02/nix-what-are-fixed-output-derivations-and-why-use-them/">bmcgee-whatAreFixed-OutputDerivations</a></p>
</li>
</ul>
]]></content:encoded></item><item><title>Simple_nix_service</title><link>https://saylesss88.github.io/posts/simple_nix_service/</link><pubDate>Wed, 14 May 2025 19:25:11 -0400</pubDate><guid>https://saylesss88.github.io/posts/simple_nix_service/</guid><description>&lt;h1 id="building-a-custom-nixos-service-with-flakes-and-overlays">Building a Custom NixOS Service with Flakes and Overlays&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#building-a-custom-nixos-service-with-flakes-and-overlays">Building a Custom NixOS Service with Flakes and Overlays&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-project-directory">Create Project Directory&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-flake">Create flake&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-service-module">Create Service Module&lt;/a>&lt;/li>
&lt;li>&lt;a href="#add-nixosconfigurations-output">Add nixosConfigurations Output&lt;/a> - &lt;a href="#build-the-system-configuration">Build the System Configuration&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv12.png"
 alt="gruv12" width="700">
&lt;/figure>

&lt;p>TL;DR NixOS&amp;rsquo;s declarative configuration and flakes make it easy to create
custom services. This post shows how to build a minimal service using flakes
and overlays for a &amp;ldquo;meow&amp;rdquo; command&lt;/p>
&lt;ul>
&lt;li>This will be a complete minimal configuration for testing purposes.&lt;/li>
&lt;/ul>
&lt;h2 id="create-project-directory">Create Project Directory&lt;/h2>
&lt;p>Start by creating a directory to hold your project, I called mine &lt;code>meow&lt;/code>:&lt;/p></description><content:encoded><![CDATA[<h1 id="building-a-custom-nixos-service-with-flakes-and-overlays">Building a Custom NixOS Service with Flakes and Overlays</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#building-a-custom-nixos-service-with-flakes-and-overlays">Building a Custom NixOS Service with Flakes and Overlays</a>
<ul>
<li><a href="#create-project-directory">Create Project Directory</a></li>
<li><a href="#create-flake">Create flake</a></li>
<li><a href="#create-service-module">Create Service Module</a></li>
<li><a href="#add-nixosconfigurations-output">Add nixosConfigurations Output</a> - <a href="#build-the-system-configuration">Build the System Configuration</a></li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv12.png"
    alt="gruv12" width="700">
</figure>

<p>TL;DR NixOS&rsquo;s declarative configuration and flakes make it easy to create
custom services. This post shows how to build a minimal service using flakes
and overlays for a &ldquo;meow&rdquo; command</p>
<ul>
<li>This will be a complete minimal configuration for testing purposes.</li>
</ul>
<h2 id="create-project-directory">Create Project Directory</h2>
<p>Start by creating a directory to hold your project, I called mine <code>meow</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir meow <span style="color:#f92672">&amp;&amp;</span> cd meow</span></span></code></pre></div><h2 id="create-flake">Create flake</h2>
<p>Create a <code>flake.nix</code> with the following:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:nixos/nixpkgs/nixos-unstable&#34;</span>;
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> { self<span style="color:#f92672">,</span> nixpkgs<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>    overlays<span style="color:#f92672">.</span>default <span style="color:#f92672">=</span> final: prev: {
</span></span><span style="display:flex;"><span>      meow <span style="color:#f92672">=</span> final<span style="color:#f92672">.</span>writeShellScriptBin <span style="color:#e6db74">&#34;meow&#34;</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo meow
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    nixosModules<span style="color:#f92672">.</span>default <span style="color:#f92672">=</span> { pkgs<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>      imports <span style="color:#f92672">=</span> [ <span style="color:#e6db74">./nixos-module.nix</span> ];
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># inject dependencies from flake.nix, and don&#39;t do anything else</span>
</span></span><span style="display:flex;"><span>      config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf config<span style="color:#f92672">.</span>services<span style="color:#f92672">.</span>meow<span style="color:#f92672">.</span>enable {
</span></span><span style="display:flex;"><span>        nixpkgs<span style="color:#f92672">.</span>overlays <span style="color:#f92672">=</span> [ self<span style="color:#f92672">.</span>overlays<span style="color:#f92672">.</span>default ];
</span></span><span style="display:flex;"><span>        services<span style="color:#f92672">.</span>meow<span style="color:#f92672">.</span>package <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkDefault pkgs<span style="color:#f92672">.</span>meow;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h2 id="create-service-module">Create Service Module</h2>
<p>Next we&rsquo;ll create the <code>nixos-module.nix</code> in the same directory with the
following content:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># nixos-module.nix</span>
</span></span><span style="display:flex;"><span>{ pkgs<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }:
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> cfg <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>services<span style="color:#f92672">.</span>meow; <span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>  options <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    services<span style="color:#f92672">.</span>meow <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkEnableOption <span style="color:#e6db74">&#34;meow&#34;</span>;
</span></span><span style="display:flex;"><span>      package <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkOption {
</span></span><span style="display:flex;"><span>        description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;meow package to use&#34;</span>;
</span></span><span style="display:flex;"><span>        type <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>types<span style="color:#f92672">.</span>package;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf cfg<span style="color:#f92672">.</span>enable {
</span></span><span style="display:flex;"><span>    systemd<span style="color:#f92672">.</span>services<span style="color:#f92672">.</span>meow <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;meow at the user on the console&#34;</span>;
</span></span><span style="display:flex;"><span>      serviceConfig <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        Type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;oneshot&#34;</span>;
</span></span><span style="display:flex;"><span>        ExecStart <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>cfg<span style="color:#f92672">.</span>package<span style="color:#e6db74">}</span><span style="color:#e6db74">/bin/meow&#34;</span>;
</span></span><span style="display:flex;"><span>        StandardOutput <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;journal+console&#34;</span>;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>      wantedBy <span style="color:#f92672">=</span> [ <span style="color:#e6db74">&#34;multi-user.target&#34;</span> ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h2 id="add-nixosconfigurations-output">Add nixosConfigurations Output</h2>
<p>Lastly, we will add a <code>nixosConfigurations</code> output to the <code>flake.nix</code></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>nixosConfigurations<span style="color:#f92672">.</span>test <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>  system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>  modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>default
</span></span><span style="display:flex;"><span>    ({ pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>      fileSystems<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        device <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/dev/sda1&#34;</span>;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>      boot<span style="color:#f92672">.</span>loader<span style="color:#f92672">.</span>grub<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>      boot<span style="color:#f92672">.</span>initrd<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>      boot<span style="color:#f92672">.</span>kernel<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>      documentation<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      services<span style="color:#f92672">.</span>meow<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      system<span style="color:#f92672">.</span>stateVersion <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;25.05&#34;</span>;
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><ul>
<li><code>nixosConfigurations.test</code> is simply the name we chose for this particular
NixOS system configuration.</li>
</ul>
<p>The final product will look like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:nixos/nixpkgs/nixos-unstable&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>  }: {
</span></span><span style="display:flex;"><span>    overlays<span style="color:#f92672">.</span>default <span style="color:#f92672">=</span> final: prev: {
</span></span><span style="display:flex;"><span>      meow <span style="color:#f92672">=</span> final<span style="color:#f92672">.</span>writeShellScriptBin <span style="color:#e6db74">&#34;meow&#34;</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo meow
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    nixosModules<span style="color:#f92672">.</span>default <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      pkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>      config<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>      lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    }: {
</span></span><span style="display:flex;"><span>      imports <span style="color:#f92672">=</span> [<span style="color:#e6db74">./nixos-module.nix</span>];
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># inject dependencies from flake.nix, and don&#39;t do anything else</span>
</span></span><span style="display:flex;"><span>      config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf config<span style="color:#f92672">.</span>services<span style="color:#f92672">.</span>meow<span style="color:#f92672">.</span>enable {
</span></span><span style="display:flex;"><span>        nixpkgs<span style="color:#f92672">.</span>overlays <span style="color:#f92672">=</span> [self<span style="color:#f92672">.</span>overlays<span style="color:#f92672">.</span>default];
</span></span><span style="display:flex;"><span>        services<span style="color:#f92672">.</span>meow<span style="color:#f92672">.</span>package <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkDefault pkgs<span style="color:#f92672">.</span>meow;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    nixosConfigurations<span style="color:#f92672">.</span>test <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>      system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>      modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>default
</span></span><span style="display:flex;"><span>        ({
</span></span><span style="display:flex;"><span>          pkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>          lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>        }: {
</span></span><span style="display:flex;"><span>          fileSystems<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            device <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/dev/sda1&#34;</span>;
</span></span><span style="display:flex;"><span>          };
</span></span><span style="display:flex;"><span>          boot<span style="color:#f92672">.</span>loader<span style="color:#f92672">.</span>grub<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>          boot<span style="color:#f92672">.</span>initrd<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>          boot<span style="color:#f92672">.</span>kernel<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>          documentation<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          services<span style="color:#f92672">.</span>meow<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          system<span style="color:#f92672">.</span>stateVersion <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;25.05&#34;</span>;
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>      ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h3 id="build-the-system-configuration">Build the System Configuration</h3>
<p>Then build the system configuration:</p>
<p><code>nix build .#nixosConfigurations.test.config.system.build.toplevel</code></p>
<ul>
<li>
<p>If this builds successfully you&rsquo;ll see a <code>result</code> directory within your <code>meow</code>
directory.</p>
</li>
<li>
<p>I wouldn&rsquo;t recommend actually switching to this configuration but you could
build it to gain familiarity with it. If you were to switch to it you would
run <code>./result/bin/switch-to-configuration</code></p>
</li>
<li>
<p>Test in a NixOS Virtual Machine (Recommended):The safest way to see the &ldquo;meow&rdquo;
output is to build the configuration and then run it in a NixOS virtual
machine. You can do this using tools like <code>nixos-generate-config</code> and a
virtualization tool (like VirtualBox, QEMU, or GNOME Boxes).</p>
</li>
</ul>
]]></content:encoded></item><item><title>Nix_flakes_tips</title><link>https://saylesss88.github.io/posts/nix_flakes_tips/</link><pubDate>Wed, 14 May 2025 19:24:27 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_flakes_tips/</guid><description>&lt;h1 id="shallow-clone-nixpkgs">Shallow Clone Nixpkgs&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#shallow-clone-nixpkgs">Shallow Clone Nixpkgs&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#import-your-non-flake-wallpaper-repo">Import your Non-Flake Wallpaper Repo&lt;/a>&lt;/li>
&lt;li>&lt;a href="#understanding-patterns">Understanding @-patterns&lt;/a>&lt;/li>
&lt;li>&lt;a href="#understanding-specialargs">Understanding &lt;code>specialArgs&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-up-flake-check-and-formatter-outputs">Set up Flake Check and Formatter Outputs&lt;/a> - &lt;a href="#add-a-devshell-output">Add a devShell Output&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv8.png"
 alt="gruv8" width="700">
&lt;/figure>

&lt;ol>
&lt;li>Shallow clone nixpkgs, the full Git history isn&amp;rsquo;t always necessary and this
can speed up build times.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>The only issue I&amp;rsquo;ve had is &lt;code>nix-index-database&lt;/code> not working well with the
shallow clone&amp;hellip; Other than that no issues after running for a few months.&lt;/li>
&lt;/ul>





&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># flake.nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nixpkgs&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;git+https://github.com/NixOS/nixpkgs?shallow=1&amp;amp;ref=nixos-unstable&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Some times when you might need a full clone are debugging and working with
repository history but those are rare.&lt;/li>
&lt;/ul>
&lt;h2 id="import-your-non-flake-wallpaper-repo">Import your Non-Flake Wallpaper Repo&lt;/h2>
&lt;ol start="2">
&lt;li>Importing your non-flake wallpapers repo:&lt;/li>
&lt;/ol>





&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># flake.nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wallpapers &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:saylesss88/wallpapers&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flake &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>After adding the input I can access individual wallpapers by adding the &lt;code>inputs&lt;/code> argument and
something like &lt;code>path = &amp;quot;${inputs.wallpapers}/Aesthetic Scenery.jpg&amp;quot;;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="understanding--patterns">Understanding @-patterns&lt;/h2>
&lt;ol start="3">
&lt;li>Understanding &lt;code>@-patterns&lt;/code>, being able to reference your outputs argument set as a whole. An
&lt;code>@-pattern&lt;/code> is a way for a function can access variadic attributes (i.e. varying number of
arguments).&lt;/li>
&lt;/ol>





&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># flake.nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> home-manager&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:nix-community/home-manager/master&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> home-manager&lt;span style="color:#f92672">.&lt;/span>inputs&lt;span style="color:#f92672">.&lt;/span>nixpkgs&lt;span style="color:#f92672">.&lt;/span>follows &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;nixpkgs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stylix&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:danth/stylix&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nixpkgs&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> home-manager&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#f92672">@&lt;/span> inputs:&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the above example to add the modules to your nixosConfigurations you would add something
like this:&lt;/p></description><content:encoded><![CDATA[<h1 id="shallow-clone-nixpkgs">Shallow Clone Nixpkgs</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#shallow-clone-nixpkgs">Shallow Clone Nixpkgs</a>
<ul>
<li><a href="#import-your-non-flake-wallpaper-repo">Import your Non-Flake Wallpaper Repo</a></li>
<li><a href="#understanding-patterns">Understanding @-patterns</a></li>
<li><a href="#understanding-specialargs">Understanding <code>specialArgs</code></a></li>
<li><a href="#set-up-flake-check-and-formatter-outputs">Set up Flake Check and Formatter Outputs</a> - <a href="#add-a-devshell-output">Add a devShell Output</a></li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv8.png"
    alt="gruv8" width="700">
</figure>

<ol>
<li>Shallow clone nixpkgs, the full Git history isn&rsquo;t always necessary and this
can speed up build times.</li>
</ol>
<ul>
<li>The only issue I&rsquo;ve had is <code>nix-index-database</code> not working well with the
shallow clone&hellip; Other than that no issues after running for a few months.</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>inputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;git+https://github.com/NixOS/nixpkgs?shallow=1&amp;ref=nixos-unstable&#34;</span>;
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><ul>
<li>Some times when you might need a full clone are debugging and working with
repository history but those are rare.</li>
</ul>
<h2 id="import-your-non-flake-wallpaper-repo">Import your Non-Flake Wallpaper Repo</h2>
<ol start="2">
<li>Importing your non-flake wallpapers repo:</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>inputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    wallpapers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:saylesss88/wallpapers&#34;</span>;
</span></span><span style="display:flex;"><span>      flake <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>After adding the input I can access individual wallpapers by adding the <code>inputs</code> argument and
something like <code>path = &quot;${inputs.wallpapers}/Aesthetic Scenery.jpg&quot;;</code></li>
</ul>
<h2 id="understanding--patterns">Understanding @-patterns</h2>
<ol start="3">
<li>Understanding <code>@-patterns</code>, being able to reference your outputs argument set as a whole. An
<code>@-pattern</code> is a way for a function can access variadic attributes (i.e. varying number of
arguments).</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>inputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    home-manager<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:nix-community/home-manager/master&#34;</span>;
</span></span><span style="display:flex;"><span>    home-manager<span style="color:#f92672">.</span>inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>follows <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nixpkgs&#34;</span>;
</span></span><span style="display:flex;"><span>    stylix<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:danth/stylix&#34;</span>;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>outputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    home-manager<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>} <span style="color:#f92672">@</span> inputs:</span></span></code></pre></div><p>With the above example to add the modules to your nixosConfigurations you would add something
like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>nixosConfigurations<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>  specialArgs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">inherit</span> inputs username host email systemSettings;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">./hosts</span><span style="color:#960050;background-color:#1e0010">/$</span>{host}<span style="color:#e6db74">/config.nix</span>
</span></span><span style="display:flex;"><span>  inputs<span style="color:#f92672">.</span>stylix<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>stylix
</span></span><span style="display:flex;"><span>  home-manager<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>home-manager
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># .. snip ..</span>
</span></span><span style="display:flex;"><span>];</span></span></code></pre></div><ul>
<li>Notice that since home-manager was explicitly listed in the outputs arguments:
<code>outputs = { self, nixpkgs, home-manager, }; </code> the <code>inputs</code> prefix is unnecessary.
If home-manager was removed from the outputs arguments: <code>outputs = { self, ... }</code>
then you would need <code>modules = [ inputs.home-manager.nixosModules.home-manager];</code> This can be confusing
because many docs assume your not using an @-pattern so if you have one in your flake you need to prefix
with <code>inputs</code>. I use this to reference my personal wallpapers repo mentioned earlier.</li>
</ul>
<h2 id="understanding-specialargs">Understanding <code>specialArgs</code></h2>
<ol start="4">
<li>Understanding <code>specialArgs</code> (nixos) and <code>extraSpecialArgs</code> (home-manager). Building on the @-patterns, using
<code>specialArgs</code> and <code>extraSpecialArgs</code> is a way to pass arguments from your flake to your NixOS and home-manager
modules.</li>
</ol>
<p>For example, here is a snippet of some variables I set:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>outputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  self<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  nixpkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  home-manager<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>} <span style="color:#f92672">@</span> inputs: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>  host <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;magic&#34;</span>;
</span></span><span style="display:flex;"><span>  username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jr&#34;</span>;
</span></span><span style="display:flex;"><span>  userVars <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    timezone <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;America/New_York&#34;</span>;
</span></span><span style="display:flex;"><span>    locale <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;en_US.UTF-8&#34;</span>;
</span></span><span style="display:flex;"><span>    gitUsername <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TSawyer87&#34;</span>;
</span></span><span style="display:flex;"><span>    dotfilesDir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;~/.dotfiles&#34;</span>;
</span></span><span style="display:flex;"><span>    wm <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hyprland&#34;</span>;
</span></span><span style="display:flex;"><span>    browser <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;firefox&#34;</span>;
</span></span><span style="display:flex;"><span>    term <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ghostty&#34;</span>;
</span></span><span style="display:flex;"><span>    editor <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hx&#34;</span>;
</span></span><span style="display:flex;"><span>    keyboardLayout <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;us&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">in</span></span></span></code></pre></div><p>Now I can pass them as special args like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>nixosConfigurations <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>        specialArgs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">inherit</span>
</span></span><span style="display:flex;"><span>            inputs
</span></span><span style="display:flex;"><span>            username
</span></span><span style="display:flex;"><span>            system
</span></span><span style="display:flex;"><span>            host
</span></span><span style="display:flex;"><span>            userVars
</span></span><span style="display:flex;"><span>            ;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>        modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">./hosts</span><span style="color:#960050;background-color:#1e0010">/$</span>{host}<span style="color:#e6db74">/configuration.nix</span>
</span></span><span style="display:flex;"><span>        home-manager<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>home-manager
</span></span><span style="display:flex;"><span>        inputs<span style="color:#f92672">.</span>stylix<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>stylix
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          home-manager<span style="color:#f92672">.</span>useGlobalPkgs <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>          home-manager<span style="color:#f92672">.</span>useUserPackages <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>          home-manager<span style="color:#f92672">.</span>users<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>username<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./hosts</span><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74">/home.nix</span>;
</span></span><span style="display:flex;"><span>          home-manager<span style="color:#f92672">.</span>backupFileExtension <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;backup&#34;</span>;
</span></span><span style="display:flex;"><span>          home-manager<span style="color:#f92672">.</span>extraSpecialArgs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">inherit</span>
</span></span><span style="display:flex;"><span>              inputs
</span></span><span style="display:flex;"><span>              username
</span></span><span style="display:flex;"><span>              system
</span></span><span style="display:flex;"><span>              host
</span></span><span style="display:flex;"><span>              userVars
</span></span><span style="display:flex;"><span>              ;
</span></span><span style="display:flex;"><span>          };
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      ];</span></span></code></pre></div><ul>
<li>To access values in <code>userVars</code> for example:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># git.nix</span>
</span></span><span style="display:flex;"><span>{ userVars<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>  programs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    git <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>      userName <span style="color:#f92672">=</span> userVars<span style="color:#f92672">.</span>gitUsername;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h2 id="set-up-flake-check-and-formatter-outputs">Set up Flake Check and Formatter Outputs</h2>
<ol start="5">
<li>Set up <code>checks</code> and <code>formatter</code> outputs with <code>treefmt-nix</code>. Add <code>treefmt-nix</code> to your inputs and outputs arguments.
Inside the <code>let</code> expression from tip 4 I would add:</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ... snip ...</span>
</span></span><span style="display:flex;"><span>pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> nixpkgs {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>allowUnfree <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>treefmtEval <span style="color:#f92672">=</span> treefmt-nix<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>evalModule pkgs <span style="color:#e6db74">./treefmt.nix</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  checks<span style="color:#f92672">.</span>x86_64-linux<span style="color:#f92672">.</span>style <span style="color:#f92672">=</span> treefmtEval<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>check self;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  formatter<span style="color:#f92672">.</span>x86_64-linux <span style="color:#f92672">=</span> treefmtEval<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>wrapper;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># ... snip ...</span>
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>And in the <code>treefmt.nix</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># treefmt.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>projectRootFile <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flake.nix&#34;</span>;
</span></span><span style="display:flex;"><span>programs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  deadnix<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  statix<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  keep-sorted<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  nixfmt <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    strict <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>settings<span style="color:#f92672">.</span>excludes <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;*.age&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;*.jpg&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;*.nu&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;*.png&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;.jj/*&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;flake.lock&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;justfile&#34;</span>
</span></span><span style="display:flex;"><span>];
</span></span><span style="display:flex;"><span>settings<span style="color:#f92672">.</span>formatter <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  deadnix <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    priority <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  statix <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    priority <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  nixfmt <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    priority <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>Use <code>treefmt-nix</code> to manage code formatters and linters as flake outputs. This ensures consistent styling
and catches issues with tools like <code>deadnix</code>, <code>statix</code>, and <code>nixfmt</code>.</p>
</li>
<li>
<p>Use <code>nix fmt</code> in the flake directory to format your whole configuration.</p>
</li>
<li>
<p>Now you can run <code>nix flake check</code> to run your checks. Running <code>nix flake show</code> will list your outputs.</p>
</li>
<li>
<p>Tools like <code>nix-fast-build</code> rely on flake checks and can be used after setting this up.</p>
</li>
</ul>
<h3 id="add-a-devshell-output">Add a devShell Output</h3>
<ol start="6">
<li>Make a devShell output:</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span> in
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      checks<span style="color:#f92672">.</span>x86_64-linux<span style="color:#f92672">.</span>style <span style="color:#f92672">=</span> treefmtEval<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>check self;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      formatter<span style="color:#f92672">.</span>x86_64-linux <span style="color:#f92672">=</span> treefmtEval<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>wrapper;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      devShells<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span><span style="color:#f92672">.</span>default <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./lib/dev-shell.nix</span> { <span style="color:#66d9ef">inherit</span> inputs; };</span></span></code></pre></div><p>and in the <code>dev-shell.nix</code> you could put something like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># dev-shell.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  system <span style="color:#f92672">?</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>}:
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Instantiate nixpkgs with the given system and allow unfree packages</span>
</span></span><span style="display:flex;"><span>  pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> inputs<span style="color:#f92672">.</span>nixpkgs {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>allowUnfree <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    overlays <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Add overlays if needed, e.g., inputs.neovim-nightly-overlay.overlays.default</span>
</span></span><span style="display:flex;"><span>    ];
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>pkgs<span style="color:#f92672">.</span>mkShell {
</span></span><span style="display:flex;"><span>  name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nixos-dev&#34;</span>;
</span></span><span style="display:flex;"><span>  packages <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> pkgs; [
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Nix tools</span>
</span></span><span style="display:flex;"><span>    nixfmt-rfc-style <span style="color:#75715e"># Formatter</span>
</span></span><span style="display:flex;"><span>    deadnix <span style="color:#75715e"># Dead code detection</span>
</span></span><span style="display:flex;"><span>    nixd <span style="color:#75715e"># Nix language server</span>
</span></span><span style="display:flex;"><span>    nil <span style="color:#75715e"># Alternative Nix language server</span>
</span></span><span style="display:flex;"><span>    nh <span style="color:#75715e"># Nix helper</span>
</span></span><span style="display:flex;"><span>    nix-diff <span style="color:#75715e"># Compare Nix derivations</span>
</span></span><span style="display:flex;"><span>    nix-tree <span style="color:#75715e"># Visualize Nix dependencies</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Code editing</span>
</span></span><span style="display:flex;"><span>    helix
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># General utilities</span>
</span></span><span style="display:flex;"><span>    git
</span></span><span style="display:flex;"><span>    ripgrep
</span></span><span style="display:flex;"><span>    jq
</span></span><span style="display:flex;"><span>    tree
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  shellHook <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    echo &#34;Welcome to the NixOS development shell!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    echo &#34;System: </span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    echo &#34;Tools available: nixfmt, deadnix, nixd, nil, nh, nix-diff, nix-tree, helix, git, ripgrep, jq, tree&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>You can enter this devshell with <code>nix develop</code> or automatically with <code>direnv</code>.</li>
</ul>
]]></content:encoded></item><item><title>Working_with_nixpkgs_locally</title><link>https://saylesss88.github.io/posts/working_with_nixpkgs_locally/</link><pubDate>Wed, 14 May 2025 19:23:32 -0400</pubDate><guid>https://saylesss88.github.io/posts/working_with_nixpkgs_locally/</guid><description>&lt;h1 id="working-with-nixpkgs-locally-benefits-and-best-practices">Working with Nixpkgs Locally: Benefits and Best Practices&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#working-with-nixpkgs-locally-benefits-and-best-practices">Working with Nixpkgs Locally: Benefits and Best Practices&lt;/a>&lt;/li>
&lt;li>&lt;a href="#i-why-work-with-nixpkgs-locally">I. Why Work with Nixpkgs Locally?&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#a-faster-development-cycle">A. Faster Development Cycle&lt;/a>&lt;/li>
&lt;li>&lt;a href="#b-enhanced-version-control">B. Enhanced Version Control&lt;/a>&lt;/li>
&lt;li>&lt;a href="#c-flexible-debugging-capabilities">C. Flexible Debugging Capabilities&lt;/a>&lt;/li>
&lt;li>&lt;a href="#d-streamlined-contribution-workflow">D. Streamlined Contribution Workflow&lt;/a>&lt;/li>
&lt;li>&lt;a href="#e-up-to-date-documentation-source">E. Up-to-Date Documentation Source&lt;/a>&lt;/li>
&lt;li>&lt;a href="#f-optimized-storage-and-performance">F. Optimized Storage and Performance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#ii-flake-vs-non-flake-syntax-for-local-nixpkgs">II. Flake vs. Non-Flake Syntax for Local Nixpkgs&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#a-flake-syntax-nix-build-package">A. Flake Syntax (&lt;code>nix build .#&amp;lt;package&amp;gt;&lt;/code>)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#b-non-flake-syntax-nix-build-f-package-or-nix-build-f-package">B. Non-Flake Syntax (&lt;code>nix-build -f . &amp;lt;package&amp;gt;&lt;/code> or &lt;code>nix build -f . &amp;lt;package&amp;gt;&lt;/code>)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#iii-setting-up-a-local-nixpkgs-repository-efficiently">III. Setting Up a Local Nixpkgs Repository Efficiently&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-initial-clone-shallow-cloning">A. Initial Clone: Shallow Cloning&lt;/a>&lt;/li>
&lt;li>&lt;a href="#b-managing-branches-with-worktrees">B. Managing Branches with Worktrees&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#iv-debugging-missing-dependencies-a-practical-example">IV. Debugging Missing Dependencies: A Practical Example&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#b-local-source-code-search-with-rg-ripgrep">B. Local Source Code Search with &lt;code>rg&lt;/code> (ripgrep)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#v-local-derivation-search-with-nix-locate">V. Local Derivation Search with &lt;code>nix-locate&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#vi-key-benefits-of-working-with-nixpkgs-locally-recap">VI. Key Benefits of Working with Nixpkgs Locally (Recap)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#vii-best-practices-and-tips-from-the-community">VII. Best Practices and Tips from the Community&lt;/a>&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv18.png"
 alt="gruv18" width="700">
&lt;/figure>

&lt;ul>
&lt;li>Nixpkgs, the package repository for NixOS, is a powerful resource for building and customizing software.&lt;/li>
&lt;li>Working with a local copy enhances development, debugging, and contribution workflows.&lt;/li>
&lt;li>This post covers setting up a local Nixpkgs repository, searching for dependencies, and leveraging its advantages, incorporating tips from the Nix community.&lt;/li>
&lt;/ul>
&lt;h1 id="i-why-work-with-nixpkgs-locally">I. Why Work with Nixpkgs Locally?&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>A local Nixpkgs repository offers significant advantages for Nix developers:&lt;/p></description><content:encoded><![CDATA[<h1 id="working-with-nixpkgs-locally-benefits-and-best-practices">Working with Nixpkgs Locally: Benefits and Best Practices</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#working-with-nixpkgs-locally-benefits-and-best-practices">Working with Nixpkgs Locally: Benefits and Best Practices</a></li>
<li><a href="#i-why-work-with-nixpkgs-locally">I. Why Work with Nixpkgs Locally?</a>
<ul>
<li><a href="#a-faster-development-cycle">A. Faster Development Cycle</a></li>
<li><a href="#b-enhanced-version-control">B. Enhanced Version Control</a></li>
<li><a href="#c-flexible-debugging-capabilities">C. Flexible Debugging Capabilities</a></li>
<li><a href="#d-streamlined-contribution-workflow">D. Streamlined Contribution Workflow</a></li>
<li><a href="#e-up-to-date-documentation-source">E. Up-to-Date Documentation Source</a></li>
<li><a href="#f-optimized-storage-and-performance">F. Optimized Storage and Performance</a></li>
</ul>
</li>
<li><a href="#ii-flake-vs-non-flake-syntax-for-local-nixpkgs">II. Flake vs. Non-Flake Syntax for Local Nixpkgs</a>
<ul>
<li><a href="#a-flake-syntax-nix-build-package">A. Flake Syntax (<code>nix build .#&lt;package&gt;</code>)</a></li>
<li><a href="#b-non-flake-syntax-nix-build-f-package-or-nix-build-f-package">B. Non-Flake Syntax (<code>nix-build -f . &lt;package&gt;</code> or <code>nix build -f . &lt;package&gt;</code>)</a></li>
<li><a href="#iii-setting-up-a-local-nixpkgs-repository-efficiently">III. Setting Up a Local Nixpkgs Repository Efficiently</a></li>
<li><a href="#a-initial-clone-shallow-cloning">A. Initial Clone: Shallow Cloning</a></li>
<li><a href="#b-managing-branches-with-worktrees">B. Managing Branches with Worktrees</a></li>
</ul>
</li>
<li><a href="#iv-debugging-missing-dependencies-a-practical-example">IV. Debugging Missing Dependencies: A Practical Example</a>
<ul>
<li><a href="#b-local-source-code-search-with-rg-ripgrep">B. Local Source Code Search with <code>rg</code> (ripgrep)</a></li>
</ul>
</li>
<li><a href="#v-local-derivation-search-with-nix-locate">V. Local Derivation Search with <code>nix-locate</code></a></li>
<li><a href="#vi-key-benefits-of-working-with-nixpkgs-locally-recap">VI. Key Benefits of Working with Nixpkgs Locally (Recap)</a></li>
<li><a href="#vii-best-practices-and-tips-from-the-community">VII. Best Practices and Tips from the Community</a></li>
</ul>
<figure><img src="/images/gruv18.png"
    alt="gruv18" width="700">
</figure>

<ul>
<li>Nixpkgs, the package repository for NixOS, is a powerful resource for building and customizing software.</li>
<li>Working with a local copy enhances development, debugging, and contribution workflows.</li>
<li>This post covers setting up a local Nixpkgs repository, searching for dependencies, and leveraging its advantages, incorporating tips from the Nix community.</li>
</ul>
<h1 id="i-why-work-with-nixpkgs-locally">I. Why Work with Nixpkgs Locally?</h1>
<ul>
<li>
<p>A local Nixpkgs repository offers significant advantages for Nix developers:</p>
<h2 id="a-faster-development-cycle">A. Faster Development Cycle</h2>
<ul>
<li>Local searches for packages and dependencies are significantly quicker than querying remote repositories or channels.</li>
<li>This speedup is crucial for efficient debugging and rapid prototyping of Nix expressions.</li>
</ul>
<h2 id="b-enhanced-version-control">B. Enhanced Version Control</h2>
<ul>
<li>By pinning your local repository to specific commits or branches (e.g., <code>nixos-unstable</code>), you ensure build reproducibility.</li>
<li>This prevents unexpected issues arising from upstream changes in Nixpkgs.</li>
</ul>
<h2 id="c-flexible-debugging-capabilities">C. Flexible Debugging Capabilities</h2>
<ul>
<li>You can directly test and modify package derivations within your local copy.</li>
<li>This allows for quick fixes to issues like missing dependencies without waiting for upstream updates or releases.</li>
</ul>
<h2 id="d-streamlined-contribution-workflow">D. Streamlined Contribution Workflow</h2>
<ul>
<li>Developing and testing new packages or patches locally is essential before submitting them as pull requests to Nixpkgs.</li>
<li>A local setup provides an isolated environment for experimentation.</li>
</ul>
<h2 id="e-up-to-date-documentation-source">E. Up-to-Date Documentation Source</h2>
<ul>
<li>The source code and comments within the Nixpkgs repository often contain the most current information about packages.</li>
<li>This can sometimes be more up-to-date than official, external documentation.</li>
</ul>
<h2 id="f-optimized-storage-and-performance">F. Optimized Storage and Performance</h2>
<ul>
<li>Employing efficient cloning strategies (e.g., shallow clones) and avoiding unnecessary practices (like directly using Nixpkgs as a flake for local development) minimizes disk usage and build times.</li>
</ul>
</li>
</ul>
<h1 id="ii-flake-vs-non-flake-syntax-for-local-nixpkgs">II. Flake vs. Non-Flake Syntax for Local Nixpkgs</h1>
<ul>
<li>
<p>When working with Nixpkgs locally, the choice between Flake and non-Flake syntax has implications for performance and storage:</p>
<h2 id="a-flake-syntax-nix-build-package">A. Flake Syntax (<code>nix build .#&lt;package&gt;</code>)</h2>
<ul>
<li>Treats the current directory as a flake, requiring evaluation of <code>flake.nix</code>.</li>
<li>For local Nixpkgs, this evaluates the flake definition in the repository root.</li>
<li><strong>Performance and Storage Overhead:</strong> Flakes copy the entire working directory (including Git history if present) to <code>/nix/store</code> for evaluation. This can be slow and storage-intensive for large repositories like Nixpkgs.</li>
</ul>
<h2 id="b-non-flake-syntax-nix-build--f--package-or-nix-build--f--package">B. Non-Flake Syntax (<code>nix-build -f . &lt;package&gt;</code> or <code>nix build -f . &lt;package&gt;</code>)</h2>
<ul>
<li><code>-f .</code> specifies the Nix expression (e.g., <code>default.nix</code> or a specific file) in the current directory.</li>
<li><strong>Efficiency:</strong> Evaluates the Nix expression directly <em>without</em> copying the entire worktree to <code>/nix/store</code>. This is significantly faster and more storage-efficient for local development on large repositories.</li>
</ul>
</li>
</ul>
<h2 id="iii-setting-up-a-local-nixpkgs-repository-efficiently">III. Setting Up a Local Nixpkgs Repository Efficiently</h2>
<ul>
<li>
<p>Cloning Nixpkgs requires careful consideration due to its size.</p>
<h2 id="a-initial-clone-shallow-cloning">A. Initial Clone: Shallow Cloning</h2>
<ul>
<li>To avoid downloading the entire history, perform a shallow clone:





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone <span style="color:#f92672">[</span>https://github.com/NixOS/nixpkgs<span style="color:#f92672">](</span>https://github.com/NixOS/nixpkgs<span style="color:#f92672">)</span> --depth <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>cd nixpkgs</span></span></code></pre></div></li>
</ul>
<h2 id="b-managing-branches-with-worktrees">B. Managing Branches with Worktrees</h2>
<ul>
<li>Use Git worktrees to manage different branches efficiently:





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git fetch --all --prune --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>git worktree add -b nixos-unstable nixos-unstable <span style="color:#75715e"># For just unstable</span></span></span></code></pre></div></li>
<li><strong>Explanation of <code>git worktree</code>:</strong> Allows multiple working directories attached to the same <code>.git</code> directory, sharing history and objects but with separate checked-out files.</li>
<li><code>git worktree add</code>: Creates a new working directory for the specified branch (<code>nixos-unstable</code> in this case).</li>
</ul>
</li>
</ul>
<h1 id="iv-debugging-missing-dependencies-a-practical-example">IV. Debugging Missing Dependencies: A Practical Example</h1>
<ul>
<li>
<p>Let&rsquo;s say you&rsquo;re trying to build <code>icat</code> locally and encounter a missing dependency error:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix-build <span style="color:#960050;background-color:#1e0010">-</span>A icat
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ... (Error log showing &#34;fatal error: X11/Xlib.h: No such file or directory&#34;)</span></span></span></code></pre></div><ul>
<li>The error <code>fatal error: X11/Xlib.h: No such file or directory</code> indicates a missing X11 dependency.</li>
</ul>
<h2 id="a-online-search-with-searchnixosorg">A. Online Search with <code>search.nixos.org</code></h2>
<ul>
<li>The Nixpkgs package search website (<a href="https://search.nixos.org/packages">https://search.nixos.org/packages</a>) is a valuable first step.</li>
<li>However, broad terms like &ldquo;x11&rdquo; can yield many irrelevant results.</li>
<li><strong>Tip:</strong> Utilize the left sidebar to filter by package sets (e.g., &ldquo;xorg&rdquo;).</li>
</ul>
<h2 id="b-local-source-code-search-with-rg-ripgrep">B. Local Source Code Search with <code>rg</code> (ripgrep)</h2>
<ul>
<li>
<p>Familiarity with searching the Nixpkgs source code is crucial for finding dependencies.</p>
</li>
<li>
<p>Navigate to your local <code>nixpkgs/</code> directory and use <code>rg</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rg <span style="color:#e6db74">&#34;x11 =&#34;</span> pkgs <span style="color:#75715e"># Case-sensitive search</span></span></span></code></pre></div><p><strong>Output:</strong></p>





<pre tabindex="0"><code>pkgs/tools/X11/primus/default.nix
21:  primus = if useNvidia then primusLib_ else primusLib_.override { nvidia_x11 = null; };
22:  primus_i686 = if useNvidia then primusLib_i686_ else primusLib_i686_.override { nvidia_x11 = null; };

pkgs/applications/graphics/imv/default.nix
38:    x11 = [ libGLU xorg.libxcb xorg.libX11 ];</code></pre></li>
<li>
<p>Refining the search (case-insensitive):</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rg -i <span style="color:#e6db74">&#34;libx11 =&#34;</span> pkgs</span></span></code></pre></div><p><strong>Output:</strong></p>





<pre tabindex="0"><code># ... (Output showing &#34;xorg.libX11&#34;)</code></pre></li>
<li>
<p>The key result is <code>xorg.libX11</code>, which is likely the missing dependency.</p>
</li>
</ul>
</li>
</ul>
<h1 id="v-local-derivation-search-with-nix-locate">V. Local Derivation Search with <code>nix-locate</code></h1>
<ul>
<li>
<p><code>nix-locate</code> (from the <code>nix-index</code> package) allows searching for derivations on the command line.</p>
<blockquote>
<p><strong>Note:</strong> Install <code>nix-index</code> and run <code>nix-index</code> to create the initial index.</p></blockquote>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-locate libx11
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ... (Output showing paths related to libx11)</span></span></span></code></pre></div></li>
<li>
<p>Combining online and local search tools (<code>search.nixos.org</code>, <code>rg</code>, <code>nix-locate</code>) provides a comprehensive approach to finding dependencies.</p>
</li>
</ul>
<h1 id="vi-key-benefits-of-working-with-nixpkgs-locally-recap">VI. Key Benefits of Working with Nixpkgs Locally (Recap)</h1>
<ul>
<li><strong>Speed:</strong> Faster searches and builds compared to remote operations.</li>
<li><strong>Control:</strong> Full control over the Nixpkgs version.</li>
<li><strong>Up-to-Date Information:</strong> Repository source often has the latest details.</li>
</ul>
<h1 id="vii-best-practices-and-tips-from-the-community">VII. Best Practices and Tips from the Community</h1>
<ul>
<li>
<p><strong>Rebasing over Merging:</strong> Never merge upstream changes into your local branch. Always rebase your branch onto the upstream (e.g., <code>master</code> or <code>nixos-unstable</code>) to avoid accidental large-scale pings in pull requests (Tip from <code>soulsssx3</code> on Reddit).</p>
</li>
<li>
<p><strong>Tip from <code>ElvishJErrico</code>:</strong> Avoid using Nixpkgs directly as a flake for local development due to slow copying to <code>/nix/store</code> and performance issues with garbage collection on large numbers of small files. Use <code>nix build -f . &lt;package&gt;</code> instead of <code>nix build .#&lt;package&gt;</code>.</p>
</li>
<li>
<p><strong>Edge Cases for Flake Syntax:</strong> Flake syntax might be necessary in specific scenarios, such as NixOS installer tests where copying the Git history should be avoided.</p>
</li>
<li>
<p><strong>Base Changes on <code>nixos-unstable</code>:</strong> For better binary cache hits, base your changes on the <code>nixos-unstable</code> branch instead of <code>master</code>. Consider the merge-base for staging branches as well.</p>
</li>
<li>
<p><strong>Consider <code>jujutsu</code>:</strong> Explore <code>jujutsu</code>, a Git-compatible alternative that can offer a more intuitive workflow, especially for large monorepos like Nixpkgs. While it has a learning curve, it can significantly improve parallel work and branch management.</p>
</li>
</ul>
]]></content:encoded></item><item><title>Building_your_config_as_a_package</title><link>https://saylesss88.github.io/posts/building_your_config_as_a_package/</link><pubDate>Wed, 14 May 2025 19:21:54 -0400</pubDate><guid>https://saylesss88.github.io/posts/building_your_config_as_a_package/</guid><description>&lt;h1 id="building-your-configuration-as-a-package">Building your configuration as a Package&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#building-your-configuration-as-a-package">Building your configuration as a Package&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#benefits-of-nixosconfiguration-as-a-package">Benefits of nixosConfiguration as a Package&lt;/a>&lt;/li>
&lt;li>&lt;a href="#usage-and-deployment">Usage and Deployment&lt;/a>&lt;/li>
&lt;li>&lt;a href="#adding-a-configuration-vm-output">Adding a Configuration VM Output&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#debugging">Debugging&lt;/a>&lt;/li>
&lt;li>&lt;a href="#understanding-atomicity">Understanding Atomicity&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv4.png"
 alt="gruv4" width="700">
&lt;/figure>

&lt;ul>
&lt;li>
&lt;p>TL;DR This post demonstrates other ways to modularize your config as well as
going into more advanced outputs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This allows you to build your configuration as a package allowing you to
separate the process of creating a configuration artifact and applying it to
the live system giving you a reusable artifact that can be used to deploy to
different systems. This can make it easier to isolate it from other parts of
your system making debugging easier.&lt;/p></description><content:encoded><![CDATA[<h1 id="building-your-configuration-as-a-package">Building your configuration as a Package</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#building-your-configuration-as-a-package">Building your configuration as a Package</a>
<ul>
<li><a href="#benefits-of-nixosconfiguration-as-a-package">Benefits of nixosConfiguration as a Package</a></li>
<li><a href="#usage-and-deployment">Usage and Deployment</a></li>
<li><a href="#adding-a-configuration-vm-output">Adding a Configuration VM Output</a>
<ul>
<li><a href="#debugging">Debugging</a></li>
<li><a href="#understanding-atomicity">Understanding Atomicity</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv4.png"
    alt="gruv4" width="700">
</figure>

<ul>
<li>
<p>TL;DR This post demonstrates other ways to modularize your config as well as
going into more advanced outputs.</p>
</li>
<li>
<p>This allows you to build your configuration as a package allowing you to
separate the process of creating a configuration artifact and applying it to
the live system giving you a reusable artifact that can be used to deploy to
different systems. This can make it easier to isolate it from other parts of
your system making debugging easier.</p>
</li>
</ul>
<p>The following is a snip of my <code>flake.nix</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> my-inputs <span style="color:#f92672">@</span> {
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    nixpkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    treefmt-nix<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>  }: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>    system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>    host <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;magic&#34;</span>;
</span></span><span style="display:flex;"><span>    userVars <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jr&#34;</span>;
</span></span><span style="display:flex;"><span>      gitUsername <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TSawyer87&#34;</span>;
</span></span><span style="display:flex;"><span>      editor <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hx&#34;</span>;
</span></span><span style="display:flex;"><span>      term <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ghostty&#34;</span>;
</span></span><span style="display:flex;"><span>      keys <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;us&#34;</span>;
</span></span><span style="display:flex;"><span>      browser <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;firefox&#34;</span>;
</span></span><span style="display:flex;"><span>      flake <span style="color:#f92672">=</span> builtins<span style="color:#f92672">.</span>getEnv <span style="color:#e6db74">&#34;HOME&#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/my-nixos&#34;</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    inputs <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>      my-inputs
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">//</span> {
</span></span><span style="display:flex;"><span>        pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> inputs<span style="color:#f92672">.</span>nixpkgs {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>        lib <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>          overlays <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./lib/overlay.nix</span>;
</span></span><span style="display:flex;"><span>          nixOsModules <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./nixos</span>;
</span></span><span style="display:flex;"><span>          homeModules <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./home</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    defaultConfig <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./hosts/magic</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">inherit</span> inputs;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>      packages<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        nixos <span style="color:#f92672">=</span> defaultConfig<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>system<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>toplevel;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># NixOS configuration</span>
</span></span><span style="display:flex;"><span>    nixosConfigurations<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">inherit</span> system;
</span></span><span style="display:flex;"><span>      specialArgs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">inherit</span> inputs system host userVars;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>      modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">./hosts</span><span style="color:#960050;background-color:#1e0010">/$</span>{host}<span style="color:#e6db74">/configuration.nix</span>
</span></span><span style="display:flex;"><span>      ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">}</span></span></span></code></pre></div><ul>
<li>
<p>I didn&rsquo;t want to change the name of <code>inputs</code> and effect other areas of my
config so I first renamed <code>@ inputs</code> to <code>@ my-inputs</code> to make the merged
attribute set use the original <code>inputs</code> name.</p>
</li>
<li>
<p>Note, I&rsquo;m still using home-manager as a module I just had to move it for all
modules to be available inside the artifact built with <code>nix build .#nixos</code></p>
</li>
</ul>
<h2 id="benefits-of-nixosconfiguration-as-a-package">Benefits of nixosConfiguration as a Package</h2>
<p><code>packages.x86_64-linux.nixos = self.nixosConfigurations.magic.config.system.build.toplevel;</code></p>
<ul>
<li>The above expression exposes the <code>toplevel</code> derivation of
<code>nixosConfiguration.magic</code> as a package, which is the complete system closure
of your NixOS configuration.</li>
</ul>
<p>Here is the <code>/hosts/magic/default.nix</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span>{inputs<span style="color:#f92672">,</span> <span style="color:#f92672">...</span>}:
</span></span><span style="display:flex;"><span>inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">inherit</span> (inputs<span style="color:#f92672">.</span>lib) system;
</span></span><span style="display:flex;"><span>  specialArgs <span style="color:#f92672">=</span> {<span style="color:#66d9ef">inherit</span> inputs;};
</span></span><span style="display:flex;"><span>  modules <span style="color:#f92672">=</span> [<span style="color:#e6db74">./configuration.nix</span>];
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>Because we want all modules, not just NixOS modules this requires changing
your <code>configuration.nix</code> to include your home-manager configuration. The core
reason for this is that the <code>packages.nixos</code> output builds a NixOS system, and
home-manager needs to be a part of that system&rsquo;s definition to be included in
the build.</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># configuration.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  inputs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  host<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  system<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  userVars<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}: {
</span></span><span style="display:flex;"><span>  imports <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">./hardware.nix</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">./security.nix</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">./users.nix</span>
</span></span><span style="display:flex;"><span>    inputs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixOsModules
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># inputs.nixos-hardware.nixosModules.common-gpu-amd</span>
</span></span><span style="display:flex;"><span>    inputs<span style="color:#f92672">.</span>nixos-hardware<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>common-cpu-amd
</span></span><span style="display:flex;"><span>    inputs<span style="color:#f92672">.</span>stylix<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>stylix
</span></span><span style="display:flex;"><span>    inputs<span style="color:#f92672">.</span>home-manager<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>home-manager
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Home-Manager Configuration needs to be here for home.packages to be available in the Configuration Package and VM i.e. `nix build .#nixos`</span>
</span></span><span style="display:flex;"><span>  home-manager <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    useGlobalPkgs <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    useUserPackages <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    extraSpecialArgs <span style="color:#f92672">=</span> {<span style="color:#66d9ef">inherit</span> pkgs inputs host system userVars;};
</span></span><span style="display:flex;"><span>    users<span style="color:#f92672">.</span>jr <span style="color:#f92672">=</span> {<span style="color:#f92672">...</span>}: {
</span></span><span style="display:flex;"><span>      imports <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        inputs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>homeModules
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">./home.nix</span>
</span></span><span style="display:flex;"><span>      ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">############################################################################</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  nixpkgs<span style="color:#f92672">.</span>overlays <span style="color:#f92672">=</span> [inputs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>overlays];</span></span></code></pre></div><blockquote>
<p>[!NOTE]: <code>inputs.lib.nixOsModules</code> is equivalent to <code>../../home</code> in my case
and imports all of my nixOS modules. This comes from the <code>flake.nix</code> where I
have <code>nixOsModules = import ./nixos</code> Which looks for a <code>default.nix</code> in the
<code>nixos</code> directory.</p></blockquote>
<p>My <code>~/my-nixos/nixos/default.nix</code> looks like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span>{<span style="color:#f92672">...</span>}: {
</span></span><span style="display:flex;"><span>  imports <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">./drivers</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">./boot.nix</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">./utils.nix</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#..snip..</span>
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h2 id="usage-and-deployment">Usage and Deployment</h2>
<p>To build the package configuration run:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix build <span style="color:#f92672">.</span><span style="color:#75715e">#nixos</span>
</span></span><span style="display:flex;"><span>sudo <span style="color:#e6db74">./result/bin/switch-to-configuration</span> switch</span></span></code></pre></div><h2 id="adding-a-configuration-vm-output">Adding a Configuration VM Output</h2>
<p>Building on what we already have, add this under <code>defaultConfig</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>    defaultConfig <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./hosts/magic</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">inherit</span> inputs;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    vmConfig <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./lib/vms/nixos-vm.nix</span> {
</span></span><span style="display:flex;"><span>      nixosConfiguration <span style="color:#f92672">=</span> defaultConfig;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">inherit</span> inputs;
</span></span><span style="display:flex;"><span>    };</span></span></code></pre></div><p>and under the line <code>nixos = defaultConfig.config.system.build.toplevel</code> add:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>packages<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># build and deploy with `nix build .#nixos`</span>
</span></span><span style="display:flex;"><span>    nixos <span style="color:#f92672">=</span> defaultConfig<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>system<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>toplevel;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Explicitly named Vm Configuration `nix build .#nixos-vm`</span>
</span></span><span style="display:flex;"><span>    nixos-vm <span style="color:#f92672">=</span> vmConfig<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>system<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>vm;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>And in <code>lib/vms/nixos-vm.nix</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># nixos-vm.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  nixosConfiguration<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}:
</span></span><span style="display:flex;"><span>nixosConfiguration<span style="color:#f92672">.</span>extendModules {
</span></span><span style="display:flex;"><span>  modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    (
</span></span><span style="display:flex;"><span>      {pkgs<span style="color:#f92672">,</span> <span style="color:#f92672">...</span>}: {
</span></span><span style="display:flex;"><span>        virtualisation<span style="color:#f92672">.</span>vmVariant <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>          virtualisation<span style="color:#f92672">.</span>forwardPorts <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>              from <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;host&#34;</span>;
</span></span><span style="display:flex;"><span>              host<span style="color:#f92672">.</span>port <span style="color:#f92672">=</span> <span style="color:#ae81ff">2222</span>;
</span></span><span style="display:flex;"><span>              guest<span style="color:#f92672">.</span>port <span style="color:#f92672">=</span> <span style="color:#ae81ff">22</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          ];
</span></span><span style="display:flex;"><span>          imports <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>            inputs<span style="color:#f92672">.</span>nixos-hardware<span style="color:#f92672">.</span>nixosModules<span style="color:#f92672">.</span>common-gpu-amd
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># hydenix-inputs.nixos-hardware.nixosModules.common-cpu-intel</span>
</span></span><span style="display:flex;"><span>          ];
</span></span><span style="display:flex;"><span>          virtualisation <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            memorySize <span style="color:#f92672">=</span> <span style="color:#ae81ff">8192</span>;
</span></span><span style="display:flex;"><span>            cores <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>            diskSize <span style="color:#f92672">=</span> <span style="color:#ae81ff">20480</span>;
</span></span><span style="display:flex;"><span>            qemu <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>              options <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-device virtio-vga-gl&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-display gtk,gl=on,grab-on-hover=on&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-usb -device usb-tablet&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-cpu host&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-enable-kvm&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-machine q35,accel=kvm&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-device intel-iommu&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-device ich9-intel-hda&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-device hda-output&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;-vga none&#34;</span>
</span></span><span style="display:flex;"><span>              ];
</span></span><span style="display:flex;"><span>            };
</span></span><span style="display:flex;"><span>          };
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#! you can set this to skip login for sddm</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># services.displayManager.autoLogin = {</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#   enable = true;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">#   user = &#34;jr&#34;;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># };</span>
</span></span><span style="display:flex;"><span>          services<span style="color:#f92672">.</span>xserver <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            videoDrivers <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>              <span style="color:#e6db74">&#34;virtio&#34;</span>
</span></span><span style="display:flex;"><span>            ];
</span></span><span style="display:flex;"><span>          };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          system<span style="color:#f92672">.</span>stateVersion <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;24.11&#34;</span>;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Enable SSH server</span>
</span></span><span style="display:flex;"><span>        services<span style="color:#f92672">.</span>openssh <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>          enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>          settings <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            PermitRootLogin <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;no&#34;</span>;
</span></span><span style="display:flex;"><span>            PasswordAuthentication <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>          };
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        virtualisation<span style="color:#f92672">.</span>libvirtd<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        environment<span style="color:#f92672">.</span>systemPackages <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> pkgs; [
</span></span><span style="display:flex;"><span>          open-vm-tools
</span></span><span style="display:flex;"><span>          spice-gtk
</span></span><span style="display:flex;"><span>          spice-vdagent
</span></span><span style="display:flex;"><span>          spice
</span></span><span style="display:flex;"><span>        ];
</span></span><span style="display:flex;"><span>        services<span style="color:#f92672">.</span>qemuGuest<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        services<span style="color:#f92672">.</span>spice-vdagentd <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>          enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>        hardware<span style="color:#f92672">.</span>graphics<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Enable verbose logging for home-manager</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># home-manager.verbose = true;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>Uncomment and add your username to auto login.</li>
</ul>
<p>And an <code>apps</code> output that will build and deploy in one step with
<code>nix build .#deploy-nixos</code> I&rsquo;ll show <code>packages</code> and <code>apps</code> outputs for
context:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>   <span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Default package for tools</span>
</span></span><span style="display:flex;"><span>    packages<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      default <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>buildEnv {
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;default-tools&#34;</span>;
</span></span><span style="display:flex;"><span>        paths <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> pkgs; [helix git ripgrep nh];
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># build and deploy with `nix build .#nixos`</span>
</span></span><span style="display:flex;"><span>      nixos <span style="color:#f92672">=</span> defaultConfig<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>system<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>toplevel;
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Explicitly named Vm Configuration `nix build .#nixos-vm`</span>
</span></span><span style="display:flex;"><span>      nixos-vm <span style="color:#f92672">=</span> vmConfig<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>system<span style="color:#f92672">.</span>build<span style="color:#f92672">.</span>vm;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    apps<span style="color:#f92672">.</span><span style="color:#e6db74">${</span>system<span style="color:#e6db74">}</span><span style="color:#f92672">.</span>deploy-nixos <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;app&#34;</span>;
</span></span><span style="display:flex;"><span>      program <span style="color:#f92672">=</span> toString (pkgs<span style="color:#f92672">.</span>writeScript <span style="color:#e6db74">&#34;deploy-nixos&#34;</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        #!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        nix build .#nixos
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        sudo ./result/bin/switch-to-configuration switch
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#39;&#39;</span>);
</span></span><span style="display:flex;"><span>      meta <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Build and deploy NixOS configuration using nix build&#34;</span>;
</span></span><span style="display:flex;"><span>        license <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>licenses<span style="color:#f92672">.</span>mit;
</span></span><span style="display:flex;"><span>        maintainers <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            name <span style="color:#f92672">=</span> userVars<span style="color:#f92672">.</span>gitUsername;
</span></span><span style="display:flex;"><span>            email <span style="color:#f92672">=</span> userVars<span style="color:#f92672">.</span>gitEmail;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        ];
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    };</span></span></code></pre></div><h3 id="debugging">Debugging</h3>
<ul>
<li>Before switching configurations, verify what&rsquo;s inside your built package:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix build .#nixos --dry-run
</span></span><span style="display:flex;"><span>nix build .#nixos-vm --dry-run
</span></span><span style="display:flex;"><span>nix show-derivation .#nixos</span></span></code></pre></div><ul>
<li>Explore the Package Contents</li>
</ul>
<p>Once the build completes, you get a store path like
<code>/nix/store/...-nixos-system</code>. You can explore the contents using:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix path-info -r .#nixos
</span></span><span style="display:flex;"><span>tree ./result
</span></span><span style="display:flex;"><span>ls -lh ./result/bin</span></span></code></pre></div><p>Instead of switching, test components:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix run .#nixos --help
</span></span><span style="display:flex;"><span>nix run .#nixos --version</span></span></code></pre></div><p>Load the flake into the repl:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nixos-rebuild repl --flake .
</span></span><span style="display:flex;"><span>nix-repl&gt; flake.inputs
</span></span><span style="display:flex;"><span>nix-repl&gt; config.fonts.packages
</span></span><span style="display:flex;"><span>nix-repl&gt; config.system.build.toplevel
</span></span><span style="display:flex;"><span>nix-repl&gt; config.services.smartd.enable <span style="color:#75715e"># true/false</span>
</span></span><span style="display:flex;"><span>nix-repl&gt; flake.nixosConfigurations.nixos <span style="color:#75715e"># confirm the built package</span>
</span></span><span style="display:flex;"><span>nix-repl&gt; flake.nixosConfigurations.magic <span style="color:#75715e"># Inspect host-specific config</span></span></span></code></pre></div><ul>
<li>You can make a change to your configuration while in the repl and reload with
<code>:r</code></li>
</ul>
<h3 id="understanding-atomicity">Understanding Atomicity</h3>
<ul>
<li>
<p>Atomicity means that a system update (e.g. changing <code>configuration.nix</code> or a
flake-based <code>toplevel</code> package) either fully succeeds or leaves the system
unchanged, preventing partial or inconsistent states.</p>
</li>
<li>
<p>The <code>toplevel</code> package is the entry point for your entire NixOS system,
including the kernel, initrd, system services, and <code>home-manager</code> settings.</p>
</li>
<li>
<p>Building with <code>nix build .#nixos</code> creates the <code>toplevel</code> derivation upfront,
allowing you to inspect or copy it before activation:</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix build <span style="color:#f92672">.</span><span style="color:#75715e">#nixos</span>
</span></span><span style="display:flex;"><span>ls <span style="color:#960050;background-color:#1e0010">-</span>l result</span></span></code></pre></div><ul>
<li>In contrast, <code>nixos-rebuild switch</code> builds and activates in one step, similar
to <code>cargo run</code> although both do involve the same <code>toplevel</code> derivation.</li>
</ul>
<p>The <code>toplevel</code> package can be copied to another NixOS machine:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix build <span style="color:#f92672">.</span><span style="color:#75715e">#nixos</span>
</span></span><span style="display:flex;"><span>nix copy <span style="color:#e6db74">./result</span> <span style="color:#960050;background-color:#1e0010">--</span>to <span style="color:#e6db74">ssh://jr@server</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or for the vm</span>
</span></span><span style="display:flex;"><span>nix build <span style="color:#f92672">.</span><span style="color:#75715e">#nixos-vm</span>
</span></span><span style="display:flex;"><span>nix copy <span style="color:#f92672">.</span><span style="color:#75715e">#nixos-vm --to ssh://jr@server</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># activate the server</span>
</span></span><span style="display:flex;"><span>ssh jr<span style="color:#f92672">@</span>server
</span></span><span style="display:flex;"><span>sudo <span style="color:#e6db74">/nix/store/...-nixos-system-magic/bin/switch-to-configuration</span> switch</span></span></code></pre></div><ul>
<li>
<p>I got the examples for building your configuration as a package and vm from
the <a href="https://github.com/richen604/hydenix/tree/main?tab=readme-ov-file">hydenix</a>
configuration and adapted them to <a href="https://github.com/saylesss88/flake">my config</a>.</p>
</li>
<li>
<p>I got the examples for building your configuration as a package and vm from
the <a href="https://github.com/richen604/hydenix/tree/main?tab=readme-ov-file">hydenix</a>
configuration and adapted them to <a href="https://github.com/saylesss88/flake">my config</a>.</p>
</li>
</ul>
]]></content:encoded></item><item><title>Conditional_configuration</title><link>https://saylesss88.github.io/posts/conditional_configuration/</link><pubDate>Wed, 14 May 2025 19:21:09 -0400</pubDate><guid>https://saylesss88.github.io/posts/conditional_configuration/</guid><description>&lt;h1 id="conditional-configuration">Conditional Configuration&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#conditional-configuration">Conditional Configuration&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#hyprland-module">Hyprland Module&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wlogout-module">Wlogout Module&lt;/a>&lt;/li>
&lt;li>&lt;a href="#benefits-of-this-approach">Benefits of this Approach&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv5.png"
 alt="gruv5" width="700">
&lt;/figure>

&lt;p>With options it&amp;rsquo;s easy to conditionally install something based on if another
program is enabled in your configuration.&lt;/p>
&lt;h2 id="hyprland-module">Hyprland Module&lt;/h2>
&lt;p>For example, if I have an option to enable or disable hyprland like this:&lt;/p>





&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># hyprland.nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkgs&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lib&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputs&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}: &lt;span style="color:#66d9ef">let&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cfg &lt;span style="color:#f92672">=&lt;/span> config&lt;span style="color:#f92672">.&lt;/span>custom&lt;span style="color:#f92672">.&lt;/span>hyprland;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">in&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options&lt;span style="color:#f92672">.&lt;/span>custom&lt;span style="color:#f92672">.&lt;/span>hyprland &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>mkOption {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>types&lt;span style="color:#f92672">.&lt;/span>bool;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> default &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Enable hyprland module&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>mkIf cfg&lt;span style="color:#f92672">.&lt;/span>enable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> home&lt;span style="color:#f92672">.&lt;/span>packages &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> pkgs; [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># swww&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slurp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wl-clipboard-rs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cliphist
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swappy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ydotool
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wpaperd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wofi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hyprpicker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pavucontrol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blueman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># lxqt.lxqt-policykit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brightnessctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> polkit_gnome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wlr-randr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wtype
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rose-pine-cursor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># nwg-look&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># yad&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># gtk-engine-murrine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .. snip ..&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Since the above module is set to false, it is necessary to add
&lt;code>custom.hyprland.enable = true&lt;/code> to my &lt;code>home.nix&lt;/code> to have Nix add it
to my configuration. And since &lt;code>home.packages&lt;/code> is wrapped in
&lt;code>config = lib.mkIf cfg.enable&lt;/code> Those packages will only be installed
if the module is enabled.&lt;/p></description><content:encoded><![CDATA[<h1 id="conditional-configuration">Conditional Configuration</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#conditional-configuration">Conditional Configuration</a>
<ul>
<li><a href="#hyprland-module">Hyprland Module</a></li>
<li><a href="#wlogout-module">Wlogout Module</a></li>
<li><a href="#benefits-of-this-approach">Benefits of this Approach</a></li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv5.png"
    alt="gruv5" width="700">
</figure>

<p>With options it&rsquo;s easy to conditionally install something based on if another
program is enabled in your configuration.</p>
<h2 id="hyprland-module">Hyprland Module</h2>
<p>For example, if I have an option to enable or disable hyprland like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># hyprland.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  inputs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  cfg <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>custom<span style="color:#f92672">.</span>hyprland;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>  options<span style="color:#f92672">.</span>custom<span style="color:#f92672">.</span>hyprland <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkOption {
</span></span><span style="display:flex;"><span>      type <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>types<span style="color:#f92672">.</span>bool;
</span></span><span style="display:flex;"><span>      default <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>      description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Enable hyprland module&#34;</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>   config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf cfg<span style="color:#f92672">.</span>enable {
</span></span><span style="display:flex;"><span>    home<span style="color:#f92672">.</span>packages <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> pkgs; [
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># swww</span>
</span></span><span style="display:flex;"><span>      grim
</span></span><span style="display:flex;"><span>      slurp
</span></span><span style="display:flex;"><span>      wl-clipboard-rs
</span></span><span style="display:flex;"><span>      cliphist
</span></span><span style="display:flex;"><span>      swappy
</span></span><span style="display:flex;"><span>      ydotool
</span></span><span style="display:flex;"><span>      wpaperd
</span></span><span style="display:flex;"><span>      wofi
</span></span><span style="display:flex;"><span>      hyprpicker
</span></span><span style="display:flex;"><span>      pavucontrol
</span></span><span style="display:flex;"><span>      blueman
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># lxqt.lxqt-policykit</span>
</span></span><span style="display:flex;"><span>      brightnessctl
</span></span><span style="display:flex;"><span>      polkit_gnome
</span></span><span style="display:flex;"><span>      wlr-randr
</span></span><span style="display:flex;"><span>      wtype
</span></span><span style="display:flex;"><span>      rose-pine-cursor
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># nwg-look</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># yad</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># gtk-engine-murrine</span>
</span></span><span style="display:flex;"><span>    ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># .. snip ..</span></span></span></code></pre></div><ul>
<li>
<p>Since the above module is set to false, it is necessary to add
<code>custom.hyprland.enable = true</code> to my <code>home.nix</code> to have Nix add it
to my configuration. And since <code>home.packages</code> is wrapped in
<code>config = lib.mkIf cfg.enable</code> Those packages will only be installed
if the module is enabled.</p>
</li>
<li>
<p>if I used <code>programs.hyprland.enable</code> and added
<code>home.packages = [ pkgs.waybar ];</code> without conditionals, waybar would install
even if hyprland was disabled.</p>
</li>
</ul>
<h2 id="wlogout-module">Wlogout Module</h2>
<p>I can then have my default for something like wlogout be to install only if
the <code>custom.hyprland</code> module is enabled:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># wlogout.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  cfg <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>custom<span style="color:#f92672">.</span>wlogout;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>  options<span style="color:#f92672">.</span>custom<span style="color:#f92672">.</span>wlogout <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkOption {
</span></span><span style="display:flex;"><span>      type <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>types<span style="color:#f92672">.</span>bool;
</span></span><span style="display:flex;"><span>      default <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>custom<span style="color:#f92672">.</span>hyprland<span style="color:#f92672">.</span>enable;
</span></span><span style="display:flex;"><span>      description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Enable wlogout module&#34;</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>    config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf cfg<span style="color:#f92672">.</span>enable {
</span></span><span style="display:flex;"><span>    programs<span style="color:#f92672">.</span>wlogout <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#75715e"># .. snip ..</span></span></span></code></pre></div><ul>
<li>The default value of <code>config.custom.wlogout.enable</code> is set to
<code>config.custom.hyprland.enable</code>. Therefore, if <code>config.custom.hyprland.enable</code>
evaluates to true, the wlogout module will be enabled by default.</li>
</ul>
<h2 id="benefits-of-this-approach">Benefits of this Approach</h2>
<p>The <code>lib.mkIf cfg.enable</code> ensures that wlogout’s configuration
(e.g., enabling <code>programs.wlogout</code>) is only applied when
<code>custom.wlogout.enable = true</code>, which defaults to <code>custom.hyprland.enable</code>.
This means wlogout is enabled by default only if Hyprland is enabled, but
I can override this (e.g., <code>custom.wlogout.enable = true</code> without Hyprland).
This conditional logic prevents wlogout from being installed unnecessarily
when Hyprland is disabled, unlike a simpler approach like <code>programs.wlogout. enable = config.programs.hyprland.enable</code>, which hardcodes the dependency and
offers less flexibility.</p>
]]></content:encoded></item><item><title>Top_level_attributes_explained</title><link>https://saylesss88.github.io/posts/top_level_attributes_explained/</link><pubDate>Wed, 14 May 2025 19:20:34 -0400</pubDate><guid>https://saylesss88.github.io/posts/top_level_attributes_explained/</guid><description>&lt;h1 id="understanding-top-level-attributes-in-nixos-modules">Understanding Top-Level Attributes in NixOS Modules&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#understanding-top-level-attributes-in-nixos-modules">Understanding Top-Level Attributes in NixOS Modules&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#how-options-relate-a-chain-of-influence">How Options Relate: A Chain of Influence&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-nixos-module-system-evaluating-options">The NixOS Module System: Evaluating Options&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-the-module-system-works-a-simplified-overview">How the Module System Works: A Simplified Overview&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv9.png"
 alt="cyber" width="700">
&lt;/figure>

&lt;p>This explanation is based on insights from Infinisil, a prominent figure in the
Nix community, to help clarify the concept of top-level attributes within
NixOS modules.&lt;/p>
&lt;h2 id="the-core-of-a-nixos-system-systembuildtoplevel">The Core of a NixOS System: &lt;code>system.build.toplevel&lt;/code>&lt;/h2>
&lt;p>In a NixOS system, everything is built from a single &amp;ldquo;system derivation.&amp;rdquo; The
command &lt;code>nix-build '&amp;lt;nixpkgs/nixos&amp;gt;' -A system&lt;/code> initiates this build process.&lt;/p></description><content:encoded><![CDATA[<h1 id="understanding-top-level-attributes-in-nixos-modules">Understanding Top-Level Attributes in NixOS Modules</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#understanding-top-level-attributes-in-nixos-modules">Understanding Top-Level Attributes in NixOS Modules</a>
<ul>
<li><a href="#how-options-relate-a-chain-of-influence">How Options Relate: A Chain of Influence</a></li>
<li><a href="#the-nixos-module-system-evaluating-options">The NixOS Module System: Evaluating Options</a></li>
<li><a href="#how-the-module-system-works-a-simplified-overview">How the Module System Works: A Simplified Overview</a></li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv9.png"
    alt="cyber" width="700">
</figure>

<p>This explanation is based on insights from Infinisil, a prominent figure in the
Nix community, to help clarify the concept of top-level attributes within
NixOS modules.</p>
<h2 id="the-core-of-a-nixos-system-systembuildtoplevel">The Core of a NixOS System: <code>system.build.toplevel</code></h2>
<p>In a NixOS system, everything is built from a single &ldquo;system derivation.&rdquo; The
command <code>nix-build '&lt;nixpkgs/nixos&gt;' -A system</code> initiates this build process.</p>
<p>The <code>-A system</code> part tells Nix to focus on the <code>system</code> attribute defined in
the <code>'&lt;nixpkgs/nixos&gt;'</code> file (which is essentially <code>./default.nix</code> within the
Nixpkgs repository).</p>
<p>This <code>system</code> attribute is specifically the NixOS option <code>system.build.toplevel</code>
. Think of <code>system.build.toplevel</code> as the <strong>very top of the configuration
hierarchy</strong> for your entire NixOS system. Almost every setting you configure
eventually influences this top-level derivation, often through a series of
intermediate steps.</p>
<p><strong>Key Takeaway:</strong> <code>system.build.toplevel</code> is the ultimate output that defines your entire NixOS system.</p>
<h2 id="how-options-relate-a-chain-of-influence">How Options Relate: A Chain of Influence</h2>
<p>Options in NixOS are not isolated; they often build upon each other. Here&rsquo;s an example of how a high-level option can lead down to a low-level system configuration:</p>
<ul>
<li>You enable Nginx with <code>services.nginx.enable = true;</code>.</li>
<li>This setting influences the lower-level option <code>systemd.services.nginx</code>.</li>
<li>Which, in turn, affects the even lower-level option
<code>systemd.units.&quot;nginx.service&quot;</code>.</li>
<li>Ultimately, this leads to the creation of a systemd unit file within
<code>environment.etc.&quot;systemd/system&quot;</code>.</li>
<li>Finally, this unit file ends up as <code>result/etc/systemd/system/nginx.service</code>
within the final <code>system.build.toplevel</code> derivation.</li>
</ul>
<p><strong>Key Takeaway:</strong> Higher-level, user-friendly options are translated into
lower-level system configurations that are part of the final system build.</p>
<h2 id="the-nixos-module-system-evaluating-options">The NixOS Module System: Evaluating Options</h2>
<p>So, how do these options get processed and turned into the final system
configuration? That&rsquo;s the job of the <strong>NixOS module system</strong>, located in the
<code>./lib</code> directory of Nixpkgs (specifically in <code>modules.nix</code>, <code>options.nix</code>,
and <code>types.nix</code>).</p>
<p>Interestingly, the module system isn&rsquo;t exclusive to NixOS; you can use it to
manage option sets in your own Nix projects.</p>
<p>Here&rsquo;s a simplified example of using the module system outside of NixOS:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  systemModule <span style="color:#f92672">=</span> { lib<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>    options<span style="color:#f92672">.</span>toplevel <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkOption {
</span></span><span style="display:flex;"><span>      type <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>types<span style="color:#f92672">.</span>str;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    options<span style="color:#f92672">.</span>enableFoo <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkOption {
</span></span><span style="display:flex;"><span>      type <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>types<span style="color:#f92672">.</span>bool;
</span></span><span style="display:flex;"><span>      default <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>toplevel <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      Is foo enabled? </span><span style="color:#e6db74">${</span>lib<span style="color:#f92672">.</span>boolToString config<span style="color:#f92672">.</span>enableFoo<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  userModule <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    enableFoo <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> (<span style="color:#f92672">import</span> <span style="color:#e6db74">&lt;nixpkgs/lib&gt;</span>)<span style="color:#f92672">.</span>evalModules {
</span></span><span style="display:flex;"><span>  modules <span style="color:#f92672">=</span> [ systemModule userModule ];
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><strong>You can evaluate the <code>config.toplevel</code> option from this example using:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-instantiate --eval file.nix -A config.toplevel</span></span></code></pre></div><p><strong>Key Takeaway</strong>: The NixOS module system is responsible for evaluating and
merging option configurations from different modules.</p>
<h2 id="how-the-module-system-works-a-simplified-overview">How the Module System Works: A Simplified Overview</h2>
<p>The module system processes a set of &ldquo;modules&rdquo; through these general steps:</p>
<ol>
<li>
<p><strong>Importing Modules</strong>: It recursively finds and includes all modules
specified in <code>imports = [ ... ];</code> statements.</p>
</li>
<li>
<p><strong>Declaring Options</strong>: It collects all option declarations defined using
<code>options = { ... };</code> from all the modules and merges them. If the same option
is declared in multiple modules, the module system handles this
(details omitted for simplicity).</p>
</li>
<li>
<p><strong>Defining Option Values</strong>: For each declared option, it gathers all the
value assignments (defined using <code>config = { ... };</code> or directly at the top
level if no <code>options</code> or <code>config</code> are present) from all modules and merges
them according to the option&rsquo;s defined type.</p>
</li>
</ol>
<blockquote>
<p><strong>Important Note</strong>: Option evaluation is lazy, meaning an option&rsquo;s value is
only computed when it&rsquo;s actually needed. It can also depend on the values of
other options.</p></blockquote>
<p><strong>Key Takeaway</strong>: The module system imports, declares, and then evaluates
option values from various modules to build the final configuration.</p>
<p><strong>Top-Level Attributes in a Module: <code>imports</code>, <code>options</code>, and <code>config</code></strong></p>
<p>Within a NixOS module (the files that define parts of your system configuration)
, the attributes defined directly at the top level of the module&rsquo;s function
have specific meanings:</p>
<ul>
<li>
<p><code>imports</code>: This attribute is a list of other module files to include. Their
options and configurations will also be part of the evaluation.</p>
</li>
<li>
<p><code>options</code>: This attribute is where you declare new configuration options. You
define their type, default value, description, etc., using functions like
<code>lib.mkOption</code> or <code>lib.mkEnableOption</code>.</p>
</li>
<li>
<p><code>config</code>: This attribute is where you assign values to the options that have
been declared (either in the current module or in imported modules).</p>
</li>
</ul>
<p><strong>Key Takeaway</strong>: The top-level attributes <code>imports</code>, <code>options</code>, and <code>config</code>
are the primary ways to structure a NixOS module.</p>
<p><strong>The Rule: Move Non-Option Attributes Under <code>config</code></strong></p>
<p>If you define either an <code>options</code> or a <code>config</code> attribute at the top level of
your module, any other attributes that are not option declarations must be
moved inside the config attribute.</p>
<p>Let&rsquo;s look at an example of what not to do:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }:
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>imports <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Defining an option at the top level</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>options<span style="color:#f92672">.</span>mine<span style="color:#f92672">.</span>desktop<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkEnableOption <span style="color:#e6db74">&#34;desktop settings&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This will cause an error because &#39;environment&#39; and &#39;appstream&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># are not &#39;options&#39; and &#39;config&#39; is also present at the top level.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>environment<span style="color:#f92672">.</span>systemPackages <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>lib<span style="color:#f92672">.</span>mkIf config<span style="color:#f92672">.</span>appstream<span style="color:#f92672">.</span>enable [ pkgs<span style="color:#f92672">.</span>git ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>appstream<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>This will result in the error: <code>error: Module has an unsupported attribute 'appstream' This is caused by introducing a top-level 'config' or 'options' attribute. Add configuration attributes immediately on the top level instead, or move all of them into the explicit 'config' attribute</code>.</p>
<p><strong>Key Takeaway</strong>: When you have <code>options</code> or <code>config</code> at the top level, all
value assignments need to go inside the config block.</p>
<p><strong>The Correct Way</strong>): Using the <code>config</code> Attribute</p>
<p>To fix the previous example, you need to move the value assignments for
<code>environment.systemPackages</code> and <code>appstream.enable</code> inside the config attribute:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }:
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>imports <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Defining an option at the top level</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>options<span style="color:#f92672">.</span>mine<span style="color:#f92672">.</span>desktop<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkEnableOption <span style="color:#e6db74">&#34;desktop settings&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>config <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>environment<span style="color:#f92672">.</span>systemPackages <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>lib<span style="color:#f92672">.</span>mkIf config<span style="color:#f92672">.</span>appstream<span style="color:#f92672">.</span>enable [ pkgs<span style="color:#f92672">.</span>git ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    appstream<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>Now, Nix knows that you are declaring an option (<code>options.mine.desktop.enable</code>)
and then setting values for other options (<code>environment.systemPackages</code>,
<code>appstream.enable</code>) within the <code>config</code> block.</p>
<p><strong>Key Takeaway</strong>: The <code>config</code> attribute is used to define the values of
options.</p>
<p><strong>Implicit <code>config</code>: When <code>options</code> is Absent</strong></p>
<p>If your module does not define either <code>options</code> or <code>config</code> at the top level,
then any attributes you define directly at the top level are implicitly
treated as being part of the config.</p>
<p>For example, this is valid:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }:
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>environment<span style="color:#f92672">.</span>systemPackages <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>lib<span style="color:#f92672">.</span>mkIf config<span style="color:#f92672">.</span>appstream<span style="color:#f92672">.</span>enable [ pkgs<span style="color:#f92672">.</span>git ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>appstream<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>Nix will implicitly understand that <code>environment.systemPackages</code> and
<code>appstream.enable</code> are configuration settings.</p>
<p><strong>Key Takeaway</strong>: If no explicit options or config are present, top-level
attributes are automatically considered part of the configuration.</p>
<p><strong>Removing an Option: What Happens to <code>config</code></strong></p>
<p>Even if you remove the <code>options</code> declaration from a module that has a <code>config</code>
section, the <code>config = { environment.systemPackages = ... };</code> part will still
function correctly, assuming the option it&rsquo;s referencing (<code>appstream.enable</code>
in this case) is defined elsewhere (e.g., in an imported module).</p>
<p><strong>Key Takeaway</strong>: The <code>config</code> section defines values for options, regardless
of whether those options are declared in the same module.</p>
]]></content:encoded></item><item><title>Nix_flakes_explained</title><link>https://saylesss88.github.io/posts/nix_flakes_explained/</link><pubDate>Wed, 14 May 2025 19:19:51 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_flakes_explained/</guid><description>&lt;h1 id="nix-flakes-explained">Nix Flakes Explained&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#nix-flakes-explained">Nix Flakes Explained&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#what-is-a-nix-flake">What is a Nix Flake?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#key-concepts">Key Concepts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#attribute-sets-the-building-blocks">Attribute Sets: The Building Blocks&lt;/a> - &lt;a href="#further-resources">Further Resources&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="%27/images/gruv2.png%27"
 alt="gruv-worker" width="700">
&lt;/figure>

&lt;p>This explanation highlights common areas of confusion for those new to Nix
Flakes, aiming to clarify concepts rather than serve as a comprehensive guide.&lt;/p>
&lt;h2 id="what-is-a-nix-flake">What is a Nix Flake?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>At its core, a flake is a source tree (like a Git repository) that contains
a &lt;code>flake.nix&lt;/code> file. This file provides a standardized way to access Nix
artifacts such as packages and modules.&lt;/p></description><content:encoded><![CDATA[<h1 id="nix-flakes-explained">Nix Flakes Explained</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#nix-flakes-explained">Nix Flakes Explained</a>
<ul>
<li><a href="#what-is-a-nix-flake">What is a Nix Flake?</a></li>
<li><a href="#key-concepts">Key Concepts</a></li>
<li><a href="#attribute-sets-the-building-blocks">Attribute Sets: The Building Blocks</a> - <a href="#further-resources">Further Resources</a></li>
</ul>
</li>
</ul>
<figure><img src="%27/images/gruv2.png%27"
    alt="gruv-worker" width="700">
</figure>

<p>This explanation highlights common areas of confusion for those new to Nix
Flakes, aiming to clarify concepts rather than serve as a comprehensive guide.</p>
<h2 id="what-is-a-nix-flake">What is a Nix Flake?</h2>
<ul>
<li>
<p>At its core, a flake is a source tree (like a Git repository) that contains
a <code>flake.nix</code> file. This file provides a standardized way to access Nix
artifacts such as packages and modules.</p>
</li>
<li>
<p>Think of <code>flake.nix</code> as the central entry point of a flake. It not only
defines what the flake produces but also declares its dependencies.</p>
</li>
</ul>
<h2 id="key-concepts">Key Concepts</h2>
<p>** <code>flake.nix</code>: The Heart of a Flake**</p>
<ul>
<li>The <code>flake.nix</code> file is mandatory for any flake. It must contain an attribute
set with at least one required attribute: <code>outputs</code>. It can also optionally
include <code>description</code> and <code>inputs</code>.</li>
<li><strong>Basic Structure:</strong></li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Package description&#34;</span>;
</span></span><span style="display:flex;"><span>  inputs <span style="color:#f92672">=</span> { <span style="color:#75715e">/* Dependencies go here */</span> };
</span></span><span style="display:flex;"><span>  outputs <span style="color:#f92672">=</span> { <span style="color:#75715e">/* What the flake produces */</span> };
</span></span><span style="display:flex;"><span>  nixConfig <span style="color:#f92672">=</span> { <span style="color:#75715e">/* Advanced configuration options */</span> };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h2 id="attribute-sets-the-building-blocks">Attribute Sets: The Building Blocks</h2>
<ul>
<li>
<p>Attribute sets are fundamental in Nix. They are simply collections of
name-value pairs wrapped in curly braces <code>{}</code>.</p>
<ul>
<li>Example:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  my_attrset <span style="color:#f92672">=</span> { foo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bar&#34;</span>; };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>my_attrset<span style="color:#f92672">.</span>foo</span></span></code></pre></div><ul>
<li>Output:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#e6db74">&#34;bar&#34;</span></span></span></code></pre></div></li>
<li>
<p><strong>Top-Level Attributes of a Flake</strong>:</p>
<ul>
<li>Flakes have specific top-level attributes that can be accessed directly
(without dot notation). The most common ones are inputs, outputs,
and nixConfig.</li>
</ul>
</li>
</ul>
<h3 id="anatomy-of-flakenix">Anatomy of <code>flake.nix</code></h3>
<p><strong><code>inputs</code>: Declaring Dependencies</strong></p>
<ul>
<li>
<p>The <strong><code>inputs</code></strong> attribute set specifies the other flakes that your current
flake depends on.</p>
</li>
<li>
<p>Each key in the <strong><code>inputs</code></strong> set is a name you choose for the dependency, and
the value is a reference to that flake (usually a URL or a Git Repo).</p>
</li>
<li>
<p>To access something from a dependency, you generally go through the <code>inputs</code>
attribute (e.g., <code>inputs.helix.packages</code>).</p>
<ul>
<li><strong>Example:</strong> This declares dependencies on the <code>nixpkgs</code> and <code>import-cargo</code>
flakes:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>inputs <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  import-cargo<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:edolstra/import-cargo&#34;</span>;
</span></span><span style="display:flex;"><span>  nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nixpkgs&#34;</span>;
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><ul>
<li>
<p>When Nix evaluates your flake, it fetches and evaluates each input. These
evaluated inputs are then passed as an attribute set to the outputs function,
with the keys matching the names you gave them in the inputs set.</p>
</li>
<li>
<p>The special input self is a reference to the outputs and the source tree of
the current flake itself.</p>
</li>
</ul>
</li>
</ul>
<p><strong><code>outputs</code>: Defining What Your Flake Provides</strong></p>
<ul>
<li>
<p>The <strong><code>outputs</code></strong> attribute defines what your flake makes available. This can
include packages, NixOS modules, development environments (<code>devShells</code>) and
other Nix derivations.</p>
</li>
<li>
<p>Flakes can output arbitrary Nix values. However, certain outputs have
specific meanings for Nix commands and must adhere to particular types
(often derivations, as described in the
<a href="https://nixos.wiki/wiki/Flakes">output schema</a>).</p>
</li>
<li>
<p>You can inspect the outputs of a flake using the command:</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix flake show</span></span></code></pre></div><blockquote>
<p>This command takes a flake URI and displays its outputs in a tree structure,
showing the attribute paths and their corresponding types.</p></blockquote>
<p><strong>Understanding the <code>outputs</code> Function</strong></p>
<ul>
<li>
<p>Beginners often mistakenly think that self and nixpkgs within
<code>outputs = { self, nixpkgs, ... }: { ... }</code> are the outputs themselves.
Instead, they are the <em>input arguments</em> (often called <em>output arguments</em>)
to the outputs function.</p>
</li>
<li>
<p>The outputs function in <code>flake.nix</code> always takes a single argument,
which is an attribute set. The syntax <code>{ self, nixpkgs, ... }</code> is Nix&rsquo;s
way of destructuring this single input attribute set to extract the values
associated with the keys self and nixpkgs.</p>
</li>
</ul>
<p><strong>Referencing the Current Flake</strong> (<code>self</code>)</p>
<ul>
<li>
<p><code>self</code> provides a way to refer back to the current flake from within the
outputs function. You can use it to access other top-level attributes like
inputs (e.g., <code>self.inputs</code>).</p>
</li>
<li>
<p>The outputs function always receives an argument conventionally named self,
which represents the entire flake, including all its top-level attributes.
You&rsquo;ll typically use self to reference things defined within your own flake
(e.g., <code>self.packages.my-package</code>).</p>
</li>
</ul>
<p><strong>Variadic Attributes (&hellip;) and @-patterns</strong></p>
<ul>
<li>
<p>The <code>...</code> syntax in the input arguments of the outputs function indicates
variadic attributes, meaning the input attribute set can contain more
attributes than just those explicitly listed (like <code>self</code> and <code>nixpkgs</code>).</p>
<p><strong>Example:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>mul <span style="color:#f92672">=</span> { a<span style="color:#f92672">,</span> b<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: a <span style="color:#960050;background-color:#1e0010">\</span><span style="color:#f92672">*</span> b;
</span></span><span style="display:flex;"><span>mul { a <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>; b <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>; c <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>; } <span style="color:#75715e"># &#39;c&#39; is an extra attribute</span></span></span></code></pre></div><p>However, you cannot directly access these extra attributes within the
function body unless you use the @-pattern:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>mul <span style="color:#f92672">=</span> s<span style="color:#f92672">@</span>{ a<span style="color:#f92672">,</span> b<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: a _ b _ s<span style="color:#f92672">.</span>c; <span style="color:#75715e"># &#39;s&#39; now refers to the entire input set</span>
</span></span><span style="display:flex;"><span>mul { a <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>; b <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>; c <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>; } <span style="color:#75715e"># Output: 24</span></span></span></code></pre></div><ul>
<li>
<p>When used in the outputs function argument list (e.g.,
<code>outputs = { pkgs, ... } @ inputs)</code>, the @-pattern binds the entire input
attribute set to a name (in this case, <code>inputs</code>) while also allowing you to
destructure specific attributes like pkgs.</p>
</li>
<li>
<p><strong>What <code>outputs = { pkgs, ... } @ inputs: { ... };</code> does:</strong></p>
</li>
</ul>
</li>
</ul>
<ol>
<li>
<p><strong>Destructuring:</strong> It tries to extract the value associated with the key
<code>pkgs</code> from the input attribute set and binds it to the variable <code>pkgs</code>.
The <code>...</code> allows for other keys in the input attribute set to be ignored
during this direct destructuring.</p>
</li>
<li>
<p><strong>Binding the Entire Set:</strong> It binds the entire input attribute set to the
variable inputs.</p>
<ul>
<li>Example <code>flake.nix</code>:</li>
</ul>
</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>inputs<span style="color:#f92672">.</span>nixpkgs<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:NixOS/nixpkgs/nixos-unstable&#34;</span>;
</span></span><span style="display:flex;"><span>inputs<span style="color:#f92672">.</span>home-manager<span style="color:#f92672">.</span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;github:nix-community/home-manager&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>outputs <span style="color:#f92672">=</span> { self<span style="color:#f92672">,</span> nixpkgs<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> } <span style="color:#f92672">@</span> attrs: { <span style="color:#75715e"># A `packages` output for the x86_64-linux platform</span>
</span></span><span style="display:flex;"><span>packages<span style="color:#f92672">.</span>x86_64-linux<span style="color:#f92672">.</span>hello <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>legacyPackages<span style="color:#f92672">.</span>x86_64-linux<span style="color:#f92672">.</span>hello;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># A `nixosConfigurations` output (for a NixOS system named &#34;fnord&#34;)</span>
</span></span><span style="display:flex;"><span>    nixosConfigurations<span style="color:#f92672">.</span>fnord <span style="color:#f92672">=</span> nixpkgs<span style="color:#f92672">.</span>lib<span style="color:#f92672">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>      system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>      specialArgs <span style="color:#f92672">=</span> attrs;
</span></span><span style="display:flex;"><span>      modules <span style="color:#f92672">=</span> [ <span style="color:#e6db74">./configuration.nix</span> ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><strong>Platform Specificity in Outputs</strong></p>
<ul>
<li>Flakes ensure that their outputs are consistent across different evaluation
environments. Therefore, any package-related output must explicitly specify
the target platform (a combination of architecture and OS, <code>x86_64-linux</code>).</li>
</ul>
<p><strong>legacyPackages Explained</strong></p>
<ul>
<li><code>legacyPackages</code> is a way for flakes to interact with the traditional,
less structured package organization of nixpkgs. Instead of packages being
directly at the top level (e.g., <code>pkgs.hello</code>), <code>legacyPackages</code> provides a
platform-aware way to access them within the flake&rsquo;s structured output format
(e.g., <code>nixpkgs.legacyPackages.x86_64-linux.hello</code>). It acts as a bridge
between the flake&rsquo;s expected output structure and nixpkgs&rsquo;s historical
organization.</li>
</ul>
<p><strong>The Sole Argument of outputs</strong></p>
<ul>
<li>It&rsquo;s crucial to remember that the outputs function accepts only one argument,
which is an attribute set. The <code>{ self, nixpkgs, ... }</code> syntax is simply
destructuring that single input attribute set.</li>
</ul>
<p><strong>Outputs of the Flake (Return Value)</strong></p>
<ul>
<li>The outputs of the flake refer to the attribute set that is returned by the
<code>outputs</code> function. This attribute set can contain various named outputs like
<code>packages</code>, <code>nixosConfigurations</code>, <code>devShells</code>, etc.</li>
</ul>
<p><strong>Imports: Including Other Nix Expressions</strong></p>
<ul>
<li>
<p>The <code>import</code> function in Nix is used to evaluate the Nix expression found at
a specified path (usually a file or directory) and return its value.</p>
</li>
<li>
<p>Basic Usage: import <code>./path/to/file.nix</code></p>
</li>
</ul>
<p><strong>Passing Arguments During Import</strong></p>
<ul>
<li>You can also pass an attribute set as an argument to the Nix expression being
imported:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>myHelpers <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./lib/my-helpers.nix</span> { pkgs <span style="color:#f92672">=</span> nixpkgs; };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ... use myHelpers</span></span></span></code></pre></div><ul>
<li>In this case, the Nix expression in <code>./lib/my-helpers.nix</code> is likely a
function that expects an argument (often named <code>pkgs</code> by convention):</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># ./lib/my-helpers.nix</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{ pkgs }:
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>myPackage <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>stdenv<span style="color:#f92672">.</span>mkDerivation {
</span></span><span style="display:flex;"><span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;my-package&#34;</span>; <span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>myPackage</span></span></code></pre></div><ul>
<li>By passing <code>{ pkgs = nixpkgs; }</code> during the import, you are providing the
nixpkgs value from your current <code>flake.nix</code> scope to the pkgs parameter
expected by the code in <code>./lib/my-helpers.nix</code>.</li>
</ul>
<p><strong>Importing Directories (<code>default.nix</code>)</strong></p>
<ul>
<li>When you use import with a path that points to a directory, Nix automatically
looks for a file named <code>default.nix</code> within that directory. If found, Nix
evaluates the expressions within <code>default.nix</code> as if you had specified its
path directly in the import statement.</li>
</ul>
<h4 id="further-resources">Further Resources</h4>
<ul>
<li>
<p><a href="https://serokell.io/blog/practical-nix-flakes">practical-nix-flakes</a></p>
</li>
<li>
<p><a href="https://www.tweag.io/blog/2020-07-31-nixos-flakes/">tweag nix-flakes</a></p>
</li>
<li>
<p><a href="https://nixos.wiki/wiki/Flakes">NixOS-wiki Flakes</a></p>
</li>
<li>
<p><a href="https://nix.dev/concepts/flakes.html">nix.dev flakes</a></p>
</li>
<li>
<p><a href="https://jade.fyi/blog/flakes-arent-real/">flakes-arent-real</a></p>
</li>
<li>
<p><a href="https://mhwombat.codeberg.page/nix-book/#_attribute_set_operations">wombats-book-of-nix</a></p>
</li>
<li>
<p><a href="https://zero-to-nix.com/concepts/flakes/">zero-to-nix flakes</a></p>
</li>
<li>
<p><a href="https://nixos-and-flakes.thiscute.world/">nixos-and-flakes-book</a></p>
</li>
</ul>
]]></content:encoded></item><item><title>Understanding_package_definitions</title><link>https://saylesss88.github.io/posts/understanding_package_definitions/</link><pubDate>Wed, 14 May 2025 19:19:10 -0400</pubDate><guid>https://saylesss88.github.io/posts/understanding_package_definitions/</guid><description>&lt;h1 id="understanding-package-definitions-in-nix">Understanding Package Definitions in Nix&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#understanding-package-definitions-in-nix">Understanding Package Definitions in Nix&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-journey-from-definition-to-package">The Journey from Definition to Package&lt;/a>&lt;/li>
&lt;li>&lt;a href="#skeleton-of-a-derivation">Skeleton of a Derivation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-a-simple-hello-package-definition">Example: A Simple &amp;ldquo;Hello&amp;rdquo; Package Definition&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#swaytools-package-definition">Swaytools Package Definition&lt;/a>&lt;/li>
&lt;li>&lt;a href="#resources">Resources&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv1.png"
 alt="gruvvy-bedroom" width="700">
&lt;/figure>

&lt;p>In Nix, the concept of a &lt;strong>package&lt;/strong> can refer to two things:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A collection of files and data that constitute a piece of software or an
artifact.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A Nix &lt;strong>expression&lt;/strong> that describes how to create such a collection. This
expression acts as a blueprint before the package exists in a tangible form.&lt;/p></description><content:encoded><![CDATA[<h1 id="understanding-package-definitions-in-nix">Understanding Package Definitions in Nix</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#understanding-package-definitions-in-nix">Understanding Package Definitions in Nix</a>
<ul>
<li><a href="#the-journey-from-definition-to-package">The Journey from Definition to Package</a></li>
<li><a href="#skeleton-of-a-derivation">Skeleton of a Derivation</a></li>
<li><a href="#example-a-simple-hello-package-definition">Example: A Simple &ldquo;Hello&rdquo; Package Definition</a>
<ul>
<li><a href="#swaytools-package-definition">Swaytools Package Definition</a></li>
<li><a href="#resources">Resources</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv1.png"
    alt="gruvvy-bedroom" width="700">
</figure>

<p>In Nix, the concept of a <strong>package</strong> can refer to two things:</p>
<ul>
<li>
<p>A collection of files and data that constitute a piece of software or an
artifact.</p>
</li>
<li>
<p>A Nix <strong>expression</strong> that describes how to create such a collection. This
expression acts as a blueprint before the package exists in a tangible form.</p>
</li>
</ul>
<p>The process begins with writing a <strong>package definition</strong> using the Nix language.
This definition contains the necessary instructions and metadata about the
software you intend to &ldquo;package.&rdquo;</p>
<h2 id="the-journey-from-definition-to-package">The Journey from Definition to Package</h2>
<ol>
<li>
<p><strong>Package Definition:</strong></p>
<ul>
<li>
<p>This is essentially a function written in the Nix language.</p>
</li>
<li>
<p>Nix language shares similarities with JSON but includes the crucial
addition of functions.</p>
</li>
<li>
<p>It acts as the blueprint for creating a package.</p>
</li>
</ul>
</li>
<li>
<p><strong>Derivation:</strong></p>
<ul>
<li>
<p>When the package definition is evaluated by Nix, it results in
a <strong>derivation</strong>.</p>
</li>
<li>
<p>A derivation is a concrete and detailed build plan.</p>
</li>
<li>
<p>It outlines the exact steps Nix needs to take: fetching source code,
building dependencies, compiling code, and ultimately producing the
desired output (the package).</p>
</li>
</ul>
</li>
<li>
<p><strong>Realization (Building the Package):</strong></p>
<ul>
<li>
<p>You don&rsquo;t get a pre-built &ldquo;package&rdquo; directly from the definition or the
derivation.</p>
</li>
<li>
<p>The package comes into being when Nix <strong>executes</strong> the derivation. This
process is often referred to as &ldquo;realizing&rdquo; the derivation.</p>
</li>
</ul>
</li>
</ol>
<p><strong>Analogy:</strong> Think of a package definition as an architectural blueprint, the
derivation as the detailed construction plan, and the realized package as the
finished building.</p>
<h2 id="skeleton-of-a-derivation">Skeleton of a Derivation</h2>
<p>The most basic derivation structure in Nix looks like this:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ stdenv }:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stdenv<span style="color:#f92672">.</span>mkDerivation { }</span></span></code></pre></div><ul>
<li>
<p>This is a function that expects an attribute set containing <code>stdenv</code> as its
argument.</p>
</li>
<li>
<p>It then calls <code>stdenv.mkDerivation</code> (a function provided by <code>stdenv</code>) to
produce a derivation.</p>
</li>
<li>
<p>Currently, this derivation doesn&rsquo;t specify any build steps or outputs.</p>
</li>
<li>
<p>Further Reading:</p>
</li>
<li>
<p><a href="https://ryantm.github.io/nixpkgs/stdenv/stdenv/">The Standard Environment</a></p>
</li>
<li>
<p><a href="https://nixos.org/guides/nix-pills/19-fundamentals-of-stdenv.html">Fundamentals of Stdenv</a></p>
</li>
</ul>
<h2 id="example-a-simple-hello-package-definition">Example: A Simple &ldquo;Hello&rdquo; Package Definition</h2>
<p>Here&rsquo;s a package definition for the classic &ldquo;hello&rdquo; program:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># hello.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  stdenv<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  fetchzip<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>}:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stdenv<span style="color:#f92672">.</span>mkDerivation {
</span></span><span style="display:flex;"><span>  pname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello&#34;</span>;
</span></span><span style="display:flex;"><span>  version <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;2.12.1&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  src <span style="color:#f92672">=</span> fetchzip {
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;[https://ftp.gnu.org/gnu/hello/hello-2.12.1.tar.gz](https://ftp.gnu.org/gnu/hello/hello-2.12.1.tar.gz)&#34;</span>;
</span></span><span style="display:flex;"><span>    sha256 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>This is a Nix function that takes stdenv and fetchzip as arguments.</p>
</li>
<li>
<p>It uses <code>stdenv.mkDerivation</code> to define the build process for the &ldquo;hello&rdquo;
package.</p>
<ul>
<li>
<p><code>pname</code>: The package name.</p>
</li>
<li>
<p><code>version</code>: The package version.</p>
</li>
<li>
<p><code>src</code>: Specifies how to fetch the source code using <code>fetchzip</code>.</p>
</li>
</ul>
</li>
</ul>
<p><strong>Handling Dependencies: Importing Nixpkgs</strong></p>
<ul>
<li>
<p>If you try to build <code>hello.nix</code> directly with <code>nix-build hello.nix</code>, it will
fail because <code>stdenv</code> and <code>fetchzip</code> are part of Nixpkgs, which isn&rsquo;t included
in this isolated file.</p>
</li>
<li>
<p>To make this package definition work, you need to pass the correct arguments
(<code>stdenv</code>, <code>fetchzip</code>) to the function.</p>
</li>
</ul>
<p>The recommended approach is to create a <code>default.nix</code> file in the same
directory:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  nixpkgs <span style="color:#f92672">=</span> fetchTarball <span style="color:#e6db74">&#34;[https://github.com/NixOS/nixpkgs/tarball/nixos-24.05](https://github.com/NixOS/nixpkgs/tarball/nixos-24.05)&#34;</span>;
</span></span><span style="display:flex;"><span>  pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> nixpkgs { config <span style="color:#f92672">=</span> {}; overlays <span style="color:#f92672">=</span> []; };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  hello <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>callPackage <span style="color:#e6db74">./hello.nix</span> { };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>This <code>default.nix</code> imports Nixpkgs.</p>
</li>
<li>
<p>It then uses <code>pkgs.callPackage</code> to call the function in <code>hello.nix</code>, passing
the necessary dependencies from Nixpkgs.</p>
</li>
<li>
<p>You can now build the &ldquo;hello&rdquo; package using: <code>nix-build -A hello</code>. The
<code>-A</code> flag tells Nix to build the attribute named hello from the top-level
expression in default.nix.</p>
</li>
</ul>
<p><strong>Realizing the Derivation and Handling sha256</strong></p>
<ul>
<li>
<p><strong>Evaluation vs. Realization</strong>: While &ldquo;evaluate&rdquo; refers to Nix processing an
expression, &ldquo;realize&rdquo; often specifically means building a derivation and
producing its output in the Nix store.</p>
</li>
<li>
<p>When you first run <code>nix-build -A hello</code>, it will likely fail due to a missing
sha256 hash for the source file. Nix needs this hash for security and
reproducibility. The error message will provide the correct sha256 value.</p>
</li>
<li>
<p><strong>Example Error</strong>):</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>  nix-build -A hello
</span></span><span style="display:flex;"><span>  error: hash mismatch in fixed-output derivation <span style="color:#e6db74">&#39;/nix/store/pd2kiyfa0c06giparlhd1k31bvllypbb-source.drv&#39;</span>:
</span></span><span style="display:flex;"><span>  specified: sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  got: sha256-1kJjhtlsAkpNB7f6tZEs+dbKd8z7KoNHyDHEJ0tmhnc<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  error: <span style="color:#ae81ff">1</span> dependencies of derivation <span style="color:#e6db74">&#39;/nix/store/b4mjwlv73nmiqgkdabsdjc4zq9gnma1l-hello-2.12.1.drv&#39;</span> failed to build</span></span></code></pre></div><ul>
<li>Replace the empty <code>sha256 = &quot;&quot;;</code> in <code>hello.nix</code> with the provided correct
value: <code>sha256 = &quot;1kJjhtlsAkpNB7f6tZEs+dbKd8z7KoNHyDHEJ0tmhnc=&quot;;</code>.</li>
</ul>
<p><strong>Building and Running the Result</strong></p>
<p>After updating the <code>sha256</code>, you can successfully build the package:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-build -A hello</span></span></code></pre></div><p>The output will be a result symlink pointing to the built package in the Nix
store. You can then run the &ldquo;hello&rdquo; program:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./result/bin/hello
</span></span><span style="display:flex;"><span>Hello, world!</span></span></code></pre></div><h3 id="swaytools-package-definition">Swaytools Package Definition</h3>
<p><strong>Example: The swaytools Package Definition</strong></p>
<p>Let&rsquo;s examine a more complex, real-world package definition from Nixpkgs:
<code>nixpkgs/pkgs/tools/wayland/swaytools/default.nix</code>.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  setuptools<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  buildPythonApplication<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  fetchFromGitHub<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  slurp<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>}:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buildPythonApplication <span style="color:#66d9ef">rec</span> {
</span></span><span style="display:flex;"><span>  pname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;swaytools&#34;</span>;
</span></span><span style="display:flex;"><span>  version <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0.1.2&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  format <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pyproject&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  src <span style="color:#f92672">=</span> fetchFromGitHub {
</span></span><span style="display:flex;"><span>    owner <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tmccombs&#34;</span>;
</span></span><span style="display:flex;"><span>    repo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;swaytools&#34;</span>;
</span></span><span style="display:flex;"><span>    rev <span style="color:#f92672">=</span> version;
</span></span><span style="display:flex;"><span>    sha256 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sha256-UoWK53B1DNmKwNLFwJW1ZEm9dwMOvQeO03+RoMl6M0Q=&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  nativeBuildInputs <span style="color:#f92672">=</span> [ setuptools ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  propagatedBuildInputs <span style="color:#f92672">=</span> [ slurp ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  meta <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> lib; {
</span></span><span style="display:flex;"><span>    homepage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://github.com/tmccombs/swaytools&#34;</span>;
</span></span><span style="display:flex;"><span>    description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Collection of simple tools for sway (and i3)&#34;</span>;
</span></span><span style="display:flex;"><span>    license <span style="color:#f92672">=</span> licenses<span style="color:#f92672">.</span>gpl3Only;
</span></span><span style="display:flex;"><span>    maintainers <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> maintainers; [ atila ];
</span></span><span style="display:flex;"><span>    platforms <span style="color:#f92672">=</span> platforms<span style="color:#f92672">.</span>linux;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h3 id="breakdown-of-the-above-defaultnix">Breakdown of the Above default.nix</h3>
<p>1 <strong>Function Structure</strong>:</p>
<ul>
<li>The file starts with a function taking an attribute set of dependencies from
Nixpkgs: <code>{ lib, setuptools, buildPythonApplication, fetchFromGitHub, slurp }</code>
:.</li>
</ul>
<ol start="2">
<li><strong>Derivation Creation</strong>:</li>
</ol>
<ul>
<li>It calls <code>buildPythonApplication</code>, a specialized helper for Python packages
(similar to <code>stdenv.mkDerivation</code> but pre-configured for Python). The <code>rec</code>
keyword allows attributes within the derivation to refer to each other.</li>
</ul>
<ol start="3">
<li><strong>Package Metadata</strong>:</li>
</ol>
<ul>
<li>
<p><code>pname</code> and <code>version</code> define the package&rsquo;s name and version.</p>
</li>
<li>
<p>The <code>meta</code> attribute provides standard package information like the homepage,
description, license, maintainers, and supported platforms.</p>
</li>
</ul>
<ol start="4">
<li><strong>Source Specification</strong>:</li>
</ol>
<ul>
<li>The <code>src</code> attribute uses <code>fetchFromGitHub</code> to download the source code from
the specified repository and revision, along with its <code>sha256</code> hash for
verification.</li>
</ul>
<ol start="5">
<li><strong>Build and Runtime Dependencies</strong>:</li>
</ol>
<ul>
<li>
<p><code>nativeBuildInputs</code>: Lists tools required during the build process (e.g.,
<code>setuptools</code> for Python).</p>
</li>
<li>
<p><code>propagatedBuildInputs</code>: Lists dependencies needed at runtime (e.g., <code>slurp</code>).</p>
</li>
</ul>
<ol start="6">
<li><strong>Build Format</strong>:</li>
</ol>
<ul>
<li><code>format = &quot;pyproject&quot;;</code> indicates that the package uses a <code>pyproject.toml</code>
file for its Python build configuration.</li>
</ul>
<p><strong>Integration within Nixpkgs</strong></p>
<ul>
<li>
<p><strong>Location</strong>: The swaytools definition resides in
<code>pkgs/tools/wayland/swaytools/default.nix</code>.</p>
</li>
<li>
<p><strong>Top-Level Inclusion</strong>: It&rsquo;s made available as a top-level package in
<code>pkgs/top-level/all-packages.nix</code> like this:</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># all-packages.nix</span>
</span></span><span style="display:flex;"><span>swaytools <span style="color:#f92672">=</span> python3Packages<span style="color:#f92672">.</span>callPackage <span style="color:#e6db74">../tools/wayland/swaytools</span> { };</span></span></code></pre></div><ul>
<li><code>python3Packages.callPackage</code> is used here because <code>swaytools</code> is a Python
package, and it ensures the necessary Python-related dependencies are
correctly passed to the <code>swaytools</code> definition.</li>
</ul>
<h3 id="resources">Resources</h3>
<ul>
<li><a href="https://nix.dev/tutorials/packaging-existing-software.html">Packaging Existing Software</a></li>
</ul>
]]></content:encoded></item><item><title>Nix_repl_tips</title><link>https://saylesss88.github.io/posts/nix_repl_tips/</link><pubDate>Wed, 14 May 2025 19:18:13 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_repl_tips/</guid><description>&lt;h1 id="nix-repl-list-available-commands">Nix Repl List available commands&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#nix-repl-list-available-commands">Nix Repl List available commands&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#load-nix-expressions-directly">Load Nix expressions Directly&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#load-flakes">Load Flakes&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#debugging-with-a-flake-repl-output">Debugging with a Flake REPL output&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#usage">Usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#debugging">Debugging&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv11.png"
 alt="gruv11" width="700">
&lt;/figure>

&lt;p>List available commands with &lt;code>:?&lt;/code>:&lt;/p>





&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>nix repl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nix &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#ae81ff">.24.11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type :&lt;span style="color:#f92672">?&lt;/span> for help&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nix-repl&lt;span style="color:#f92672">&amp;gt;&lt;/span> :&lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The following commands are available:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Evaluate and print expression
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;lt;x&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Bind expression to variable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :a&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :add &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Add attributes from resulting set to scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :b &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build a derivation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :bl &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build a derivation&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> creating GC roots in the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> working directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :e&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :edit &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Open package or function in &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>EDITOR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :i &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build derivation&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> install result into
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current profile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :l&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :load &lt;span style="color:#e6db74">&amp;lt;path&amp;gt;&lt;/span> Load Nix expression and add it to scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :lf&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :load-flake &lt;span style="color:#e6db74">&amp;lt;ref&amp;gt;&lt;/span> Load Nix flake and add it to scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :p&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :print &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Evaluate and print expression recursively
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Strings are printed directly&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> without escaping&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :q&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :quit Exit nix-repl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :r&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :reload Reload all files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :sh &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build dependencies of derivation&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nix-shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :t &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Describe result of evaluation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :u &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build derivation&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> start nix-shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :doc &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Show documentation of a builtin function
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :log &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Show logs for a derivation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :te&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :trace-enable [bool] Enable&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> disable or toggle showing traces for
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :&lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :help Brings up this help menu&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="load-nix-expressions-directly">Load Nix expressions Directly&lt;/h2>
&lt;p>You can quickly evaluate a random Nix expression:&lt;/p></description><content:encoded><![CDATA[<h1 id="nix-repl-list-available-commands">Nix Repl List available commands</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#nix-repl-list-available-commands">Nix Repl List available commands</a>
<ul>
<li><a href="#load-nix-expressions-directly">Load Nix expressions Directly</a>
<ul>
<li><a href="#load-flakes">Load Flakes</a></li>
</ul>
</li>
<li><a href="#debugging-with-a-flake-repl-output">Debugging with a Flake REPL output</a>
<ul>
<li><a href="#usage">Usage</a></li>
<li><a href="#debugging">Debugging</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><img src="/images/gruv11.png"
    alt="gruv11" width="700">
</figure>

<p>List available commands with <code>:?</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix repl
</span></span><span style="display:flex;"><span>Nix <span style="color:#ae81ff">2</span><span style="color:#ae81ff">.24.11</span>
</span></span><span style="display:flex;"><span>Type :<span style="color:#f92672">?</span> for help<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> :<span style="color:#f92672">?</span>
</span></span><span style="display:flex;"><span>The following commands are available:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&lt;expr&gt;</span>                       Evaluate and print expression
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&lt;x&gt;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;expr&gt;</span>                 Bind expression to variable
</span></span><span style="display:flex;"><span>  :a<span style="color:#960050;background-color:#1e0010">,</span> :add <span style="color:#e6db74">&lt;expr&gt;</span>              Add attributes from resulting set to scope
</span></span><span style="display:flex;"><span>  :b <span style="color:#e6db74">&lt;expr&gt;</span>                    Build a derivation
</span></span><span style="display:flex;"><span>  :bl <span style="color:#e6db74">&lt;expr&gt;</span>                   Build a derivation<span style="color:#960050;background-color:#1e0010">,</span> creating GC roots in the
</span></span><span style="display:flex;"><span>                               working directory
</span></span><span style="display:flex;"><span>  :e<span style="color:#960050;background-color:#1e0010">,</span> :edit <span style="color:#e6db74">&lt;expr&gt;</span>             Open package or function in <span style="color:#960050;background-color:#1e0010">$</span>EDITOR
</span></span><span style="display:flex;"><span>  :i <span style="color:#e6db74">&lt;expr&gt;</span>                    Build derivation<span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#66d9ef">then</span> install result into
</span></span><span style="display:flex;"><span>                               current profile
</span></span><span style="display:flex;"><span>  :l<span style="color:#960050;background-color:#1e0010">,</span> :load <span style="color:#e6db74">&lt;path&gt;</span>             Load Nix expression and add it to scope
</span></span><span style="display:flex;"><span>  :lf<span style="color:#960050;background-color:#1e0010">,</span> :load-flake <span style="color:#e6db74">&lt;ref&gt;</span>       Load Nix flake and add it to scope
</span></span><span style="display:flex;"><span>  :p<span style="color:#960050;background-color:#1e0010">,</span> :print <span style="color:#e6db74">&lt;expr&gt;</span>            Evaluate and print expression recursively
</span></span><span style="display:flex;"><span>                               Strings are printed directly<span style="color:#960050;background-color:#1e0010">,</span> without escaping<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>  :q<span style="color:#960050;background-color:#1e0010">,</span> :quit                    Exit nix-repl
</span></span><span style="display:flex;"><span>  :r<span style="color:#960050;background-color:#1e0010">,</span> :reload                  Reload all files
</span></span><span style="display:flex;"><span>  :sh <span style="color:#e6db74">&lt;expr&gt;</span>                   Build dependencies of derivation<span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#66d9ef">then</span> start
</span></span><span style="display:flex;"><span>                               nix-shell
</span></span><span style="display:flex;"><span>  :t <span style="color:#e6db74">&lt;expr&gt;</span>                    Describe result of evaluation
</span></span><span style="display:flex;"><span>  :u <span style="color:#e6db74">&lt;expr&gt;</span>                    Build derivation<span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#66d9ef">then</span> start nix-shell
</span></span><span style="display:flex;"><span>  :doc <span style="color:#e6db74">&lt;expr&gt;</span>                  Show documentation of a builtin function
</span></span><span style="display:flex;"><span>  :log <span style="color:#e6db74">&lt;expr&gt;</span>                  Show logs for a derivation
</span></span><span style="display:flex;"><span>  :te<span style="color:#960050;background-color:#1e0010">,</span> :trace-enable [bool]    Enable<span style="color:#960050;background-color:#1e0010">,</span> disable or toggle showing traces for
</span></span><span style="display:flex;"><span>                               errors
</span></span><span style="display:flex;"><span>  :<span style="color:#f92672">?</span><span style="color:#960050;background-color:#1e0010">,</span> :help                    Brings up this help menu</span></span></code></pre></div><h2 id="load-nix-expressions-directly">Load Nix expressions Directly</h2>
<p>You can quickly evaluate a random Nix expression:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix repl <span style="color:#960050;background-color:#1e0010">--</span>expr <span style="color:#960050;background-color:#1e0010">&#39;</span>{a <span style="color:#f92672">=</span> { b <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>; c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>; }; }<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Welcome to Nix <span style="color:#ae81ff">2</span><span style="color:#ae81ff">.11.0</span><span style="color:#f92672">.</span> Type :<span style="color:#f92672">?</span> for help<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Loading installable <span style="color:#e6db74">&#39;&#39;...
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Added 1 variables.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">nix-repl&gt; a
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{ b = 3; c = 4; }</span></span></span></code></pre></div><ul>
<li>The <code>--expr</code> flag is helpful to prime directly the Nix REPL with valuable data
or values.</li>
</ul>
<h3 id="load-flakes">Load Flakes</h3>
<p>We can use the <code>--expr</code> flag to load a random Nix Flake directly:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix repl <span style="color:#960050;background-color:#1e0010">--</span>expr <span style="color:#960050;background-color:#1e0010">&#39;</span>builtins<span style="color:#f92672">.</span>getFlake <span style="color:#e6db74">&#34;github:nix-community/ethereum.nix&#34;</span><span style="color:#960050;background-color:#1e0010">&#39;</span></span></span></code></pre></div><p>Also, you can load a flake directly inside the REPL with <code>:load-flake</code> or <code>:lf</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix repl
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> :lf <span style="color:#e6db74">github:nix-community/home-manager</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> :lf <span style="color:#e6db74">/path/to/your/flake</span></span></span></code></pre></div><h2 id="debugging-with-a-flake-repl-output">Debugging with a Flake REPL output</h2>
<ul>
<li>One way to do this is to launch the repl with <code>nix repl</code> and inside the repl type <code>:lf /path/to/flake</code>. Or <code>nixos-rebuild repl --flake /path/to/flake</code> the latter provides a helpful welcome script showing what is loaded into your repl&rsquo;s scope.</li>
</ul>
<p>I like to create a simple repl output to load your flake into the environment with <code>nix repl .#repl</code>.</p>
<p>First, we&rsquo;ll create a REPL environment to inspect and debug our flake&rsquo;s outputs,packages, and configurations. Define a <code>repl</code> output in <code>flake.nix</code> for easy access with <code>nix repl .#repl</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># flake.nix</span>
</span></span><span style="display:flex;"><span>outputs <span style="color:#f92672">=</span> { self<span style="color:#f92672">,</span> nixpkgs<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> nixpkgs { system <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-linux&#34;</span>; };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>  repl <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./repl.nix</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">inherit</span> (pkgs) lib;
</span></span><span style="display:flex;"><span>    flake <span style="color:#f92672">=</span> self;
</span></span><span style="display:flex;"><span>    pkgs <span style="color:#f92672">=</span> pkgs;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><p>And in <code>repl.nix</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># repl.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  flake<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>}: {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">inherit</span> flake pkgs lib;
</span></span><span style="display:flex;"><span>  configs <span style="color:#f92672">=</span> flake<span style="color:#f92672">.</span>nixosConfigurations;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># inherit (flake.outputs) userVars;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Accepts `lib`, `flake`, `pkgs` from `flake.nix` as arguments</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Attributes: flake: all flake outputs (flake.outputs, flake.inputs)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># run `nix repl .#repl` to load the REPL environment</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :l &lt;nixpkgs&gt;  # load additional Nixpkgs if needed</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p flake.inputs.nixpkgs.rev # nixpkgs revision</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p flake.inputs.home-manager.rev</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># flake.outputs.packages.x86_64-linux.default # inspect default package</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pkgs.helix # access helix package</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># lib.version # check lib version</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># configs.magic.config.environment.systemPackages # list packages</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># configs.magic.config.home-manager.users.jr.home.packages # home packages</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p configs.magic.config.home-manager.users.jr.programs.git.userName</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Debugging</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p builtins.typeOf configs.magic (should be `set`)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p builtins.attrNames configs.magic</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p configs.magic.config # errors indicate issues</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p configs.magic.config.environment # isolate the module or issue</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p builtins.attrNames configs.magic.config.home-manager.users.jr # home attrs</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p configs.magic.config.home-manager.users.jr.programs.git.enable # true/false</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  :p lib.filterAttrs (n: v: lib.hasPrefix &#34;firefox&#34; n) pkgs</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p configs.magic.config.stylix # check theming</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p configs.magic.config.home-manager.users.jr.stylix</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># :p lib.mapAttrsToList (name: cfg: name) configs</span></span></span></code></pre></div><blockquote>
<p>❗: Replace <code>magic</code> with your host name</p></blockquote>
<h3 id="usage">Usage</h3>
<p>Load REPL environment with:
<code>nix repl .#repl</code></p>
<p>Attributes:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> builtins<span style="color:#f92672">.</span>attrNames flake<span style="color:#f92672">.</span>inputs
</span></span><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;dont-track-me&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;helix&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;home-manager&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;hyprland&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;neovim-nightly-overlay&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;nixpkgs&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;nvf&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;rose-pine-hyprcursor&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;stylix&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;treefmt-nix&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;wallpapers&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;wezterm&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;yazi&#34;</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> builtins<span style="color:#f92672">.</span>attrNames flake<span style="color:#f92672">.</span>outputs
</span></span><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;checks&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;devShells&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;formatter&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;nixosConfigurations&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;packages&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;repl&#34;</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> flake<span style="color:#f92672">.</span>outputs<span style="color:#f92672">.</span>formatter
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  x86_64-linux <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">«</span>derivation <span style="color:#e6db74">/nix/store/q71q00wmh1gnjzdrw5nrvwbr6k414036-treefmt.drv</span><span style="color:#960050;background-color:#1e0010">»</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>Inspect the default package output:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> flake<span style="color:#f92672">.</span>outputs<span style="color:#f92672">.</span>packages<span style="color:#f92672">.</span>x86_64-linux<span style="color:#f92672">.</span>default
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">«</span>derivation <span style="color:#e6db74">/nix/store/6kp660mm62saryskpa1f2p6zwfalcx2w-default-tools.drv</span><span style="color:#960050;background-color:#1e0010">»</span></span></span></code></pre></div><ul>
<li>
<p>From here out I&rsquo;ll leave out the <code>nix-repl&gt;</code> prefix just know that it&rsquo;s there.</p>
</li>
<li>
<p>Check lib version(Nixpkgs <code>lib</code> attribute):</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>lib<span style="color:#f92672">.</span>version
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;25.05pre-git&#34;</span></span></span></code></pre></div><ul>
<li>List systemPackages and home.packages, my hostname is <code>magic</code> list yours in its place:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>configs<span style="color:#f92672">.</span>magic<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>environment<span style="color:#f92672">.</span>systemPackages
</span></span><span style="display:flex;"><span><span style="color:#75715e"># list home.packages</span>
</span></span><span style="display:flex;"><span>configs<span style="color:#f92672">.</span>magic<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>home-manager<span style="color:#f92672">.</span>users<span style="color:#f92672">.</span>jr<span style="color:#f92672">.</span>home<span style="color:#f92672">.</span>packages</span></span></code></pre></div><ul>
<li>Or an individual value:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>:p configs<span style="color:#f92672">.</span>magic<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>home-manager<span style="color:#f92672">.</span>users<span style="color:#f92672">.</span>jr<span style="color:#f92672">.</span>programs<span style="color:#f92672">.</span>git<span style="color:#f92672">.</span>userName
</span></span><span style="display:flex;"><span>TSawyer87</span></span></code></pre></div><h3 id="debugging">Debugging</h3>
<ul>
<li>Check if the module system is fully evaluating, anything other than a &ldquo;set&rdquo; the configuration isn&rsquo;t fully evaluated (e.g. &ldquo;lambda&rdquo; might indicate an unevaluated thunk):</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>:p builtins<span style="color:#f92672">.</span>typeOf configs<span style="color:#f92672">.</span>magic
</span></span><span style="display:flex;"><span>set</span></span></code></pre></div><ul>
<li>
<p>Debugging Module System:</p>
</li>
<li>
<p>Check if <code>configs.magic</code> is a valid configuration:</p>
</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>:p builtins<span style="color:#f92672">.</span>attrNames configs<span style="color:#f92672">.</span>magic</span></span></code></pre></div>]]></content:encoded></item><item><title>Understanding_nix_functions</title><link>https://saylesss88.github.io/posts/understanding_nix_functions/</link><pubDate>Wed, 14 May 2025 19:17:32 -0400</pubDate><guid>https://saylesss88.github.io/posts/understanding_nix_functions/</guid><description>&lt;h1 id="understanding-nix-functions">Understanding Nix Functions&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#understanding-nix-functions">Understanding Nix Functions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-single-argument-nature-of-nix-functions">The Single-Argument Nature of Nix Functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#identifying-function-structure-the-colon">Identifying Function Structure The Colon&lt;/a>&lt;/li>
&lt;li>&lt;a href="#function-declarations-single-and-multiple-arguments">Function Declarations Single and &amp;ldquo;Multiple&amp;rdquo; Arguments&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-function-nature-of-nixos-and-home-manager-modules">The Function Nature of NixOS and Home Manager Modules&lt;/a>&lt;/li>
&lt;li>&lt;a href="#resources">Resources&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/nixLogo.png"
 alt="NixFlakeLogo" width="500">
&lt;/figure>

&lt;p>Functions are a fundamental concept in Nix and are prevalent throughout Nix code. Grasping how they work is crucial for understanding and writing Nix expressions.&lt;/p>
&lt;h2 id="the-single-argument-nature-of-nix-functions">The Single-Argument Nature of Nix Functions&lt;/h2>
&lt;p>A key concept to understand is that in Nix, every function conceptually takes &lt;strong>exactly one argument&lt;/strong>. What might appear as multi-argument functions are actually achieved through a technique called &lt;strong>currying&lt;/strong>, where a series of nested single-argument functions are used.&lt;/p></description><content:encoded><![CDATA[<h1 id="understanding-nix-functions">Understanding Nix Functions</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#understanding-nix-functions">Understanding Nix Functions</a>
<ul>
<li><a href="#the-single-argument-nature-of-nix-functions">The Single-Argument Nature of Nix Functions</a></li>
<li><a href="#identifying-function-structure-the-colon">Identifying Function Structure The Colon</a></li>
<li><a href="#function-declarations-single-and-multiple-arguments">Function Declarations Single and &ldquo;Multiple&rdquo; Arguments</a>
<ul>
<li><a href="#the-function-nature-of-nixos-and-home-manager-modules">The Function Nature of NixOS and Home Manager Modules</a></li>
<li><a href="#resources">Resources</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><img src="/images/nixLogo.png"
    alt="NixFlakeLogo" width="500">
</figure>

<p>Functions are a fundamental concept in Nix and are prevalent throughout Nix code. Grasping how they work is crucial for understanding and writing Nix expressions.</p>
<h2 id="the-single-argument-nature-of-nix-functions">The Single-Argument Nature of Nix Functions</h2>
<p>A key concept to understand is that in Nix, every function conceptually takes <strong>exactly one argument</strong>. What might appear as multi-argument functions are actually achieved through a technique called <strong>currying</strong>, where a series of nested single-argument functions are used.</p>
<h2 id="identifying-function-structure-the-colon">Identifying Function Structure The Colon</h2>
<p>The colon (<code>:</code>) acts as a clear separator within a function definition:</p>
<ul>
<li><strong>Left of the Colon:</strong> This is the function&rsquo;s <strong>argument</strong>. It&rsquo;s a placeholder name for a value that will be provided when the function is called.</li>
<li><strong>Right of the Colon:</strong> This is the <strong>function body</strong>. It&rsquo;s the expression that will be evaluated when the function is invoked.</li>
</ul>
<p><strong>Think of function arguments as naming values that aren&rsquo;t known in advance.</strong> These names are placeholders that get filled with specific values when the function is used.</p>
<p><strong>Example:</strong></p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>greet <span style="color:#f92672">=</span> personName: <span style="color:#e6db74">&#34;Hello, </span><span style="color:#e6db74">${</span>personName<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>;</span></span></code></pre></div><ul>
<li>
<p>Here, <code>personName</code> is the <strong>argument</strong> (the placeholder).</p>
</li>
<li>
<p><code>&quot;Hello, ${personName}!&quot;</code>, is the <strong>function body</strong> (the expression that
uses the placeholder).</p>
</li>
</ul>
<p>When you call the function:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>greet <span style="color:#e6db74">&#34;Anonymous&#34;</span>  <span style="color:#75715e"># Evaluates to &#34;Hello, Anonymous!&#34;</span></span></span></code></pre></div><p>The value <code>&quot;Anonymous&quot;</code> is substituted for the <code>personName</code> placeholder within
the function body.</p>
<h2 id="function-declarations-single-and-multiple-arguments">Function Declarations Single and &ldquo;Multiple&rdquo; Arguments</h2>
<p><strong>Single-Argument Functions</strong></p>
<p>The simplest form of a Nix function takes a single argument:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>inc <span style="color:#f92672">=</span> x: x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>inc <span style="color:#ae81ff">5</span>  <span style="color:#75715e"># Evaluates to 6</span></span></span></code></pre></div><ul>
<li>
<p><code>x</code> is the argument.</p>
</li>
<li>
<p><code>x + 1</code> is the function body.</p>
</li>
</ul>
<p><strong>Simulating Multiple Arguments: Currying</strong></p>
<p>To create functions that appear to take multiple arguments, Nix uses currying.
This involves nesting single-argument functions, where each function takes one
argument and returns another function that takes the next argument, and so on.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>concat <span style="color:#f92672">=</span> x: y: x <span style="color:#f92672">+</span> y;
</span></span><span style="display:flex;"><span>concat <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">6</span>    <span style="color:#75715e"># Evaluates to 12</span></span></span></code></pre></div><p>Nix interprets the colons as separators for this chain of single-argument
functions.</p>
<p><strong>Understanding the Chain:</strong></p>
<p>Consider the <code>greeting</code> function:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>greeting <span style="color:#f92672">=</span> prefix: name: <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>prefix<span style="color:#e6db74">}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>;</span></span></code></pre></div><p>This is effectively a chain:</p>
<ol>
<li><strong>Outer Function</strong>: <code>prefix: (name: &quot;${prefix}, ${name}!&quot;)</code></li>
</ol>
<ul>
<li>
<p>Takes one argument: <code>prefix</code>.</p>
</li>
<li>
<p>Its body is another function definition: name: <code>&quot;${prefix}, ${name}!&quot;</code>.</p>
</li>
</ul>
<p>2 <strong>Inner Function:</strong> <code>name: &quot;${prefix}, ${name}!&quot;</code></p>
<ul>
<li>
<p>Takes one argument: <code>name</code>.</p>
</li>
<li>
<p>Its body uses both its own argument (<code>name</code>) and the argument from the
outer function&rsquo;s scope (prefix).</p>
</li>
</ul>
<p><strong>Step-by-Step Evaluation:</strong></p>
<p>When you call <code>greeting &quot;Hello&quot; &quot;Alice&quot;</code>:</p>
<ol>
<li><code>greeting &quot;Hello&quot;</code>:</li>
</ol>
<ul>
<li>
<p>The <code>greeting</code> function is called with <code>&quot;Hello&quot;</code> as the <code>prefix</code>.</p>
</li>
<li>
<p>The outer function returns the inner function:
<code>name: &quot;Hello, ${name}!&quot;</code> (where <code>prefix</code> is now fixed as `&ldquo;Hello&rdquo;`` in its
scope).</p>
</li>
</ul>
<ol start="2">
<li><code>(greeting &quot;Hello&quot;) &quot;Alice&quot;</code>:</li>
</ol>
<ul>
<li>
<p>The resulting inner function is then called with <code>&quot;Alice&quot;</code> as the <code>name</code>.</p>
</li>
<li>
<p>The inner function evaluates its body: <code>&quot;Hello, ${&quot;Alice&quot;}!&quot;</code>, resulting in
<code>&quot;Hello, Alice!&quot;</code>.</p>
</li>
</ul>
<p><strong>Key Insight</strong>: Every colon in a function definition separates a single
argument from its function body, even if that body is another function
definition.</p>
<p><strong>Partial Application: Using Functions Incrementally</strong></p>
<p>Because of currying, you can apply arguments to a Nix function one at a time.
This is called partial application. When you provide only some of the expected
arguments, you get a new function that &ldquo;remembers&rdquo; the provided arguments and
waits for the rest.</p>
<p><strong>Example:</strong></p>
<p>Using our <code>greeting</code> function again:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>greeting <span style="color:#f92672">=</span> prefix: name: <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>prefix<span style="color:#e6db74">}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#34;</span>;</span></span></code></pre></div><p>If we only provide the prefix:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>helloGreeting <span style="color:#f92672">=</span> greeting <span style="color:#e6db74">&#34;Hello&#34;</span>;</span></span></code></pre></div><ul>
<li><code>helloGreeting</code> is now a new function. It has already received the <code>prefix</code>
argument (<code>&quot;Hello&quot;</code>) and is waiting for the <code>name</code> argument.</li>
</ul>
<p>Calling <code>helloGreeting</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>helloGreeting <span style="color:#e6db74">&#34;Sally&#34;</span> <span style="color:#75715e"># Evaluates to &#34;Hello, Sally!&#34;</span></span></span></code></pre></div><p><strong>Benefits of Partial Application:</strong></p>
<ul>
<li>
<p><strong>Creating Specialized Functions</strong>: You can create more specific functions
from general ones by fixing some of their parameters.</p>
</li>
<li>
<p><strong>Adapting to Higher-Order Functions</strong>: Many functions that operate on other
functions (like <code>map</code> and <code>filter</code>) expect functions with a certain number of
arguments. Partial application allows you to adapt existing functions to fit
these requirements.</p>
</li>
</ul>
<h3 id="the-function-nature-of-nixos-and-home-manager-modules">The Function Nature of NixOS and Home Manager Modules</h3>
<p>It&rsquo;s crucial to understand that most NixOS and Home Manager modules are
fundamentally <strong>functions</strong>.</p>
<ul>
<li>These module functions typically accept a single argument: an
<strong>attribute set</strong>.</li>
</ul>
<p><strong>Example</strong>:</p>
<p>A simplified Nginx service module:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ config<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> pkgs<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }: {
</span></span><span style="display:flex;"><span>services<span style="color:#f92672">.</span>nginx<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>services<span style="color:#f92672">.</span>nginx<span style="color:#f92672">.</span>package <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>nginx;
</span></span><span style="display:flex;"><span>services<span style="color:#f92672">.</span>nginx<span style="color:#f92672">.</span>settings<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;http-port&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;8080&#34;</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>The entire module definition is a function that takes one argument:
<code>{ config, lib, pkgs, ... }</code>.</p>
</li>
<li>
<p>When this module is included in your configuration, the NixOS module system
calls this function with a specific attribute set. This attribute set contains
the current system configuration (<code>config</code>), the Nix standard library (<code>lib</code>),
the available packages (<code>pkgs</code>), and other relevant information. The module
then uses these values to define parts of your system.</p>
</li>
</ul>
<h3 id="resources">Resources</h3>
<ul>
<li>
<p><a href="https://nix.dev/tutorials/nix-language.html">nix.dev Nix Lang Basics</a></p>
</li>
<li>
<p><a href="https://nixos.org/guides/nix-pills/05-functions-and-imports.html">nix pills Functions and Imports</a></p>
</li>
<li>
<p><a href="https://zero-to-nix.com/concepts/nix-language/">zero-to-nix Nix Lang</a></p>
</li>
<li>
<p><a href="https://nixcloud.io/tour/?id=functions%2Fintroduction">A tour of Nix &ldquo;Functions&rdquo;</a></p>
</li>
<li>
<p><a href="https://learnxinyminutes.com/nix/">learn Nix in y minutes</a></p>
</li>
<li>
<p><a href="https://noogle.dev/">noogle function library</a></p>
</li>
</ul>
]]></content:encoded></item><item><title>Intro_to_jujutsu</title><link>https://saylesss88.github.io/posts/intro_to_jujutsu/</link><pubDate>Wed, 14 May 2025 19:07:59 -0400</pubDate><guid>https://saylesss88.github.io/posts/intro_to_jujutsu/</guid><description>&lt;h1 id="intro-to-jujutsu-using-jj-in-an-existing-git-repo">Intro to Jujutsu (Using jj in an existing Git Repo)&lt;/h1>
&lt;p>&lt;strong>TOC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#intro-to-jujutsu-using-jj-in-an-existing-git-repo">Intro to Jujutsu (Using jj in an existing Git Repo)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#jj-and-git-side-by-side">JJ and Git Side by Side&lt;/a>&lt;/li>
&lt;li>&lt;a href="#resources">Resources&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://saylesss88.github.io/images/jujutsu.png" alt="Jujutsu Logo">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>You can use jujutsu (jj) with existing Git repositories with one command.
&lt;code>jj git init --colocate&lt;/code> or &lt;code>jj git init --git-repo /path/to/git_repository&lt;/code>.
The native repository format for jj is still a work in progress so people
typically use a &lt;code>git&lt;/code> repository for backend.&lt;/p></description><content:encoded><![CDATA[<h1 id="intro-to-jujutsu-using-jj-in-an-existing-git-repo">Intro to Jujutsu (Using jj in an existing Git Repo)</h1>
<p><strong>TOC</strong></p>
<ul>
<li><a href="#intro-to-jujutsu-using-jj-in-an-existing-git-repo">Intro to Jujutsu (Using jj in an existing Git Repo)</a>
<ul>
<li><a href="#jj-and-git-side-by-side">JJ and Git Side by Side</a></li>
<li><a href="#resources">Resources</a></li>
</ul>
</li>
</ul>
<p><img src="/images/jujutsu.png" alt="Jujutsu Logo"></p>
<ul>
<li>
<p>You can use jujutsu (jj) with existing Git repositories with one command.
<code>jj git init --colocate</code> or <code>jj git init --git-repo /path/to/git_repository</code>.
The native repository format for jj is still a work in progress so people
typically use a <code>git</code> repository for backend.</p>
</li>
<li>
<p>Unlike <code>git</code>, <code>jj</code> has no index &ldquo;staging area&rdquo;. It treats the working copy
as an actual commit. When you make changes to files, these changes are
automatically recorded to the working commit. There&rsquo;s no need to explicitly
stage changes because they are already part of the commit that represents
your current working state.</p>
<ul>
<li>This means that you don&rsquo;t need to worry about making a change, running
<code>git add .</code>, running <code>git commit -m &quot;commit message&quot;</code> because it&rsquo;s
already done for you. This is handy with flakes by preventing a
&ldquo;dirty working tree&rdquo; and can instantly be rebuilt after making a change.</li>
</ul>
</li>
</ul>
<h2 id="heres-an-example">Here&rsquo;s an example</h2>
<p>Say I have my configuration flake in the <code>~/flakes/</code> directory that is an
existing Git repository. To use JJ as the front-end I could do something like:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~/flakes
</span></span><span style="display:flex;"><span>jj git init --colocate
</span></span><span style="display:flex;"><span>jj describe -m <span style="color:#e6db74">&#34;first jj commit&#34;</span>
</span></span><span style="display:flex;"><span>jj commit</span></span></code></pre></div><p><strong>Or</strong> to do this in a directory that isn&rsquo;t already a git repo you can do
something like:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cargo new hello-world --vcs<span style="color:#f92672">=</span>none
</span></span><span style="display:flex;"><span>cd hello-world
</span></span><span style="display:flex;"><span>jj git init
</span></span><span style="display:flex;"><span>Initialized repo in <span style="color:#e6db74">&#34;.&#34;</span></span></span></code></pre></div><h3 id="jj-and-git-side-by-side">JJ and Git Side by Side</h3>
<p>Or for example, with Git if you wanted to move to a different branch before
running <code>nix flake update</code> to see if it introduced errors before merging
with your main branch, you could do something like:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout -b update-test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nix flake update
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo nixos-rebuild test --flake .</span></span></code></pre></div><p>If you&rsquo;re satisfied you can merge:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git checkout main
</span></span><span style="display:flex;"><span>git add . <span style="color:#75715e"># Stage the change</span>
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;update&#34;</span>
</span></span><span style="display:flex;"><span>git branch -D update-test
</span></span><span style="display:flex;"><span>git merge update-test
</span></span><span style="display:flex;"><span>sudo nixos-rebuild switch --flake .</span></span></code></pre></div><p>With JJ a similar workflow could be:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jj new  <span style="color:#75715e"># Create a new child commit/start working on a new change</span>
</span></span><span style="display:flex;"><span>nix flake update
</span></span><span style="display:flex;"><span>sudo nixos-rebuild test --flake .
</span></span><span style="display:flex;"><span>jj squash <span style="color:#75715e">#  equivalent to `git commit -a --amend`</span>
</span></span><span style="display:flex;"><span>jj describe -m <span style="color:#e6db74">&#34;update&#34;</span> <span style="color:#75715e"># Similar to git commit -m</span>
</span></span><span style="display:flex;"><span>jj commit <span style="color:#75715e"># Only needed if finalizing an explicit commit</span>
</span></span><span style="display:flex;"><span>sudo nixos-rebuild switch --flake .</span></span></code></pre></div><ul>
<li>
<p>With <code>jj</code> you&rsquo;re creating a new commit rather than a new branch.</p>
</li>
<li>
<p>Amending vs. Squashing: Git&rsquo;s <code>git commit --amend</code> updates the last commit.
<code>jj squash</code> combines the current commit with its parent, effectively doing
the same thing in terms of history.</p>
</li>
<li>
<p>Merging: Git&rsquo;s merge command is explicit. In <code>jj</code>, the concept is similar,
but since there&rsquo;s no branch, you&rsquo;re &ldquo;merging&rdquo; by moving your working commit
to include these changes. The <code>jj squash</code> here acts like merging the changes
into the main line of development.</p>
</li>
<li>
<p>No need to delete branches: Since there are no branches in <code>jj</code>, there&rsquo;s
no equivalent to <code>git branch -D</code> to clean up. Instead commits that are no
longer needed can be &ldquo;abandoned&rdquo; with <code>jj abandon</code> if you want to clean up
your commit graph.</p>
</li>
<li>
<p><code>jj describe</code> without a flag just opens <code>$EDITOR</code> where you can write your
commit message save and exit.</p>
</li>
<li>
<p>In <code>git</code>, we finish a set of changes to our code by committing, but in
<code>jj</code> we start new work by creating a change, and <em>then</em> make changes to
our code. It&rsquo;s more useful to write an initial description of your intended
changes, and then refine it as you work, than it is creating a commit message
after the fact.</p>
</li>
<li>
<p>I have heard that jj can struggle with big repositories such as Nixpkgs and
have noticed some issues here and there when using with NixOS.
I&rsquo;m hoping that as the project matures,it gets better on this front.</p>
</li>
<li>
<p>This is just the start of what is possible, here are some resources about
it if you&rsquo;re interested:</p>
</li>
</ul>
<h3 id="resources">Resources</h3>
<ul>
<li>
<p><a href="https://github.com/jj-vcs/jj">jj_github</a></p>
</li>
<li>
<p><a href="https://jj-vcs.github.io/jj/latest/tutorial/">official_tutorial</a></p>
</li>
<li>
<p><a href="https://v5.chriskrycho.com/essays/jj-init/">jj_init</a> # very good article</p>
</li>
<li>
<p><a href="https://steveklabnik.github.io/jujutsu-tutorial/">steves_jj_tutorial</a></p>
</li>
</ul>
]]></content:encoded></item><item><title>Nix_modules_explained</title><link>https://saylesss88.github.io/posts/nix_modules_explained/</link><pubDate>Wed, 14 May 2025 19:03:40 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_modules_explained/</guid><description>&lt;h1 id="nixos-modules">NixOS Modules&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="#nixos-modules">NixOS Modules&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#declaring-options">Declaring Options&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#module-composition">Module Composition&lt;/a>&lt;/li>
&lt;li>&lt;a href="#nixos-modules-and-dependency-locking-with-npins">NixOS Modules and Dependency Locking with npins&lt;/a>&lt;/li>
&lt;li>&lt;a href="#resources-on-modules">Resources on Modules&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#videos">Videos&lt;/a>&lt;/li>
&lt;li>[&lt;a href="https://www.youtube.com/watch?v=cZjOzOHb2ow">tweagModuleSystemRecursion&lt;/a>](#tweagmodulesystemrecursionhttpswwwyoutubecomwatchvczjozohb2ow)&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv3.png"
 alt="gruv3" width="700">
&lt;/figure>

&lt;p>TL;DR: In this post I break down the NixOS module system and explain how to
define options. As well as how to test modules with the repl.&lt;/p>
&lt;ul>
&lt;li>Most modules are functions that take an attribute set and return an attribute
set.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Refresher&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>An &lt;strong>attribute set&lt;/strong> is a collection of name-value pairs wrapped in curly
braces:&lt;/li>
&lt;/ul>





&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>A &lt;strong>function&lt;/strong> with an attribute set argument:&lt;/li>
&lt;/ul>





&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>{ a&lt;span style="color:#f92672">,&lt;/span> b }: a &lt;span style="color:#f92672">+&lt;/span> b&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>The simplest possible &lt;strong>NixOS Module&lt;/strong>:&lt;/li>
&lt;/ul>





&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#f92672">...&lt;/span> }:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>NixOS produces a full system configuration by combining smaller, more isolated
and reusable components: &lt;strong>Modules&lt;/strong>. In my opinion modules are one of the
first things you should understand when learning about NixOS.&lt;/p></description><content:encoded><![CDATA[<h1 id="nixos-modules">NixOS Modules</h1>
<ul>
<li><a href="#nixos-modules">NixOS Modules</a>
<ul>
<li><a href="#declaring-options">Declaring Options</a>
<ul>
<li><a href="#module-composition">Module Composition</a></li>
<li><a href="#nixos-modules-and-dependency-locking-with-npins">NixOS Modules and Dependency Locking with npins</a></li>
<li><a href="#resources-on-modules">Resources on Modules</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#videos">Videos</a></li>
<li>[<a href="https://www.youtube.com/watch?v=cZjOzOHb2ow">tweagModuleSystemRecursion</a>](#tweagmodulesystemrecursionhttpswwwyoutubecomwatchvczjozohb2ow)</li>
</ul>
<figure><img src="/images/gruv3.png"
    alt="gruv3" width="700">
</figure>

<p>TL;DR: In this post I break down the NixOS module system and explain how to
define options. As well as how to test modules with the repl.</p>
<ul>
<li>Most modules are functions that take an attribute set and return an attribute
set.</li>
</ul>
<p><strong>Refresher</strong>:</p>
<ul>
<li>An <strong>attribute set</strong> is a collection of name-value pairs wrapped in curly
braces:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello&#34;</span>;
</span></span><span style="display:flex;"><span>  int <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>A <strong>function</strong> with an attribute set argument:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ a<span style="color:#f92672">,</span> b }: a <span style="color:#f92672">+</span> b</span></span></code></pre></div><ul>
<li>The simplest possible <strong>NixOS Module</strong>:</li>
</ul>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ <span style="color:#f92672">...</span> }:
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>NixOS produces a full system configuration by combining smaller, more isolated
and reusable components: <strong>Modules</strong>. In my opinion modules are one of the
first things you should understand when learning about NixOS.</p>
<ul>
<li>
<p>A NixOS module defines configuration options and behaviors for system
components, allowing users to extend, customize, and compose configurations
declaratively.</p>
</li>
<li>
<p>A <strong>module</strong> is a file containing a Nix expression with a specific structure.
It <em>declares</em> options for other modules to define (give a value). Modules were
introduced to allow extending NixOS without modifying its source code.</p>
</li>
<li>
<p>To define any values, the module system first has to know which ones are
allowed. This is done by declaring options that specify which attributes can
be set and used elsewhere.</p>
</li>
<li>
<p>If you want to write your own modules, I recommend setting up
<a href="https://github.com/nix-community/nixd?tab=readme-ov-file">nixd</a>
or <a href="https://github.com/oxalica/nil">nil</a> with your editor of choice.
This will allow your editor to warn you about missing arguments and
dependencies as well as syntax errors.</p>
</li>
</ul>
<h2 id="declaring-options">Declaring Options</h2>
<p>The following is <code>nixpkgs/nixos/modules/programs/vim.nix</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  cfg <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>programs<span style="color:#f92672">.</span>vim;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  options<span style="color:#f92672">.</span>programs<span style="color:#f92672">.</span>vim <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkEnableOption <span style="color:#e6db74">&#34;Vi IMproved, an advanced text&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    defaultEditor <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkEnableOption <span style="color:#e6db74">&#34;vim as the default editor&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    package <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkPackageOption pkgs <span style="color:#e6db74">&#34;vim&#34;</span> { example <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;vim-full&#34;</span>; };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># TODO: convert it into assert after 24.11 release</span>
</span></span><span style="display:flex;"><span>  config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf (cfg<span style="color:#f92672">.</span>enable <span style="color:#f92672">||</span> cfg<span style="color:#f92672">.</span>defaultEditor) {
</span></span><span style="display:flex;"><span>    warnings <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf (cfg<span style="color:#f92672">.</span>defaultEditor <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>cfg<span style="color:#f92672">.</span>enable) [
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;programs.vim.defaultEditor will only work if programs.vim.enable is enabled, which will be enforced after the 24.11 release&#34;</span>
</span></span><span style="display:flex;"><span>    ];
</span></span><span style="display:flex;"><span>    environment <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      systemPackages <span style="color:#f92672">=</span> [ cfg<span style="color:#f92672">.</span>package ];
</span></span><span style="display:flex;"><span>      variables<span style="color:#f92672">.</span>EDITOR <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf cfg<span style="color:#f92672">.</span>defaultEditor (lib<span style="color:#f92672">.</span>mkOverride <span style="color:#ae81ff">900</span> <span style="color:#e6db74">&#34;vim&#34;</span>);
</span></span><span style="display:flex;"><span>      pathsToLink <span style="color:#f92672">=</span> [ <span style="color:#e6db74">&#34;/share/vim-plugins&#34;</span> ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>It provides options to enable Vim, set it as the default editor, and specify
the Vim package to use.</li>
</ul>
<ol>
<li>Module Inputs and Structure:</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>Inputs: The module takes the above inputs and <code>...</code> (catch-all for other args)</p>
<ul>
<li>
<p><code>config</code>: Allows the module to read option values (e.g.
<code>config.programs.vim.enable</code>). It provides access to the evaluated
configuration.</p>
</li>
<li>
<p><code>lib</code>: The Nixpkgs library, giving us helper functions like <code>mkEnableOption</code>
, <code>mkIf</code>, and <code>mkOverride</code>.</p>
</li>
<li>
<p><code>pkgs</code>: The Nixpkgs package set, used to access packages like <code>pkgs.vim</code></p>
</li>
<li>
<p><code>...</code>: Allows the module to accept additional arguments, making it flexible
for extension in the future.</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Key Takeaways: A NixOS module is typically a function that can include
<code>config</code>, <code>lib</code>, and <code>pkgs</code>, but it doesn’t require them. The <code>...</code>
argument ensures flexibility, allowing a module to accept extra inputs
without breaking future compatibility. Using <code>lib</code> simplifies handling
options (mkEnableOption, mkIf, mkOverride) and helps follow best practices.
Modules define options, which users can set in their configuration, and
<code>config</code>, which applies changes based on those options.</p></blockquote>
<ol start="2">
<li>Local Configuration Reference:</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  cfg <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>programs<span style="color:#f92672">.</span>vim;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span></span></span></code></pre></div><ul>
<li>This is a local alias. Instead of typing <code>config.programs.vim</code> over and over,
the module uses <code>cfg</code>.</li>
</ul>
<ol start="3">
<li>Option Declaration</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>options<span style="color:#f92672">.</span>programs<span style="color:#f92672">.</span>vim <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkEnableOption <span style="color:#e6db74">&#34;Vi IMproved, an advanced text&#34;</span>;
</span></span><span style="display:flex;"><span>  defaultEditor <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkEnableOption <span style="color:#e6db74">&#34;vim as the default editor&#34;</span>;
</span></span><span style="display:flex;"><span>  package <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkPackageOption pkgs <span style="color:#e6db74">&#34;vim&#34;</span> { example <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;vim-full&#34;</span>; };
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><p>This defines three user-configurable options:</p>
<ul>
<li>
<p><code>enable</code>: Turns on Vim support system-wide.</p>
</li>
<li>
<p><code>defaultEditor</code>: Sets Vim as the system&rsquo;s default <code>$EDITOR</code>.</p>
</li>
<li>
<p><code>package</code>: lets the user override which Vim package is used.</p>
</li>
</ul>
<blockquote>
<p><code>mkPackageOption</code> is a helper that defines a package-typed option with a
default (<code>pkgs.vim</code>) and provides docs + example.</p></blockquote>
<ol start="4">
<li>Conditional Configuration</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf (cfg<span style="color:#f92672">.</span>enable <span style="color:#f92672">||</span> cfg<span style="color:#f92672">.</span>defaultEditor) {</span></span></code></pre></div><ul>
<li>This block is only activated if <em>either</em> <code>programs.vim.enable</code> or
<code>defaultEditor</code> is set.</li>
</ul>
<ol start="5">
<li>Warnings</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>warnings <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf (cfg<span style="color:#f92672">.</span>defaultEditor <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>cfg<span style="color:#f92672">.</span>enable) [
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;programs.vim.defaultEditor will only work if programs.vim.enable is enabled, which will be enforced after the 24.11 release&#34;</span>
</span></span><span style="display:flex;"><span>];</span></span></code></pre></div><ul>
<li>Gives you a soft warning if you try to set <code>defaultEditor = true</code> without
also enabling Vim.</li>
</ul>
<ol start="6">
<li>Actual System Config Changes</li>
</ol>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>environment <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  systemPackages <span style="color:#f92672">=</span> [ cfg<span style="color:#f92672">.</span>package ];
</span></span><span style="display:flex;"><span>  variables<span style="color:#f92672">.</span>EDITOR <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf cfg<span style="color:#f92672">.</span>defaultEditor (lib<span style="color:#f92672">.</span>mkOverride <span style="color:#ae81ff">900</span> <span style="color:#e6db74">&#34;vim&#34;</span>);
</span></span><span style="display:flex;"><span>  pathsToLink <span style="color:#f92672">=</span> [ <span style="color:#e6db74">&#34;/share/vim-plugins&#34;</span> ];
</span></span><span style="display:flex;"><span>};</span></span></code></pre></div><ul>
<li>It adds Vim to your <code>systemPackages</code>, sets <code>$EDITOR</code> if <code>defaultEditor</code> is
true, and makes <code>/share/vim-plugins</code> available in the environment.</li>
</ul>
<p>The following is a bat home-manager module that I wrote:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># bat.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  lib<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}: <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  cfg <span style="color:#f92672">=</span> config<span style="color:#f92672">.</span>custom<span style="color:#f92672">.</span>batModule;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> {
</span></span><span style="display:flex;"><span>  options<span style="color:#f92672">.</span>custom<span style="color:#f92672">.</span>batModule<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkOption {
</span></span><span style="display:flex;"><span>    type <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>types<span style="color:#f92672">.</span>bool;
</span></span><span style="display:flex;"><span>    default <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>    description <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Enable bat module&#34;</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf cfg<span style="color:#f92672">.</span>enable {
</span></span><span style="display:flex;"><span>    programs<span style="color:#f92672">.</span>bat <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>      enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>      themes <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        dracula <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>          src <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>fetchFromGitHub {
</span></span><span style="display:flex;"><span>            owner <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dracula&#34;</span>;
</span></span><span style="display:flex;"><span>            repo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sublime&#34;</span>; <span style="color:#75715e"># Bat uses sublime syntax for its themes</span>
</span></span><span style="display:flex;"><span>            rev <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;26c57ec282abcaa76e57e055f38432bd827ac34e&#34;</span>;
</span></span><span style="display:flex;"><span>            sha256 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;019hfl4zbn4vm4154hh3bwk6hm7bdxbr1hdww83nabxwjn99ndhv&#34;</span>;
</span></span><span style="display:flex;"><span>          };
</span></span><span style="display:flex;"><span>          file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Dracula.tmTheme&#34;</span>;
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>      extraPackages <span style="color:#f92672">=</span> <span style="color:#66d9ef">with</span> pkgs<span style="color:#f92672">.</span>bat-extras; [
</span></span><span style="display:flex;"><span>        batdiff
</span></span><span style="display:flex;"><span>        batman
</span></span><span style="display:flex;"><span>        prettybat
</span></span><span style="display:flex;"><span>        batgrep
</span></span><span style="display:flex;"><span>      ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>Now I could add this to my <code>home.nix</code> to enable it:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># home.nix</span>
</span></span><span style="display:flex;"><span>custom <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  batModule<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><ul>
<li>
<p>If I set this option to true the bat configuration is dropped in place. If
it&rsquo;s not set to true, it won&rsquo;t put the bat configuration in the system. Same
as with options defined in modules within the Nixpkgs repository.</p>
</li>
<li>
<p>If I had set the default to <code>true</code>, it would automatically enable the module
without requiring an explicit <code>custom.batModule.enable = true;</code> call in my
<code>home.nix</code>.</p>
</li>
</ul>
<h3 id="module-composition">Module Composition</h3>
<ul>
<li>
<p>NixOS achieves its full system configuration by combining the configurations
defined in various modules. This composition is primarily handled through the
<code>imports</code> mechanism.</p>
</li>
<li>
<p><code>imports</code>: This is a standard option within a NixOS or Home Manager
configuration (often found in your configuration.nix or home.nix). It takes
a list of paths to other Nix modules. When you include a module in the imports
list, the options and configurations defined in that module become part of
your overall system configuration.</p>
</li>
<li>
<p>You declaratively state the desired state of your system by setting options
across various modules. The NixOS build system then evaluates and merges these
option settings. The culmination of this process, which includes building the
entire system closure, is represented by the derivation built by
<code>config.system.build.toplevel</code>.</p>
</li>
</ul>
<h3 id="nixos-modules-and-dependency-locking-with-npins">NixOS Modules and Dependency Locking with npins</h3>
<p>This is the file structure:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>❯ tree
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── configuration.nix
</span></span><span style="display:flex;"><span>├── default.nix
</span></span><span style="display:flex;"><span>├── desktop.nix
</span></span><span style="display:flex;"><span>└── npins
</span></span><span style="display:flex;"><span>    ├── default.nix
</span></span><span style="display:flex;"><span>    └── sources.json</span></span></code></pre></div><p>This uses <code>npins</code> for dependency locking. Install it and run this in the project</p>
<p>directory:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npins init</span></span></code></pre></div><p>Create a <code>default.nix</code> with the following:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span>{ system <span style="color:#f92672">?</span> builtins<span style="color:#f92672">.</span>currentSystem<span style="color:#f92672">,</span> sources <span style="color:#f92672">?</span> <span style="color:#f92672">import</span> <span style="color:#e6db74">./npins</span><span style="color:#f92672">,</span> }:
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  pkgs <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> sources<span style="color:#f92672">.</span>nixpkgs {
</span></span><span style="display:flex;"><span>    config <span style="color:#f92672">=</span> { };
</span></span><span style="display:flex;"><span>    overlays <span style="color:#f92672">=</span> [ ];
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">inherit</span> (pkgs) lib;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span> lib<span style="color:#f92672">.</span>makeScope pkgs<span style="color:#f92672">.</span>newScope (self: {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  shell <span style="color:#f92672">=</span> pkgs<span style="color:#f92672">.</span>mkShell { packages <span style="color:#f92672">=</span> [ pkgs<span style="color:#f92672">.</span>npins self<span style="color:#f92672">.</span>myPackage ]; };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># inherit lib;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  nixosSystem <span style="color:#f92672">=</span> <span style="color:#f92672">import</span> (sources<span style="color:#f92672">.</span>nixpkgs <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/nixos&#34;</span>) {
</span></span><span style="display:flex;"><span>    configuration <span style="color:#f92672">=</span> <span style="color:#e6db74">./configuration.nix</span>;
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  moduleEvale <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>evalModules {
</span></span><span style="display:flex;"><span>    modules <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>    ];
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>})</span></span></code></pre></div><p>A <code>configuration.nix</code> with the following:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># configuration.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  boot<span style="color:#f92672">.</span>loader<span style="color:#f92672">.</span>grub<span style="color:#f92672">.</span>device <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nodev&#34;</span>;
</span></span><span style="display:flex;"><span>  fileSystems<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">.</span>device <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/devst&#34;</span>;
</span></span><span style="display:flex;"><span>  system<span style="color:#f92672">.</span>stateVersion <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;25.05&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># declaring options means to declare a new option</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># defining options means to define a value of an option</span>
</span></span><span style="display:flex;"><span>  imports <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ./main.nix</span>
</span></span><span style="display:flex;"><span>     <span style="color:#e6db74">./desktop.nix</span> <span style="color:#75715e"># Files</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ./minimal.nix</span>
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># mine.desktop.enable = true;</span>
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>And a <code>desktop.nix</code> with the following:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># desktop.nix</span>
</span></span><span style="display:flex;"><span>{ pkgs<span style="color:#f92672">,</span> lib<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> <span style="color:#f92672">...</span> }:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  imports <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Define an option to enable or disable desktop configuration</span>
</span></span><span style="display:flex;"><span>  options<span style="color:#f92672">.</span>mine<span style="color:#f92672">.</span>desktop<span style="color:#f92672">.</span>enable <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkEnableOption <span style="color:#e6db74">&#34;desktop settings&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Configuration that applies when the option is enabled</span>
</span></span><span style="display:flex;"><span>  config <span style="color:#f92672">=</span> lib<span style="color:#f92672">.</span>mkIf config<span style="color:#f92672">.</span>mine<span style="color:#f92672">.</span>desktop<span style="color:#f92672">.</span>enable {
</span></span><span style="display:flex;"><span>    environment<span style="color:#f92672">.</span>systemPackages <span style="color:#f92672">=</span> [ pkgs<span style="color:#f92672">.</span>git ];
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p><code>mkEnableOption</code> defaults to false. Now in your <code>configuration.nix</code> you can
uncomment <code>mine.desktop.enable = true;</code> to enable the desktop config and
vice-versa.</p>
<p>You can test that this works by running:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix-instantiate -A nixosSystem.system</span></span></code></pre></div><ul>
<li><code>nix-instantiate</code> performs only the evaluation phase of Nix expressions.
During this phase, Nix interprets the Nix code, resolves all dependencies, and
constructs derivations but does not execute any build actions. Useful for
testing.</li>
</ul>
<p>To check if this worked and <code>git</code> is installed in systemPackages you can
load it into <code>nix repl</code> but first you&rsquo;ll want <code>lib</code> to be available so uncomment
this in your <code>default.nix</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#75715e"># default.nix</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inherit</span> lib;</span></span></code></pre></div><p>Rerun <code>nix-instantiate -A nixosSystem.system</code></p>
<p>Then load the repl and check that <code>git</code> is in <code>systemPackages</code>:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nix repl -f .
</span></span><span style="display:flex;"><span>nix-repl&gt; builtins.filter <span style="color:#f92672">(</span>pkg: lib.hasPrefix <span style="color:#e6db74">&#34;git&#34;</span> pkg.name<span style="color:#f92672">)</span> nixosSystem.config.environment.systemPackages</span></span></code></pre></div><p>This shows the path to the derivation</p>
<p>Check that mine.desktop.enable is true</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>nix-repl<span style="color:#f92672">&gt;</span> nixosSystem<span style="color:#f92672">.</span>config<span style="color:#f92672">.</span>mine<span style="color:#f92672">.</span>desktop<span style="color:#f92672">.</span>enable
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">true</span></span></span></code></pre></div><h3 id="resources-on-modules">Resources on Modules</h3>
<ul>
<li>
<p><a href="https://nixos.org/manual/nixos/stable/#sec-writing-modules">WritingNixOsModules</a></p>
</li>
<li>
<p><a href="https://nixos.wiki/wiki/NixOS_modules">NixWikiNixOSModules</a></p>
</li>
<li>
<p><a href="https://nix.dev/tutorials/module-system/a-basic-module/index.html">nix.dev A basic module</a></p>
</li>
<li>
<p><a href="https://nix.dev/tutorials/module-system/deep-dive#module-system-deep-dive">ModuleSystemDeepDive</a></p>
</li>
<li>
<p><a href="https://xeiaso.net/talks/asg-2023-nixos/">MakingNixOSModulesForFun</a></p>
</li>
<li>
<p><a href="https://xeiaso.net/talks/asg-2023-nixos/">xeiaso Nixos Modules for fun &amp; profit</a></p>
</li>
<li>
<p><a href="https://nixos-and-flakes.thiscute.world/other-usage-of-flakes/module-system">NixOS Flakes Book Module System</a></p>
</li>
</ul>
<h1 id="videos">Videos</h1>
<p><a href="https://www.youtube.com/watch?v=N7hFP_40DJo&amp;t=17s">NixHour Writing NixOS modules</a> &ndash; This example is from this video
<a href="https://infinisil.com/modules.mp4">infinisilModules</a></p>
<h1 id="tweagmodulesystemrecursion"><a href="https://www.youtube.com/watch?v=cZjOzOHb2ow">tweagModuleSystemRecursion</a></h1>
]]></content:encoded></item></channel></rss>