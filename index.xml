<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NixOS Blog</title><link>https://saylesss88.github.io/</link><description>Recent content on NixOS Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 15 May 2025 13:02:06 -0400</lastBuildDate><atom:link href="https://saylesss88.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Nixpkgs_pull_requests</title><link>https://saylesss88.github.io/posts/nixpkgs_pull_requests/</link><pubDate>Thu, 15 May 2025 13:02:06 -0400</pubDate><guid>https://saylesss88.github.io/posts/nixpkgs_pull_requests/</guid><description>&lt;h1 id="nixpkgs-pull-requests">Nixpkgs Pull Requests&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv16.png"
 alt="window_view" width="1000">
&lt;/figure>

&lt;p>Flakes often rely on having access to the full history of the Git repository
to correctly determine dependencies, identify specific revisions of inputs,
and evaluate the flake. Not in all situations will a shallow clone work and
this is one of them.&lt;/p>
&lt;p>If you have any changes to your local copy of Nixpkgs make sure to stash them
before the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git stash -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>This command saves your uncommited changes (including staged files)
temporarily. You can restore them later with &lt;code>git stash pop&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Step 1 Clone Nixpkgs Locally&lt;/strong>&lt;/p></description></item><item><title>Debugging_and_tracing_modules</title><link>https://saylesss88.github.io/posts/debugging_and_tracing_modules/</link><pubDate>Thu, 15 May 2025 10:08:17 -0400</pubDate><guid>https://saylesss88.github.io/posts/debugging_and_tracing_modules/</guid><description>&lt;h1 id="debugging-and-tracing-nixos-modules">Debugging and Tracing NixOS Modules&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv17.png"
 alt="window_space" width="1000">
&lt;/figure>

&lt;ul>
&lt;li>
&lt;p>Other related post if you haven&amp;rsquo;t read my previous post on modules, that may
be helpful before reading this one:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://saylesss88.github.io/posts/nix_modules_explained/">nix-modules-explained&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Nix Code is particularly hard to &lt;strong>debug&lt;/strong> because of (e.g. lazy evaluation,
declarative nature, layered modules)&lt;/p>
&lt;ul>
&lt;li>The following simple Nix code snippet illustrates a basic NixOS module
definition and how options are declared and configured. We&amp;rsquo;ll use this example
to demonstrate fundamental debugging techniques using &lt;code>nix-instantiate&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lib &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;lt;nixpkgs/lib&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lib&lt;span style="color:#f92672">.&lt;/span>evalModules {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> modules &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ({ lib&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">...&lt;/span> }: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options&lt;span style="color:#f92672">.&lt;/span>foo &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>mkOption {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># type = lib.types.raw;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>types&lt;span style="color:#f92672">.&lt;/span>anything;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># default = pkgs;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config&lt;span style="color:#f92672">.&lt;/span>foo &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> baz &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>mkDefault &lt;span style="color:#e6db74">&amp;#34;baz&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo&lt;span style="color:#f92672">.&lt;/span>baz &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>In the above code, adding &lt;code>lib&lt;/code> to the function arguments isn&amp;rsquo;t required but
if you were to move the module to another file it would fail without it
because &lt;code>lib&lt;/code> comes from outside of it. So it&amp;rsquo;s good practice to refer to &lt;code>lib&lt;/code>
in the modules themselves.&lt;/p></description></item><item><title>Using_overlays_to_add_packages</title><link>https://saylesss88.github.io/posts/using_overlays_to_add_packages/</link><pubDate>Wed, 14 May 2025 19:28:57 -0400</pubDate><guid>https://saylesss88.github.io/posts/using_overlays_to_add_packages/</guid><description>&lt;h1 id="using-overlays-to-add-packages-that-arent-in-nixpkgs">Using Overlays to add Packages that aren&amp;rsquo;t in Nixpkgs&lt;/h1>
&lt;figure>&lt;img src="images/pokego.png"
 alt="window_view" width="1000">
&lt;/figure>

&lt;p>It is very common to use overlays in Nix to install packages that aren&amp;rsquo;t
available in the standard Nixpkgs repository.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Overlays are one of the primary and recommended ways to extend and customize
your Nix environment. It&amp;rsquo;s important to remember that Nix overlays are made to
allow you to modify or extend the package set provided by Nixpkgs (or other
Nix sources) without directly altering the original package definitions. This
is crucial for maintaining reproducibility and avoiding conflicts. Overlays
are essentially functions that take the previous package set and allow you to
add, modify, or remove packages.&lt;/p></description></item><item><title>Nix_lang_basics</title><link>https://saylesss88.github.io/posts/nix_lang_basics/</link><pubDate>Wed, 14 May 2025 19:28:12 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_lang_basics/</guid><description>&lt;h1 id="the-nix-language">The Nix Language&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv13.png"
 alt="window_view" width="1000">
&lt;/figure>

&lt;p>Nix as a programming language can be thought of as a kind of &amp;ldquo;JSON, but with
functions&amp;rdquo;.&lt;/p>
&lt;p>All statements are declarative, meaning that there&amp;rsquo;s no sequential flow of
instructions that makes up a Nix package. Instead, functions are called that
assign values to fields in attribute sets, which in turn may get assigned to
other values.&lt;/p>
&lt;h2 id="how-does-nix-work">How does Nix work&lt;/h2>
&lt;p>Nix is a pure, functional, lazy, declarative, and reproducible programming
language.&lt;/p></description></item><item><title>Comparing_flakes_to_traditional_nix</title><link>https://saylesss88.github.io/posts/comparing_flakes_to_traditional_nix/</link><pubDate>Wed, 14 May 2025 19:27:18 -0400</pubDate><guid>https://saylesss88.github.io/posts/comparing_flakes_to_traditional_nix/</guid><description>&lt;h1 id="introduction-flakes-and-traditional-nix">Introduction: Flakes and Traditional Nix&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/nixWinter.png"
 alt="nix winter" width="1000">
&lt;/figure>

&lt;ul>
&lt;li>This post is based on notes from Nix-Hour #4, comparing Traditional Nix and Flakes, focusing on achieving pure build results. See the &lt;a href="https://www.youtube.com/watch?v=atmoYyBAhF4">YouTube video&lt;/a> for the original content. This guide adapts the information for clarity and ease of understanding.&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-purity-in-nix">What is Purity in Nix?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>A key benefit of Nix Flakes is their &lt;em>default&lt;/em> enforcement of &lt;strong>pure evaluation&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In Nix, an &lt;strong>impure operation&lt;/strong> depends on something &lt;em>outside&lt;/em> its explicit inputs. Examples include:&lt;/p></description></item><item><title>Declarative_depinject</title><link>https://saylesss88.github.io/posts/declarative_depinject/</link><pubDate>Wed, 14 May 2025 19:26:36 -0400</pubDate><guid>https://saylesss88.github.io/posts/declarative_depinject/</guid><description>&lt;h1 id="declarative-dependency-injection-in-nix-flakes">Declarative Dependency Injection in Nix Flakes&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv6.png"
 alt="cyber" width="1000">
&lt;/figure>

&lt;p>This post explores a method for injecting dependencies into NixOS modules from
a flake in a more declarative way, offering an alternative to &lt;code>specialArgs&lt;/code>.&lt;/p>
&lt;h2 id="the-problem-with-specialargs">The Problem with specialArgs&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>As mentioned in &lt;a href="https://saylesss88.github.io/posts/nix_flakes_tips/">post&lt;/a>,
&lt;code>specialArgs&lt;/code> and &lt;code>extraSpecialArgs&lt;/code> can be used to pass dependencies and
variables from flakes to modules.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>However, &lt;code>specialArgs&lt;/code> injects values directly into every module&amp;rsquo;s argument
list.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This approach deviates from NixOS&amp;rsquo;s typical declarative data flow model.
Instead of explicit dependency passing, modules receive extra, unstructured
variables that aren&amp;rsquo;t part of the standard module options.&lt;/p></description></item><item><title>Derivations_explained</title><link>https://saylesss88.github.io/posts/derivations_explained/</link><pubDate>Wed, 14 May 2025 19:25:48 -0400</pubDate><guid>https://saylesss88.github.io/posts/derivations_explained/</guid><description>&lt;h1 id="introduction-to-nix-derivations">Introduction to Nix Derivations&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv10.png"
 alt="gruv10" width="1000">
&lt;/figure>

&lt;ul>
&lt;li>
&lt;p>A derivation in Nix is a fundamental concept that describes how to build a piece of software or a resource (e.g., a package, library, or configuration file). Think of it as a recipe for creating something within the Nix ecosystem.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For beginners, the analogy of a cooking recipe is helpful:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Ingredients (Dependencies):&lt;/strong> What other software or libraries are needed.&lt;/li>
&lt;li>&lt;strong>Steps (Build Instructions):&lt;/strong> The commands to compile, configure, and install.&lt;/li>
&lt;li>&lt;strong>Final Dish (Output):&lt;/strong> The resulting package or resource.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>A Nix derivation encapsulates all this information, telling Nix what inputs
to use, how to build it, and what the final output should be.&lt;/p></description></item><item><title>Simple_nix_service</title><link>https://saylesss88.github.io/posts/simple_nix_service/</link><pubDate>Wed, 14 May 2025 19:25:11 -0400</pubDate><guid>https://saylesss88.github.io/posts/simple_nix_service/</guid><description>&lt;h1 id="building-a-custom-nixos-service-with-flakes-and-overlays">Building a Custom NixOS Service with Flakes and Overlays&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv12.png"
 alt="gruv12" width="1000">
&lt;/figure>

&lt;p>TL;DR NixOS&amp;rsquo;s declarative configuration and flakes make it easy to create
custom services. This post shows how to build a minimal service using flakes
and overlays for a &amp;ldquo;meow&amp;rdquo; command&lt;/p>
&lt;ul>
&lt;li>This will be a complete minimal configuration for testing purposes.&lt;/li>
&lt;/ul>
&lt;h2 id="create-project-directory">Create Project Directory&lt;/h2>
&lt;p>Start by creating a directory to hold your project, I called mine &lt;code>meow&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir meow &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd meow
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-flake">Create flake&lt;/h2>
&lt;p>Create a &lt;code>flake.nix&lt;/code> with the following:&lt;/p></description></item><item><title>Nix_flakes_tips</title><link>https://saylesss88.github.io/posts/nix_flakes_tips/</link><pubDate>Wed, 14 May 2025 19:24:27 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_flakes_tips/</guid><description>&lt;h1 id="shallow-clone-nixpkgs">Shallow Clone Nixpkgs&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv8.png"
 alt="gruv8" width="1000">
&lt;/figure>

&lt;ol>
&lt;li>Shallow clone nixpkgs, the full Git history isn&amp;rsquo;t always necessary and this
can speed up build times.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>The only issue I&amp;rsquo;ve had is &lt;code>nix-index-database&lt;/code> not working well with the
shallow clone&amp;hellip; Other than that no issues after running for a few months.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># flake.nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nixpkgs&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;git+https://github.com/NixOS/nixpkgs?shallow=1&amp;amp;ref=nixos-unstable&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Some times when you might need a full clone are debugging and working with
repository history but those are rare.&lt;/li>
&lt;/ul>
&lt;h2 id="import-your-non-flake-wallpaper-repo">Import your Non-Flake Wallpaper Repo&lt;/h2>
&lt;ol start="2">
&lt;li>Importing your non-flake wallpapers repo:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># flake.nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wallpapers &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:saylesss88/wallpapers&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flake &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>After adding the input I can access individual wallpapers by adding the &lt;code>inputs&lt;/code> argument and
something like &lt;code>path = &amp;quot;${inputs.wallpapers}/Aesthetic Scenery.jpg&amp;quot;;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="understanding--patterns">Understanding @-patterns&lt;/h2>
&lt;ol start="3">
&lt;li>Understanding &lt;code>@-patterns&lt;/code>, being able to reference your outputs argument set as a whole. An
&lt;code>@-pattern&lt;/code> is a way for a function can access variadic attributes (i.e. varying number of
arguments).&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># flake.nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> home-manager&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:nix-community/home-manager/master&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> home-manager&lt;span style="color:#f92672">.&lt;/span>inputs&lt;span style="color:#f92672">.&lt;/span>nixpkgs&lt;span style="color:#f92672">.&lt;/span>follows &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;nixpkgs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stylix&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:danth/stylix&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nixpkgs&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> home-manager&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#f92672">@&lt;/span> inputs:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the above example to add the modules to your nixosConfigurations you would add something
like this:&lt;/p></description></item><item><title>Working_with_nixpkgs_locally</title><link>https://saylesss88.github.io/posts/working_with_nixpkgs_locally/</link><pubDate>Wed, 14 May 2025 19:23:32 -0400</pubDate><guid>https://saylesss88.github.io/posts/working_with_nixpkgs_locally/</guid><description>&lt;h1 id="working-with-nixpkgs-locally-benefits-and-best-practices">Working with Nixpkgs Locally: Benefits and Best Practices&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv18.png"
 alt="gruv18" width="1000">
&lt;/figure>

&lt;ul>
&lt;li>Nixpkgs, the package repository for NixOS, is a powerful resource for building and customizing software.&lt;/li>
&lt;li>Working with a local copy enhances development, debugging, and contribution workflows.&lt;/li>
&lt;li>This post covers setting up a local Nixpkgs repository, searching for dependencies, and leveraging its advantages, incorporating tips from the Nix community.&lt;/li>
&lt;/ul>
&lt;h1 id="i-why-work-with-nixpkgs-locally">I. Why Work with Nixpkgs Locally?&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>A local Nixpkgs repository offers significant advantages for Nix developers:&lt;/p></description></item><item><title>Building_your_config_as_a_package</title><link>https://saylesss88.github.io/posts/building_your_config_as_a_package/</link><pubDate>Wed, 14 May 2025 19:21:54 -0400</pubDate><guid>https://saylesss88.github.io/posts/building_your_config_as_a_package/</guid><description>&lt;h1 id="building-your-configuration-as-a-package">Building your configuration as a Package&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv4.png"
 alt="gruv4" width="1000">
&lt;/figure>

&lt;ul>
&lt;li>
&lt;p>TL;DR This post demonstrates other ways to modularize your config as well as
going into more advanced outputs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This allows you to build your configuration as a package allowing you to
separate the process of creating a configuration artifact and applying it to
the live system giving you a reusable artifact that can be used to deploy to
different systems. This can make it easier to isolate it from other parts of
your system making debugging easier.&lt;/p></description></item><item><title>Conditional_configuration</title><link>https://saylesss88.github.io/posts/conditional_configuration/</link><pubDate>Wed, 14 May 2025 19:21:09 -0400</pubDate><guid>https://saylesss88.github.io/posts/conditional_configuration/</guid><description>&lt;h1 id="conditional-configuration">Conditional Configuration&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv5.png"
 alt="gruv5" width="700">
&lt;/figure>

&lt;p>With options it&amp;rsquo;s easy to conditionally install something based on if another
program is enabled in your configuration.&lt;/p>
&lt;h2 id="hyprland-module">Hyprland Module&lt;/h2>
&lt;p>For example, if I have an option to enable or disable hyprland like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># hyprland.nix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkgs&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lib&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputs&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}: &lt;span style="color:#66d9ef">let&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cfg &lt;span style="color:#f92672">=&lt;/span> config&lt;span style="color:#f92672">.&lt;/span>custom&lt;span style="color:#f92672">.&lt;/span>hyprland;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">in&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options&lt;span style="color:#f92672">.&lt;/span>custom&lt;span style="color:#f92672">.&lt;/span>hyprland &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>mkOption {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>types&lt;span style="color:#f92672">.&lt;/span>bool;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> default &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Enable hyprland module&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config &lt;span style="color:#f92672">=&lt;/span> lib&lt;span style="color:#f92672">.&lt;/span>mkIf cfg&lt;span style="color:#f92672">.&lt;/span>enable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> home&lt;span style="color:#f92672">.&lt;/span>packages &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> pkgs; [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># swww&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slurp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wl-clipboard-rs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cliphist
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swappy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ydotool
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wpaperd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wofi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hyprpicker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pavucontrol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blueman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># lxqt.lxqt-policykit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brightnessctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> polkit_gnome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wlr-randr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wtype
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rose-pine-cursor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># nwg-look&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># yad&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># gtk-engine-murrine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .. snip ..&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Since the above module is set to false, it is necessary to add
&lt;code>custom.hyprland.enable = true&lt;/code> to my &lt;code>home.nix&lt;/code> to have Nix add it
to my configuration. And since &lt;code>home.packages&lt;/code> is wrapped in
&lt;code>config = lib.mkIf cfg.enable&lt;/code> Those packages will only be installed
if the module is enabled.&lt;/p></description></item><item><title>Top_level_attributes_explained</title><link>https://saylesss88.github.io/posts/top_level_attributes_explained/</link><pubDate>Wed, 14 May 2025 19:20:34 -0400</pubDate><guid>https://saylesss88.github.io/posts/top_level_attributes_explained/</guid><description>&lt;h1 id="understanding-top-level-attributes-in-nixos-modules">Understanding Top-Level Attributes in NixOS Modules&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv9.png"
 alt="cyber" width="1000">
&lt;/figure>

&lt;p>This explanation is based on insights from Infinisil, a prominent figure in the
Nix community, to help clarify the concept of top-level attributes within
NixOS modules.&lt;/p>
&lt;h2 id="the-core-of-a-nixos-system-systembuildtoplevel">The Core of a NixOS System: &lt;code>system.build.toplevel&lt;/code>&lt;/h2>
&lt;p>In a NixOS system, everything is built from a single &amp;ldquo;system derivation.&amp;rdquo; The
command &lt;code>nix-build '&amp;lt;nixpkgs/nixos&amp;gt;' -A system&lt;/code> initiates this build process.&lt;/p>
&lt;p>The &lt;code>-A system&lt;/code> part tells Nix to focus on the &lt;code>system&lt;/code> attribute defined in
the &lt;code>'&amp;lt;nixpkgs/nixos&amp;gt;'&lt;/code> file (which is essentially &lt;code>./default.nix&lt;/code> within the
Nixpkgs repository).&lt;/p></description></item><item><title>Nix_flakes_explained</title><link>https://saylesss88.github.io/posts/nix_flakes_explained/</link><pubDate>Wed, 14 May 2025 19:19:51 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_flakes_explained/</guid><description>&lt;h1 id="nix-flakes-explained">Nix Flakes Explained&lt;/h1>
&lt;figure>&lt;img src="%27/images/gruv2.png%27"
 alt="gruv-worker" width="1000">
&lt;/figure>

&lt;p>This explanation highlights common areas of confusion for those new to Nix
Flakes, aiming to clarify concepts rather than serve as a comprehensive guide.&lt;/p>
&lt;h2 id="what-is-a-nix-flake">What is a Nix Flake?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>At its core, a flake is a source tree (like a Git repository) that contains
a &lt;code>flake.nix&lt;/code> file. This file provides a standardized way to access Nix
artifacts such as packages and modules.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Think of &lt;code>flake.nix&lt;/code> as the central entry point of a flake. It not only
defines what the flake produces but also declares its dependencies.&lt;/p></description></item><item><title>Understanding_package_definitions</title><link>https://saylesss88.github.io/posts/understanding_package_definitions/</link><pubDate>Wed, 14 May 2025 19:19:10 -0400</pubDate><guid>https://saylesss88.github.io/posts/understanding_package_definitions/</guid><description>&lt;h1 id="understanding-package-definitions-in-nix">Understanding Package Definitions in Nix&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv1.png"
 alt="gruvvy-bedroom" width="1000">
&lt;/figure>

&lt;p>In Nix, the concept of a &lt;strong>package&lt;/strong> can refer to two things:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A collection of files and data that constitute a piece of software or an
artifact.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A Nix &lt;strong>expression&lt;/strong> that describes how to create such a collection. This
expression acts as a blueprint before the package exists in a tangible form.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The process begins with writing a &lt;strong>package definition&lt;/strong> using the Nix language.
This definition contains the necessary instructions and metadata about the
software you intend to &amp;ldquo;package.&amp;rdquo;&lt;/p></description></item><item><title>Nix_repl_tips</title><link>https://saylesss88.github.io/posts/nix_repl_tips/</link><pubDate>Wed, 14 May 2025 19:18:13 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_repl_tips/</guid><description>&lt;h1 id="nix-repl-list-available-commands">Nix Repl List available commands&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv11.png"
 alt="gruv11" width="1000">
&lt;/figure>

&lt;p>List available commands with &lt;code>:?&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>nix repl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nix &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#ae81ff">.24.11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type :&lt;span style="color:#f92672">?&lt;/span> for help&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nix-repl&lt;span style="color:#f92672">&amp;gt;&lt;/span> :&lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The following commands are available:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Evaluate and print expression
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;lt;x&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Bind expression to variable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :a&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :add &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Add attributes from resulting set to scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :b &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build a derivation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :bl &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build a derivation&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> creating GC roots in the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> working directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :e&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :edit &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Open package or function in &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>EDITOR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :i &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build derivation&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> install result into
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current profile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :l&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :load &lt;span style="color:#e6db74">&amp;lt;path&amp;gt;&lt;/span> Load Nix expression and add it to scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :lf&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :load-flake &lt;span style="color:#e6db74">&amp;lt;ref&amp;gt;&lt;/span> Load Nix flake and add it to scope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :p&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :print &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Evaluate and print expression recursively
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Strings are printed directly&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> without escaping&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :q&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :quit Exit nix-repl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :r&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :reload Reload all files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :sh &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build dependencies of derivation&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nix-shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :t &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Describe result of evaluation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :u &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Build derivation&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> start nix-shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :doc &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Show documentation of a builtin function
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :log &lt;span style="color:#e6db74">&amp;lt;expr&amp;gt;&lt;/span> Show logs for a derivation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :te&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :trace-enable [bool] Enable&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> disable or toggle showing traces for
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :&lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> :help Brings up this help menu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="load-nix-expressions-directly">Load Nix expressions Directly&lt;/h2>
&lt;p>You can quickly evaluate a random Nix expression:&lt;/p></description></item><item><title>Understanding_nix_functions</title><link>https://saylesss88.github.io/posts/understanding_nix_functions/</link><pubDate>Wed, 14 May 2025 19:17:32 -0400</pubDate><guid>https://saylesss88.github.io/posts/understanding_nix_functions/</guid><description>&lt;h1 id="understanding-nix-functions">Understanding Nix Functions&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/nixLogo.png"
 alt="NixFlakeLogo" width="500">
&lt;/figure>

&lt;p>Functions are a fundamental concept in Nix and are prevalent throughout Nix code. Grasping how they work is crucial for understanding and writing Nix expressions.&lt;/p>
&lt;h2 id="the-single-argument-nature-of-nix-functions">The Single-Argument Nature of Nix Functions&lt;/h2>
&lt;p>A key concept to understand is that in Nix, every function conceptually takes &lt;strong>exactly one argument&lt;/strong>. What might appear as multi-argument functions are actually achieved through a technique called &lt;strong>currying&lt;/strong>, where a series of nested single-argument functions are used.&lt;/p></description></item><item><title>Intro_to_jujutsu</title><link>https://saylesss88.github.io/posts/intro_to_jujutsu/</link><pubDate>Wed, 14 May 2025 19:07:59 -0400</pubDate><guid>https://saylesss88.github.io/posts/intro_to_jujutsu/</guid><description>&lt;h1 id="intro-to-jujutsu-using-jj-in-an-existing-git-repo">Intro to Jujutsu (Using jj in an existing Git Repo)&lt;/h1>
&lt;p>&lt;img src="https://saylesss88.github.io/images/jujutsu.png" alt="Jujutsu Logo">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>You can use jujutsu (jj) with existing Git repositories with one command.
&lt;code>jj git init --colocate&lt;/code> or &lt;code>jj git init --git-repo /path/to/git_repository&lt;/code>.
The native repository format for jj is still a work in progress so people
typically use a &lt;code>git&lt;/code> repository for backend.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unlike &lt;code>git&lt;/code>, &lt;code>jj&lt;/code> has no index &amp;ldquo;staging area&amp;rdquo;. It treats the working copy
as an actual commit. When you make changes to files, these changes are
automatically recorded to the working commit. There&amp;rsquo;s no need to explicitly
stage changes because they are already part of the commit that represents
your current working state.&lt;/p></description></item><item><title>Nix_modules_explained</title><link>https://saylesss88.github.io/posts/nix_modules_explained/</link><pubDate>Wed, 14 May 2025 19:03:40 -0400</pubDate><guid>https://saylesss88.github.io/posts/nix_modules_explained/</guid><description>&lt;h1 id="nixos-modules">NixOS Modules&lt;/h1>
&lt;figure>&lt;img src="https://saylesss88.github.io/images/gruv3.png"
 alt="gruv3" width="1000">
&lt;/figure>

&lt;p>TL;DR: In this post I break down the NixOS module system and explain how to
define options. As well as how to test modules with the repl.&lt;/p>
&lt;ul>
&lt;li>Most modules are functions that take an attribute set and return an attribute
set.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Refresher&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>An &lt;strong>attribute set&lt;/strong> is a collection of name-value pairs wrapped in curly
braces:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>A &lt;strong>function&lt;/strong> with an attribute set argument:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>{ a&lt;span style="color:#f92672">,&lt;/span> b }: a &lt;span style="color:#f92672">+&lt;/span> b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>The simplest possible &lt;strong>NixOS Module&lt;/strong>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#f92672">...&lt;/span> }:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>NixOS produces a full system configuration by combining smaller, more isolated
and reusable components: &lt;strong>Modules&lt;/strong>. In my opinion modules are one of the
first things you should understand when learning about NixOS.&lt;/p></description></item></channel></rss>